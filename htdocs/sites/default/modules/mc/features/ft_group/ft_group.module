<?php

include_once('ft_group.features.inc');


function ft_group_og_home_blocks_alter(&$blocks,$node){
  $blocks = array(
    'og_block|views-og_details-block_4|'.$node->nid => t('Follow Block'),
    'og_block|views-og_community-block_1|'.$node->nid => t('Community Block'),
    //'og_block|quicktabs-1|'.$node->nid => t('Latest, Most Popular and Featured')
  );
}

/**
 * Implementation of hook_nodeapi()
 */
function ft_group_nodeapi(&$node, $op, $teaser, $page) {
  
  if ($node->type == 'group'){
	  switch($op){
		  case 'prepare':
		  //drupal_set_message("<pre>".print_r($node, true)."</pre>");
		  if (!empty($node->field_group_manager)){
		  foreach ($node->field_group_manager as $uid)
		  {
			   $aux[] = $uid;
		  }
		  $_SESSION['aux'] = $aux;
		  }
		  break;
		  case 'insert':
		  //drupal_set_message("<pre>".print_r($node, true)."</pre>");
		  
		  if ($node->field_group_manager[0]['uid']!="")
		  {
		  foreach ($node->field_group_manager as $uid)
		  {
		  	//drupal_set_message(print_r($node, true));
		  	$result = db_result(db_query("SELECT nid FROM og_uid WHERE uid = ".$uid['uid']." AND nid = ".$node->nid));
			if ($result == "")
		  	db_query("INSERT INTO og_uid (nid, og_role, is_active, is_admin, uid) VALUES (".$node->nid.", 0, 1, 1, ".$uid['uid'].")");
		  }
	  	  }
		  break;
		  case 'update':
		  $i=0;
		  $aux = $_SESSION['aux'];
		  //drupal_set_message(print_r($aux, true));

      foreach ($node->field_group_manager as $uid){
        if (isset($uid['uid'])){
          $result = db_result(db_query("SELECT nid FROM og_uid WHERE uid = ".$uid['uid']." AND nid = ".$node->nid));
          if ($result == "")
          db_query("INSERT INTO og_uid (nid, og_role, is_active, is_admin, uid) VALUES (".$node->nid.", 0, 1, 1, ".$uid['uid'].")"); 
        }
      }
		  
		  foreach ($aux as $uid)
		  {
			  //drupal_set_message($uid['uid']);
			 if ($aux[$i]['uid'] != $node->field_group_manager[$i]['uid'] && empty($aux))
			 db_query("DELETE FROM og_uid WHERE nid = ".$node->nid." AND uid = ".$aux[$i]['uid']);
			  $i++;
		  }
		  unset($_SESSION['aux']);
		  break;
	  }
  }
}


/**
 * Implementation of hook_menu()
 */
function ft_group_menu(){
  $items['follow/%'] = array(
    'type' => MENU_CALLBACK,
    'page callback' => 'follow_group',
    //'access arguments' => array(''),
    'access callback' => true,
    'page arguments' => array(1),
    'title' => 'Follow group'
  );
  $items['follow/anonymous/%'] = array(
     'type' => MENU_CALLBACK,
     'page callback' => 'follow_group_anonymous',
     'access callback' => true,
     'page arguments' => array(2),
     'title' => 'Follow group as anonymous user'
  );
  
  return $items;
}

/**
 * Implementation of hook_init()
 */
function ft_group_init(){
  $_SESSION['anonymous_must_follow'];
  global $user;
  if($_SESSION['anonymous_must_follow'] && isset($user->uid) && $user->uid!=0){
    $nid=$_SESSION['anonymous_group'];
    if(!og_is_group_member($nid, FALSE)){
      $node=node_load($nid);
      $user->og_groups[$nid]=array(
          'title' => $node->title,
      );
      follow_group($nid);
      unset($_SESSION['anonymous_must_follow']);
    }
  }
}

/**
* Implementation of hook_token_values() for og specific tokens
*/
function ft_group_token_values($type, $object = NULL) {
  $values = array();
  switch ($type) {
    case 'user':
      $user=$object;
      $values['link-realname-or-username']  = l(_mc_api_get_user_name($user), 'user/' . $user->uid);
    break;
    case 'node':
      // Set some defaults.
      $values['type-name-lowercase'] = strtolower(node_get_types('name', $object->type));
      $values['og-title-link']  = '';
      $values['group-nid'] = '';
      $values['group-name'] = '';
      $values['group-name-raw'] = '';
      $values['group-short-name'] = '';
      $values['group-short-name-raw'] = '';
     
      if (!empty($object->og_groups) && is_array($object->og_groups)) {
        $gids = array_filter($object->og_groups);
        foreach ($gids as $gid) {
          $group = node_load($gid);
          $values['og-title-link']=l($group->title, 'node/' . $group->nid);
          $values['group-nid'] = $group->nid;
          $values['group-name'] = $group->title;
          $values['group-name-raw'] = check_plain($group->title);
          $values['group-short-name'] = $group->field_small_name[0]['value'];
          $values['group-short-name-raw'] = check_plain($group->field_small_name[0]['value']);
          break;
        }
        return $values;
      }
      break;   
  }
  return $values;
}

/**
 * Implementation of hook_token_list
 */
function ft_group_token_list($type) {
  $tokens = array();
  if ($type == 'user' || $type == 'all') {
    $tokens['user']['link-realname-or-username']  = t("Link to the user profile with the realname (if it's set) as text or the username (if realname isn't set).");
  }
  if ($type == 'node' || $type == 'all') {
    $tokens['group']['group-nid'] = t("Node ID of the group");
    $tokens['group']['group-name'] = t("Full name (title) of the group");
    $tokens['group']['group-name-raw'] = t("Full name (title) of the group - raw");
    $tokens['group']['group-short-name'] = t("Short name (used in the url)");
    $tokens['group']['group-short-name-raw'] = t("Short name (used in the url) - raw");
    $tokens['node']['og-title-link']  = t("Title of the group with a link to it");
    $tokens['node']['type-name-lowercase'] = t('The human-readable name of the node type in lowercase.');
  }

  return $tokens;
}


/*
 * Helper function to send emails to user that follow a group.
 * 
 */
  
function _ft_group_send_message($user, $group, $subject, $body, $key = 'femail_message', $to = ''){
  $object_group = node_load($group);
  $from = variable_get('site_mail', '');
  if ($to == ''){
    $to = $user->mail;
  }
  
  $forum_term_id = db_result(db_query("SELECT tid FROM og_forum_reference WHERE nid = " . $group));
  $from_group = variable_get(femail_emails, '');
  
  $message = array(
  'id' => $key,
  'from' => $from,
  'subject' => $subject,
  //'body' => drupal_wrap_mail(strip_tags($body)),
  'body' => drupal_wrap_mail($body),
  //'to' => $from_group[$forum_term_id],
  'to' => $to,
  'headers' => array(
    'From' => $from,
    'Bcc' => $to,  
  )
  );
  
  drupal_mail_send($message);
  
}



/**
 * Helper function to replace tokens in the welcome email body.
 * @param $variables contains the body. 
 *        $object_group Object Group
 * @return html
 */
function _ft_group_welcome_email_body($variables, $object_group){
  $a = $object_group->field_welcome_email['0']['value'];
  
  $first_part = "Hi there,

Thanks for following [large_name] on [site_name]!

By following us, you're demonstrating your support for our vital work.  You also get access to a variety of ways to participate and even contribute!

You can now add your comments to anything we post, and you can even use the Add Stuff menu to post your own articles, videos and other content in support of our group.  Get involved!";
  
  $second_part = "
    
You're now also eligible to participate in our group's discussion forum.  We've tried to make it real easy for you to participate however you prefer -- via the website or email.

Website: Visit [group_discussion] to browse and post topics. Be sure you're signed in to the website.

Email:  Email [email_group] to start a new topic, or just reply to existing topics from your inbox. Be sure you're sending from an email address associated with your account.

Please note: You're automatically set to receive emails when there is new activity in the discussion forum, but you can always change this.  You can find options for your account at [user_profile].";
  $third_part = "
    
Please contact us through our group page at [group_address] with any questions, and don't hesitate to let us know how this works for you.

See you around!

--The [small_name] team";
  
  if (empty($a)){
    if($object_group->field_enable_discussions['0']['value'] != '0'){
      $body = t($first_part . $second_part . $third_part, $variables);
    }else{
      $body = t($first_part . $third_part, $variables);
    }
  }else{
    //$body = $object_group->field_welcome_email['0']['value'];
    if($object_group->field_enable_discussions['0']['value'] != '0'){
      $body = t($first_part . $second_part . $third_part, $variables);
    }else{
      $body = t($first_part . $third_part, $variables);
    }
  }
  
  //return nl2br($body);
  return check_markup($body);
}


/**
 * Helper function to generate tokens in the welcome email body.
 * @param  
 *        $object_group Object
 * @return array
 */
function _ft_group_welcome_email_tokens($object_group){
  
  global $base_url;
  $from_group = variable_get(femail_emails, '');
  $forum_term_id = _get_group_or_forum('', $object_group->nid);
  
  $tokens = array(
    '[large_name]' => $object_group->title,
    '[small_name]' => $object_group->field_small_name['0']['value'],
    '[user_profile]' => url($base_url . '/user'),
    '[site_name]' => variable_get('site_name', ' '),
    '[email_group]' => $from_group[$forum_term_id],
    '[group_address]' => url($base_url . '/' . $object_group->field_small_name['0']['value']),
    '[group_discussion]' => url($base_url . '/groups/' . $object_group->field_small_name['0']['value'] . '/discussions'),
  );

  return $tokens;  
}


/**
 * Helper function to call when an user follow a group.
 * @param  
 *        $object_group Object
 * @return 
 */
function follow_group($group){
  global $user;

  db_query("INSERT into og_uid (nid, og_role, is_active, is_admin, uid) VALUES (".$group.", 0, 1, 0, ".$user->uid.")");
  // Autmatically subscribe the user to all notifications
  $tid = db_result(db_query("SELECT tid FROM {og_forum_reference} WHERE nid = %d", $group));
  db_query("INSERT INTO {femail_ext_user_subscription} (uid, tid, setting) VALUES (%d, %d, %d)", $user->uid, $tid, 0);
  // End of Automatically...
  $object_group = node_load($group);
  $subject = 'Thanks for following ' . $object_group->title;
  $variables = _ft_group_welcome_email_tokens($object_group);
  $body = str_replace('<em>', ' ', _ft_group_welcome_email_body($variables, $object_group));
  _ft_group_send_message($user, $group, $subject, $body, 'welcome_email');

  // Heartbeat record activity
  $variables = array(
    '@username' => l(_mc_api_get_user_name($user), 'user/' . $user->uid),
    '@group' => l($object_group->title, 'node/' . $group),
  );
  heartbeat_api_log('heartbeat_follow_group', $user->uid, 0, $group, $group, $variables);
}
  
/**
 * Helper function to call when an user wants to add content and isn't authenticated.
 * @param  
 *        $object_group Object
 * @return 
 */  
function follow_group_anonymous($group){
  $_SESSION['anonymous_must_follow']=true;
  $_SESSION['anonymous_group']=$group;
}