<?php
/**
 * @file
 * Code for the mt feature.
 */

include_once 'mt.features.inc';


function theme_imgplaceholder($gname,$gid){

  $range_colors = array(
    '1-15' => array("red","white"),
    '16-25' => array("orange","black"),
    '26-35' => array("purple","white"),
	'35-50' => array("green","white"),
    'else' => array("blue","white")
  );

  $colors_use = array();
  $gfirst = strtolower($gname[0]);

  foreach($range_colors as $range => $colors){
    $lt = explode("-",$range);

    if(count($lt) > 1){
      if(strlen($gname) >= $lt[0] && strlen($gname) <= $lt[1]){
        $colors_use = $colors;
        break 1;
      }
    }
  }

  if(empty($colors_use)){
    $colors_use =  $range_colors['else'];
  }

  $glink = url("node/".$gid);
  return "<div class=\"img-placeholder\"><a class=\"img\" href='$glink'><img src='/sites/miamitech.org/themes/miamitech/images/icons/ico-event.png'/></a></div>";
}

function theme_imgplaceholder_old($gname,$height = "83px",$width = "83px"){
  global $range_colors;

  $range_colors = array(
    'a-f' => array("red","white"),
    'f-l' => array("orange","black"),
    'l-s' => array("purple","white"),
    's-z' => array("green","white"),
    'else' => array("green","white")
  );

  $colors_use = array();
  $gfirst = strtolower($gname[0]);

  foreach($range_colors as $range => $colors){
    $lt = explode("-",$range);
    if(count($lt) > 1){
      if(in_array($gfirst,range($lt[0], $lt[1]))){
         $colors_use = $colors;
         break 1;
      }
    }
  }

  if(empty($colors_use)){
    $colors_use =  $range_colors['else'];
  }

  return "<div class=\"img-placeholder\" style='width: $width; height: $height' ><div class=\"img\" style='background-color: $colors_use[0]; line-height: $height;height: $height'><span style='color: $colors_use[1]'>$gname</span></div></div>";
}

function mt_preprocess($vars,$hook){
    //dsm($hook);
  if($hook == 'views_view_field'){
      //dsm($vars,$hook);
  }
    if($hook == 'block'){
        $cblock = $vars['block'];
        if($cblock->module == 'ds' && $cblock->bid == 'ds-0b596e3199de270de74a2f6e8f0d1525'){
            $cblock->subject = t("Where it's at"); 
        }
        if($cblock->module == 'ds' && $cblock->bid == 'ds-5c755d31699c072160e29da9599e28f3'){
            $cblock->subject = t("Add to calendar");
        }
	if($cblock->module == 'views' && $cblock->delta == '-exp-latest_pages-page_7'){
            $cblock->subject = t("By group"); 
        }
    }
    
}

function mt_count_user_ct($type){
  global $user;
  return db_result(db_query("SELECT Count(node.nid) FROM node WHERE node.type = '%s'  AND node.uid = %d",$type,$user->uid));
}

function mt_init_(){
        global $user;

        if($user->uid > 1){
          $cgroups = mt_count_user_ct("group");
          $cevents = mt_count_user_ct("event");
          $glink = l("Add a Group","node/add/group");
          $elink = l("Add an Event","node/add/event");
          $icallink = l("Import an iCal Feed","node/add/event");
          $profilelink = l("Update your personal profile","user/$user->uid/edit/Personal%20information");
          $hasprofile = db_result(db_query("SELECT count(fid) FROM profile_values WHERE uid = %d AND fid = 1",$user->uid));

          if(!$hasprofile){
            $actions[]="<li><b>$profilelink</b></li>";
          }else{
            $actions[]="<li>$profilelink</li>";
          }

          if($cgroups > 0){
              $actions[]="<li>$glink</li>";
          }else{
              $actions[]="<li><b>$glink</b></li>";
          }

          if(!$cevents && $cgroups){
            $actions[]="<li><b>$elink OR $icallink</b></li>";
          }elseif($cevents){
            $actions[]="<li>$elink OR $icallink</li>";
          }

          drupal_set_message("<div class=\"wizard\"><p>Please do the following to complete your MiamiTech.org Experience</p>"."<ul>".implode($actions,"")."</ul></div>");
        }
}

function mt_ds_fields($type_name, $build_mode, $extra) {
  $fields = array(
    'mt_event_image' => array(
      'title' => t('Image'),
      'exclude' => array(
        'group' => 'group',
        'link' => 'link',
        'webform' => 'webform',
        'article' => 0,
        'audio' => 0,
        'event' => 0,
        'feeds' => 0,
        'file' => 0,
        'nnews' => 0,
        'npage' => 0,
        'place' => 0,
        'video' => 0,
        'gallery' => 0,
        'gallery_image' => 0,
        'forum' => 0,
        'taxonomy_feature' => 0,
      ),
      'type' => DS_FIELD_TYPE_CODE,
      'status' => DS_FIELD_STATUS_CUSTOM,
      'properties' => array(
        'css-class' => 'field-nodes-slideshow',
        'formatters' => array(
          'ds_eval_code' => 'Default',
        ),
        'code' => '<?php 
          print mt_event_image($object);
        ?>',
        'token' => 0,
      ),
    ),

    'mt_add_ical' => array(
      'title' => t('Add to Calendar'),
      'exclude' => array(
        'group' => 'group',
        'link' => 'link',
        'webform' => 'webform',
        'article' => 0,
        'audio' => 0,
        'event' => 0,
        'feeds' => 0,
        'file' => 0,
        'nnews' => 0,
        'npage' => 0,
        'place' => 0,
        'video' => 0,
        'gallery' => 0,
        'gallery_image' => 0,
        'forum' => 0,
        'taxonomy_feature' => 0,
      ),
      'type' => DS_FIELD_TYPE_CODE,
      'status' => DS_FIELD_STATUS_CUSTOM,
      'properties' => array(
        'css-class' => 'field-ical',
        'formatters' => array(
          'ds_eval_code' => 'Default',
        ),
        'code' => '<?php 
          print mt_add_ical($object);
        ?>',
        'token' => 0,
      ),
    ),

    'mt_add_group_ical' => array(
      'title' => t('Add Group to Calendar iCal'),
      'exclude' => array(
        'group' => 'group',
        'link' => 'link',
        'webform' => 'webform',
        'article' => 0,
        'audio' => 0,
        'event' => 0,
        'feeds' => 0,
        'file' => 0,
        'nnews' => 0,
        'npage' => 0,
        'place' => 0,
        'video' => 0,
        'gallery' => 0,
        'gallery_image' => 0,
        'forum' => 0,
        'taxonomy_feature' => 0,
      ),
      'type' => DS_FIELD_TYPE_CODE,
      'status' => DS_FIELD_STATUS_CUSTOM,
      'properties' => array(
        'css-class' => 'field-group-ical',
        'formatters' => array(
          'ds_eval_code' => 'Default',
        ),
        'code' => '<?php 
          print mt_add_group_ical($object);
        ?>',
        'token' => 0,
      ),
    ),


    'mt_add_group_rss' => array(
      'title' => t('Add Group to Calendar RSS'),
      'exclude' => array(
        'group' => 'group',
        'link' => 'link',
        'webform' => 'webform',
        'article' => 0,
        'audio' => 0,
        'event' => 0,
        'feeds' => 0,
        'file' => 0,
        'nnews' => 0,
        'npage' => 0,
        'place' => 0,
        'video' => 0,
        'gallery' => 0,
        'gallery_image' => 0,
        'forum' => 0,
        'taxonomy_feature' => 0,
      ),
      'type' => DS_FIELD_TYPE_CODE,
      'status' => DS_FIELD_STATUS_CUSTOM,
      'properties' => array(
        'css-class' => 'field-group-ical',
        'formatters' => array(
          'ds_eval_code' => 'Default',
        ),
        'code' => '<?php 
          print mt_add_group_rss($object);
        ?>',
        'token' => 0,
      ),
    ),

    'mt_add_gcal' => array(
      'title' => t('Add to Google Calendar'),
      'exclude' => array(
        'group' => 'group',
        'link' => 'link',
        'webform' => 'webform',
        'article' => 0,
        'audio' => 0,
        'event' => 0,
        'feeds' => 0,
        'file' => 0,
        'nnews' => 0,
        'npage' => 0,
        'place' => 0,
        'video' => 0,
        'gallery' => 0,
        'gallery_image' => 0,
        'forum' => 0,
        'taxonomy_feature' => 0,
      ),
      'type' => DS_FIELD_TYPE_CODE,
      'status' => DS_FIELD_STATUS_CUSTOM,
      'properties' => array(
        'css-class' => 'field-gcal',
        'formatters' => array(
          'ds_eval_code' => 'Default',
        ),
        'code' => '<?php 
          print mt_add_gcal($object);
        ?>',
        'token' => 0,
      ),
    ),
  );

  return array('nd' => $fields);
}

function mt_add_group_rss($node){
  foreach ($node->og_groups as $key => $value) {
    $gid=$key;
    break;
  }
  return '<span class="rss-group-ico"> </span><a class="ical-link" href="http://'. $_SERVER["SERVER_NAME"] .'/groups/' . $gid . '/rss">All events from this group (RSS)</a>';
}

function mt_add_group_ical($node){
  foreach ($node->og_groups as $key => $value) {
    $gid=$key;
    break;
  }
  return '<span class="ical-group-ico"> </span><a class="ical-link" href="webcal://'. $_SERVER["SERVER_NAME"] .'/group/' . $gid . '/ical">All events from this group (iCal)</a>';
}

function mt_add_ical($node){
  return '<span class="ical-ico">Image</span><a class="ical-link" href="webcal://'. $_SERVER["SERVER_NAME"] .'/node/' . $node->nid . '/ical">Just this event (iCal)</a>';
}

function mt_add_gcal($node){
  $title = urlencode($node->title);
  $description = urlencode(strip_tags($node->content['body']['#value']));
  $location_parts = array(
    $node->location['name'],
    $node->location['street'],
    $node->location['city']. ' ' .
    $node->location['province']. ' ' .
    $node->location['postal_code'],
  );
  $location = urlencode(implode(', ', $location_parts));
  $start_date = event_format_date($node->event['start_utc'], 'custom', "Ymd\THis\Z");
  $end_date = event_format_date($node->event['end_utc'], 'custom', "Ymd\THis\Z");
  return '<span class="gcal-ico">Image</span><a target="_blank" class="ical-link" href="http://www.google.com/calendar/render?action=TEMPLATE&text=' . $title . '&details=' . $description . '&dates=' . $start_date .'/' . $end_date . '&location='. $location  .'">Just this event (gCal)</a>';
}

function mt_event_image($node){
  if(count($node->field_list_image)>0 && isset($node->field_list_image['0']['fid'])){
    return views_embed_view("node_details","block_2", $node->nid);
  }
  //else{
  //  $gid = array_pop($node->og_groups);
  //  return views_embed_view("node_details","block_2", $gid);
  //}
}

function mt_form_alter(&$form, &$form_state, $form_id){
  global $user;

  if($form_id=='event_node_form'){
    if(isset($form['field_online_event'])){
      $form['locations']['0']['field_online_event'] = $form['field_online_event'];
      $form['locations'][0]['field_online_event']['#weight'] = '-99';
      unset($form['field_online_event']);
      if(isset($form['#node'])){
        if($form['#node']->field_online_event[0]['value']){
          $hidden_class = "hidden";
        }
      }
      if(!isset($hidden_class)){
        $hidden_class = "";
      }
      $form['locations']['0']['field_online_event']['#suffix'] = '<div class="default-location-wrapper '.$hidden_class . '">';
      $form['locations'][0]['#suffix'] = "</div>";
      drupal_add_js((drupal_get_path('module', 'mt') .'/js/mt_online_location.js'));
      drupal_add_css((drupal_get_path('module', 'mt') .'/css/mt_online_location.css'));
    }
  }

  if ($form['#id'] == 'node-form') {
    if(isset($form['author'])){
      $form['author']['name']['#type'] = 'hidden';
      $form['author']['date']['#type'] = 'hidden';

      $form['name'] = $form['author']['name'];
      $form['date'] = $form['author']['date'];
      unset($form['author']);
    }
    if($form['og_nodeapi']['visible']['og_groups']['#options']['0']=='- None -'){
      unset($form['og_nodeapi']['visible']['og_groups']['#options']['0']);
    }
    if (isset($form['locations'][0]) && $form['locations'][0]['#default_value']['province']=='NY' && $form['locations'][0]['#default_value']['city']=='Harlem' ) {
      $form['locations'][0]['#default_value'] = array(
        'city' => '',
        'province' => 'FL',
        'country' => 'us'
      );
    }
    if(isset($form['field_related']['#access']) && $form['field_related']['#access']==TRUE){
      $form['field_related']['#access']=FALSE;
    }
    if(isset($form['field_list_image']['#access']) && $form['field_list_image']['#access']==TRUE){
      $form['field_list_image']['#access']=FALSE;
    }
  }
  if($form['#id']=='views-exposed-form-latest-pages-page-7'){
    $form['title']['#attributes']['placeholder']= "Start typing a group's name...";
  }

}


function _schema_meta_date($ts,$itemprop = 'startDate'){
  $iso_start = date('c',$ts);
  return "<meta itemprop=\"$itemprop\" content=\"$iso_start\">";
}

function cls_to_attr($attr = array(),$what = 'class'){
  $ptn = "({(.*?)})";

  if(!empty($attr[$what])){
    $cls = &$attr[$what];

    preg_match($ptn,$cls,$matchs);

    if(count($matchs) > 1){
      $cls = trim(preg_replace($ptn,"",$cls));
      parse_str($matchs[1],$new_attr);
      $attr = array_merge($attr,$new_attr);
    }
  }

  return $attr;
}

function mt_preprocess_semanticviews_view_unformatted(&$vars){

  if(!empty($vars['group_attributes'])){
    $vars['group_attributes'] =  cls_to_attr($vars['group_attributes']);
  }

  if(!empty($vars['list_attributes'])){
    $vars['list_attributes'] =  cls_to_attr($vars['list_attributes']);
  }

  if(!empty($vars['row_attributes'])){
    foreach($vars['row_attributes'] as &$attr){
      $attr = cls_to_attr($attr);
    }
  }

}

function mt_preprocess_semanticviews_view_fields(&$vars){
  //parse querystring at classes and turn them into regular attributes
  //example: class-name {attr1=2&attr3=5} >> <tag class="class-name" attr1="2" attr3="5"></tag>

  foreach($vars['fields'] as &$field){
    if(!empty($field->attributes)){
      $field->attributes = cls_to_attr($field->attributes);
    }
  }
}

function mt_preprocess_page(&$vars){
  if(arg(0)=='latest' && isset($_GET['title'])){
    $vars['head_title'] = str_replace('Events', 'Events from ' . $_GET['title'], $vars['head_title']);
  }

  if(arg(0)=='user' && arg(1)=='register'){
    $vars['head_title'] = MC_USER_PAGE_REGISTER . ' ' . $vars['head_title'];
  }
}


function mt_ds_fields_alter(&$fields) {
  $fields['nd_directions']['properties']['formatters']['mt_location_directions'] = 'MT Format';
  $fields['nd_location_name'] = $fields['name'];
  $fields['nd_location_name']['properties']['formatters']['mt_location_textfield'] = t('MT Textfield');
  unset($fields['name']); 

  unset($fields['nd_location_gmap']['properties']['formatters']['nd_location_gmap_default']);
  $fields['nd_location_gmap']['properties']['formatters']['mt_location_gmap_default'] = 'Gmap MT';
}

function theme_mt_location_directions($field) {
  if(empty($field['object']->location['street'])){
    return;
  }
  $destination = array();
  $fields = array('street', 'city', 'province_name', 'postal_code');
  foreach ($fields as $key) {
    if (!empty($field['object']->location[$key])) {
      $destination[] = check_plain($field['object']->location[$key]);
    }
  }
  if (!empty($destination)) {
    $link ='<a href="http://maps.google.com/?daddr='. urlencode(implode($destination, '+')) .'" target="_blank">'. t('Get Directions') .'</a>';
    return $link;
  }
}

function theme_mt_location_gmap_default($field) {
  $field['format'] = 'nd_location_gmap';
  $field['formatter'] = 'nd_location_gmap_default';
  $node = $field['object'];
  if(isset($node->location) && (!empty($node->location['street']) || !empty($node->location['city']) || !empty($node->location['postal_code']) || ($node->location['latitude']!='0.000000' && $node->location['longitude']!='0.000000' ) ) ){
    if (!empty($field['object']->location['latitude']) && !empty($field['object']->location['longitude'])) {

      // Defaults.
      $zoom = 'default';
      $width = 'default';
      $height = 'default';
      $latitude = $field['object']->location['latitude'];
      $longitude = $field['object']->location['longitude'];
      $autoclick = FALSE;

      // Check format.
      $format = str_replace('nd_location_gmap_', '', $field['formatter']);
      if ($format != 'default') {
        $formatters = variable_get('nd_location_formatters', array());
        $formatter = $formatters[$format];
        $width = $formatter['width'] .'px';
        $height = $formatter['height'] .'px';
        $zoom = $formatter['zoom'];
        $autoclick = (isset($formatter['autoclick'])) ? $formatter['autoclick'] : FALSE;
      }

      return theme('nd_location_gmap', $field, $latitude, $longitude, $width, $height, $zoom, $autoclick);
    }
  }
}

function theme_mt_location_textfield($field) {
  if($field['key']=='nd_location_name'){
    $field['key']='name';
  }
  if (!empty($field['object']->location[$field['key']])) {
    $value = $field['object']->location[$field['key']];
    if ($field['key'] == 'country') {
      $value = $field['object']->location['country_name'];
    }
    if ($field['key'] == 'province') {
      $value = $field['object']->location['province_name'];
    }
    if ($field['key'] == 'locpick') {
      // Latitude.
      $value  = '';
      list($degrees, $minutes, $seconds, $negative) = location_dd_to_dms($field['object']->location['latitude']);
      $value .= "${degrees}° ${minutes}' ${seconds}\" ";
      if (!$negative) {
        $value .= 'N';
      }
      else {
        $value .= 'S';
      }
      // Longitude
      list($degrees, $minutes, $seconds, $negative) = location_dd_to_dms($field['object']->location['longitude']);
      $value .= ", ${degrees}° ${minutes}' ${seconds}\" ";
      if (!$negative) {
        $value .= 'E';
      }
      else {
        $value .= 'W';
      }
    }
    return check_plain($value);
  }
}

function mt_theme() {
  $theme_functions = array(
  'mt_location_textfield' => array(
      'arguments' => array('field' => NULL),
    ),
  'mt_location_gmap_default' => array(
      'arguments' => array('field' => NULL),
    ),
  'mt_location_directions' => array(
      'arguments' => array('field' => NULL),
    ),
  );
  return $theme_functions;
}

function mt_init(){
  if(arg(0)=='node' && is_numeric(arg(1))){
    $node = node_load(arg(1));
    if($node->type=='event'){
      drupal_add_js((drupal_get_path('module', 'mt') .'/js/mt.js'));
    }
  }
}

function mt_menu_alter(&$items) {
  unset($items['node/%views_arg/by_subject']['access arguments']);
  $items['node/%views_arg/by_subject']['access arguments']['0']['0']='views_check_roles';
  $items['node/%views_arg/by_subject']['access arguments']['0']['1']['0']['4']='4';

  unset($items['node/%views_arg/by_subject']['access arguments']);
  $items['admin/content/node']['access arguments'] =  array('mt admin nodes');
}

function _mt_node_permissions($op, $node, $account = NULL){
  global $user;
  if(array_search('publisher', $user->roles)){
    return false;
  }
  return node_access($op, $node);
}

function _mt_access_node_edit($node) {
  // Am I a group admin for this group post?
  if (!module_exists('og_access') && isset($node->og_groups)) {
    foreach ($node->og_groups as $gid) {
      if (og_is_group_admin(node_load($gid))) {
        return TRUE;
      }
    }
  }

  // Am I group admin for this group node?
  if (!module_exists('og_access') && og_is_group_admin($node)) {
    return TRUE;
  }

  global $user;
  if($node->type!='group' && $node->type!='event' && $node->type!='event_feed'){
    if(array_search('publisher', $user->roles)){
      return false;
    }
  }
  return node_access('update', $node);  
}


/**
 * Menu callback; process one time login link and redirects to the user page on success.
 */
function mc_user_pass_reset(&$form_state, $uid, $timestamp, $hashed_pass, $action = NULL) {
  global $user;

  // Check if the user is already logged in. The back button is often the culprit here.
  if ($user->uid) {
    drupal_set_message(t('You have already used this one-time login link. It is not necessary to use this link to login anymore. You are already logged in.'));
    drupal_goto();
  }
  else {
    // Time out, in seconds, until login URL expires. 24 hours = 86400 seconds.
    $timeout = 86400;
    $current = time();
    // Some redundant checks for extra security ?
    if ($timestamp < $current && $account = user_load(array('uid' => $uid, 'status' => 1)) ) {
      // Deny one-time login to blocked accounts.
      if (drupal_is_denied('user', $account->name) || drupal_is_denied('mail', $account->mail)) {
        drupal_set_message(t('You have tried to use a one-time login for an account which has been blocked.'), 'error');
        drupal_goto();
      }

      // No time out for first time login.
      if ($account->login && $current - $timestamp > $timeout) {
        drupal_set_message(t('You have tried to use a one-time login link that has expired. Please request a new one using the form below.'));
        drupal_goto('user/password');
      }
      else if ($account->uid && $timestamp > $account->login && $timestamp < $current && $hashed_pass == user_pass_rehash($account->pass, $timestamp, $account->login)) {
        // First stage is a confirmation form, then login
          watchdog('user', 'User %name used one-time login link at time %timestamp.', array('%name' => $account->name, '%timestamp' => $timestamp));
          // Set the new user.
          $user = $account;
          // user_authenticate_finalize() also updates the login timestamp of the
          // user, which invalidates further use of the one-time login link.
          user_authenticate_finalize($form_state['values']);
          drupal_set_message(t('You have just used your one-time login link. It is no longer necessary to use this link to login. Please change your password.'));
          drupal_goto('user/'. $user->uid .'/edit');
      }
      else {
        drupal_set_message(t('You have tried to use a one-time login link which has either been used or is no longer valid. Please request a new one using the form below.'));
        drupal_goto('user/password');
      }
    }
    else {
      // Deny access, no more clues.
      // Everything will be in the watchdog's URL for the administrator to check.
      drupal_access_denied();
    }
  }
}


function mt_mail_alter(&$message){
  $site_name = variable_get('site_name', '');
  $message['from'] = '"' . $site_name . '" <' .  $message['from'] . '>';
  $message['headers']['From'] = $message['from'];
  $message['headers']['Sender'] = $message['from'];
}

function mt_preprocess_views_view_field(&$variables, $hook) {
  if($variables['view']->name=='og_details'){
    if($variables['field']->field=="field_header_color_value"){
      $field = $variables['field'];
      $alias = $field->field_alias;
      if(!isset($variables['row']->$alias)){
        $widget = _mt_defaultimg_nodefield_widget_settings('field_header_color');
        $default_value = $widget['default_value']['0']['value'];
        $variables['row']->$alias = $default_value;
      }
    }
  }
}

function _mt_defaultimg_nodefield_widget_settings($field_name) {
  $sql = " SELECT widget_settings FROM {content_node_field_instance} WHERE field_name = '%s' ";
  return unserialize(db_result(db_query($sql, $field_name)));
}

function mt_preprocess_node(&$variables){
  if($variables['type']=='group' && (!isset($variables['body']) || $variables['body']==NULL || empty($variables['body']))){
    $gid = $variables['nid'];
    $nids = og_group_child_nids($gid);
    if(count($nids)==1){
      $variables['content'] = '<div id="mission" class="og-mission">This group isn\'t sharing anything yet.</div>';
    }
  }
}

function mt_preprocess_og_mission(&$variables) {
  $node = $variables['form']['#node'];
  $format = $variables['form']['#node']->format;

  //pass the missing statement through the input format from body field
  $variables['mission'] = check_markup($variables['mission'],$format);

  //expose the group url to the templates
  $url = $node->field_group_url[0]['url'];
  if(!empty($url)){
    $opts = array('attributes'=> array('target'=>"_blank"),'absolute' => true);
    $variables['url'] = l($url,$url,$opts);
  }

}
