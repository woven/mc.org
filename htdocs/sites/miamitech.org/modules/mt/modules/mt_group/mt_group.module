<?php
function mt_group_late_form_alter(&$form, &$form_state, $form_id){
  if($form_id=='group_node_form'){
    $form['title']['#required'] = false;
    $form['field_small_name']['0']['#required'] = false;
    $form['field_small_name']['#required'] = false;
    $form['#validate'][] = '_mt_group_validate_alter';
    if(arg(3)=='full'){
      $form['title']['#required'] = true;
      $form['field_small_name']['0']['#required'] = true;
      $form['field_small_name']['#required'] = true;
      $form['field_group_url']['0']['#default_value']['url'] = $_GET['url'];
    }
    if(!is_numeric(arg(1)) && arg(1)=='add' && arg(3)!='full'){
      $form['title']['#access']= false;
      $form['body_field']['#access']= false;
      $form['field_small_name']['#access']= false;
      $form['field_logo']['#access']= false;
      $form['buttons']['submit']['#value'] = 'Next';
    }
  }
}

function _mt_group_validate_alter($form, &$form_state){
  if(empty($form_state['values']['title']) && empty($form_state['values']['field_small_name']['0']['value'])){
    $group_url = $form_state['values']['field_group_url']['0']['url'];
    if(!empty($group_url)){
      $meetupparser_path = drupal_get_path('module', 'mt_group') . '/meetup/meetup.inc';
      include_once $meetupparser_path;
      $querypath_path = drupal_get_path('module', 'querypath') . '/QueryPath/QueryPath.php';
      try {
        $obj = new MeetupParser($group_url);
        $_SESSION['group_obj'] = $obj;
      }
      catch (Exception $e) {
        $query = array('url' => $group_url);
        drupal_goto('node/add/group/full', $query);
      }
    }
    else{
      drupal_goto('node/add/group/full');
    }
  }
}

function _mt_group_check_group_url_exists($group_url){
  $group_url = preg_replace('/^(http|webcal):\/{2}w{3}\.|^http:\/{2}|^w{3}\./i', '',$group_url);
  $replace_string = preg_replace('/\w+\.\w{2,3}\/[a-z-]+(\/|)/i', '', $group_url);
  $group_url = str_replace($replace_string, '', $group_url);
  $group_url = preg_replace('/\/$/i', '', $group_url);
  $group_result = db_result(db_query('SELECT count(*) FROM content_type_group WHERE field_group_url_url LIKE \'%' . $group_url .  '%\''));
  $feed_result = db_result(db_query('SELECT count(*) FROM feedapi WHERE url LIKE \'%' . $group_url .  '%\''));
  $result = $group_result + $feed_result;
  if($result){
    if($group_result){
      $nid = db_result(db_query('SELECT nid FROM content_type_group WHERE field_group_url_url LIKE \'%' . $group_url .  '%\''));
      $link = '<a href="/node/' . $nid . '">find it here</a>';
      form_set_error('', 'Hmm, seems like we already know about this group. You can ' . $link  . ' or try another.');
    }
    elseif ($feed_result) {
      $nid = db_result(db_query('SELECT nid FROM feedapi WHERE url LIKE \'%' . $group_url .  '%\''));
      $link = '<a href="/node/' . $nid . '">find it here</a>';
      form_set_error('', 'Hmm, seems like we already know about this feed. You can ' . $link  . ' or try another.');
    }
  }
}



function mt_group_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL){
  if($node->type=='event_feed' && $op=='validate'  && (!isset($node->nid) || empty($node->nid))){
    $feed_url = $node->feedapi['feedapi_url'];
    _mt_group_check_group_url_exists($feed_url);
  }
  if($node->type=='group') {
    module_load_include('inc', 'mt_group', 'meetup/meetup');
    module_load_include('php', 'querypath', 'QueryPath/QueryPath');
    switch($op){
      case 'view':
        if ($_SESSION['create_feed']) {
          $_SESSION['create_feed']=false;
          unset($_SESSION['create_feed']);
          $feed_url = $_SESSION['feed_url'];
          unset($_SESSION['feed_url']);
          $event_feed_node = new StdClass();
          $event_feed_node->type = 'event_feed';
          $event_feed_node->status = 1;  
          $event_feed_node_url = $feed_url;
          $event_feed_node->title = 'Feed from ' . $event_feed_node_url;
          $gid = $node->nid;
          $event_feed_node->og_groups[$gid] = $gid;
          $event_feed_node = feedapi_create_node($event_feed_node, $event_feed_node_url);
        }
        if(count($_SESSION['messages']['status'])){
          if(preg_match("/^You're done!/i",$_SESSION['messages']['status']['0'])){
            $link = '<a href="/node/' . $node->nid . '/edit" >edit your group</a>';
            $_SESSION['messages']['status']['0'] = 'Sweet. We found your page and imported what we could. You can ' . $link . ' as you wish.';
          }
        }
        break;
      case 'validate':
        if(!empty($node->field_group_url['0']['url']) && (!isset($node->nid) || empty($node->nid))){
          $group_url = $node->field_group_url['0']['url'];
          _mt_group_check_group_url_exists($group_url);
        }
        break;
      case 'presave':
        if(isset($_SESSION['group_obj'])){
          $obj = $_SESSION['group_obj'];
          unset($_SESSION['group_obj']);
          foreach ($obj->groupNode() as $key => $value) {
            $node->$key = $value;
          }
          if(!empty($node->nid)){
            $old_url = db_result(db_query('SELECT field_group_url_url FROM content_type_group WHERE nid='.$node->nid));
            if($old_url!=$node->field_group_url['0']['url']){
              $_SESSION['create_feed']=true;
              $_SESSION['feed_url'] = $obj->eventFeedUrl();
            }
          }
          else {
            $_SESSION['create_feed']=true;
            $_SESSION['feed_url'] = $obj->eventFeedUrl();
          }
          $logo_url =$obj->logoUrl();
          if(!empty($logo_url) && (!isset($node->field_logo['0']['fid']) || empty($node->field_logo['0']['fid'])) ){
            $file = _mt_group_save_file($obj->logoUrl());
            if(isset($file->fid)){
              $node->field_logo = array(
                array(
                    'fid' => $file->fid,
                    'title' => basename($file->filename),
                    'filename' => $file->filename,
                    'filepath' => $file->filepath,
                    'filesize' => $file->filesize,
                    'mimetype' => $file->filemime,
                    'data' => array(
                        'description' => basename($file->filename),
                    ),
                    'list' => 1,
                ),
              );
            }
          }
        } 
        break;
    }
  }
}

function _mt_group_save_file($url){
  if (!function_exists('mime_content_type')) { 
   function mime_content_type($f) { 
       $f = escapeshellarg($f); 
       return trim( `file -bi $f` ); 
   } 
  } 
  
  $field_logo = _mt_group_nodefield_widget_settings('field_logo');
  $file_temp = file_get_contents($url);
  $file_temp = file_save_data($file_temp, file_directory_path() . '/' . $field_logo['file_path'] . '/' . basename($url), FILE_EXISTS_RENAME);
  $file = new stdClass();
  $file->filename = basename($file_temp);
  $file->filepath = $file_temp;
  $file->filemime = mime_content_type($file_temp);
  $file->filesize = filesize($file_temp);
  $file->uid = $user->uid;
  $file->timestamp = time();
  $file->status = FILE_STATUS_PERMANENT;
  drupal_write_record('files', $file);
  return $file;
}

function _mt_group_nodefield_widget_settings($field_name) {
  $sql = "SELECT widget_settings FROM {content_node_field_instance} WHERE field_name = '%s' LIMIT 1";
  return unserialize(db_result(db_query($sql, $field_name)));
}