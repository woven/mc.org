<?php
/**
 * @file
 * Code for the MiamiTech Event Feed feature.
 */

include_once 'mt_event_feed.features.inc';


function mt_event_feed_form_alter(&$form, &$form_state, $form_id){
  //adding help msg for the feedapi fieldset
  if($form_id == "event_feed_node_form"){
    $form['feedapi']['#description'] = t("Import your group's event feed.  We currently only accept iCal feeds, like those found at the bottom of a Meetup.com calendar page.");
  }
}


function mt_event_feed_menu(){
  $items = array();
  $event_path = drupal_get_path('module', 'event');
  $items['group/%/ical'] = array(
    'title' => 'Group iCal feed',
    'page callback' => 'mt_event_feed_ical',
    'access callback' => true,
  );
  return $items;
}

function mt_event_feed_menu_alter(&$items){
  $items['node/%/ical']['page callback'] = 'mt_event_feed_event_node_ical';
}

function mt_event_feed_event_node_ical() {
  $node = node_load(arg(1));
  $event = _event_node_ical($node);
  $location = $node->locations['0'];
  $event['location'] = $location['name'] . ' (' . $location['street'] . ', ' . $location['city'] . ', '. $location['province'] . ' ' . $location['postal_code'] .')' ;
  $event['uid'] = url("node/$node->nid", array('absolute' => TRUE, 'alias' => TRUE));
  drupal_set_header('Content-Type: text/calendar; charset=utf-8');
  drupal_set_header('Content-Disposition: attachment; filename="calendar.ics"; ');
  print ical_export(array($event), $event['summary']);
}

function mt_event_feed_ical() {
  $gid = arg(1);
  $group = node_load($gid);
  if($group->type!='group'){
    return;
  }
  $nids = og_group_child_nids($gid);
  $events = array();
  foreach ($nids as $nid) {
    $node = node_load($nid);
    if($node->type=='event'){
      $event = _event_node_ical($node);
      $location = $node->locations['0'];
      $event['location'] = $location['name'] . ' (' . $location['street'] . ', ' . $location['city'] . ', '. $location['province'] . ' ' . $location['postal_code'] .')' ;
      $event['uid'] = url("node/$node->nid", array('absolute' => TRUE, 'alias' => TRUE));
      $events[] = $event;
    }
  }

  drupal_set_header('Content-Type: text/calendar; charset=utf-8');
  drupal_set_header('Content-Disposition: attachment; filename="calendar.ics"; ');
  print ical_export($events, $group->title);
}


function mt_event_feed_feedapi_mapper($op, $node, $feed_element = array(), $field_name = '', $sub_field = '') {
  if ($op == 'describe') {
    return t('Maps a string or an array of strings to myfields.');
  }
  else if ($op == 'list') {
    $myfields = array('event' => array(
      'start' => 'start',
      'end' => 'end',
      'timezone' => 'timezone',
      'location' => 'location',
      'geo' => 'geo',
    ));
    return $myfields;
  }
  else if ($op == 'map') {
      if ($field_name == 'event') {
        $group = node_load($node->feedapi->feed_nid);
        $node->og_groups = $group->og_groups;
        $node->og_groups_both = $group->og_groups_both;
        if (is_string($feed_element)) {
          if($sub_field=='start' || $sub_field=='end'){
            $node->event[$sub_field] = $feed_element;
            if($sub_field=='start'){
              $node->event['has_time'] = '1';
            }
            if($sub_field=='end'){
              $node->event['has_end_date'] = '1';
            }
            $node->event[$sub_field . '_exploded']['year'] = date('Y', strtotime($feed_element));
            $node->event[$sub_field . '_exploded']['month'] = date('m', strtotime($feed_element));
            $node->event[$sub_field . '_exploded']['day'] = date('d', strtotime($feed_element));
            $node->event[$sub_field . '_exploded']['hour'] = date('G', strtotime($feed_element));
            $node->event[$sub_field . '_exploded']['minute'] = date('i', strtotime($feed_element));
            $node->event[$sub_field . '_exploded']['second'] = date('s', strtotime($feed_element));
          }
          if($sub_field=='timezone'){
            if($feed_element=='UTC'){
              $feed_element = 'Etc/GMT';
            }
            $timezone = event_zone_by_name(str_replace('_', ' ',$feed_element));
            $node->event['dst_region'] = $timezone['dst_region'];;
            $node->event['offset'] = $timezone['offset'];
            $node->event['offset_dst'] = $timezone['offset_dst'];
            $node->event['timezone'] = $timezone['timezone'];
          }
          if($sub_field=='location'){
            $parts = mt_event_feed_getAddressParts($feed_element);
            $node->locations['0']['name'] = $parts['name'];
            $node->locations['0']['street'] = $parts['address'];
            $node->locations['0']['city'] = $parts['city'];
            $node->locations['0']['province'] = $parts['state'];
            $node->locations['0']['postal_code'] = $parts['zip'];
          }
          if($sub_field=='geo'){
            $parts = explode(';', $feed_element);
            $node->locations['0']['latitude'] = $parts['0'];
            $node->locations['0']['longitude'] = $parts['1'];
          }
        }
      return $node;
    }
  }
}

function mt_event_feed_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL){
  if($node->type=='event_feed' && $op=='insert'){
    $mapping = 'a:5:{s:91:"a:5:{i:0;s:7:"options";i:1;s:6:"VEVENT";i:2;s:4:"DATE";i:3;s:5:"DTEND";i:4;s:8:"datetime";}";s:61:"a:3:{i:0;s:13:"mt_event_feed";i:1;s:5:"event";i:2;s:3:"end";}";s:93:"a:5:{i:0;s:7:"options";i:1;s:6:"VEVENT";i:2;s:4:"DATE";i:3;s:7:"DTSTART";i:4;s:8:"datetime";}";s:63:"a:3:{i:0;s:13:"mt_event_feed";i:1;s:5:"event";i:2;s:5:"start";}";s:87:"a:5:{i:0;s:7:"options";i:1;s:6:"VEVENT";i:2;s:4:"DATE";i:3;s:7:"DTSTART";i:4;s:2:"tz";}";s:66:"a:3:{i:0;s:13:"mt_event_feed";i:1;s:5:"event";i:2;s:8:"timezone";}";s:60:"a:3:{i:0;s:7:"options";i:1;s:6:"VEVENT";i:2;s:8:"LOCATION";}";s:66:"a:3:{i:0;s:13:"mt_event_feed";i:1;s:5:"event";i:2;s:8:"location";}";s:55:"a:3:{i:0;s:7:"options";i:1;s:6:"VEVENT";i:2;s:3:"GEO";}";s:61:"a:3:{i:0;s:13:"mt_event_feed";i:1;s:5:"event";i:2;s:3:"geo";}";}';
    $record = new stdClass();
    $record->nid = $node->nid;
    $record->mapping = $mapping;
    drupal_write_record('feedapi_mapper', $record);
  }
  if($node->type=='event' && ($op=='presave')){
    if((empty($node->event['dst_region']) || $node->event['dst_region']==NULL) && (empty($node->event['timezone']) || $node->event['timezone']==NULL)){
      $timezone = event_zone_by_name(str_replace('_', ' ', 'America/New_York'));
      $node->event['dst_region'] = $timezone['dst_region'];;
      $node->event['offset'] = $timezone['offset'];
      $node->event['offset_dst'] = $timezone['offset_dst'];
      $node->event['timezone'] = $timezone['timezone'];
    }
  }
  if(isset($node->locations['0']) && is_array($node->locations['0']) && (empty($node->locations['0']['street']) && empty($node->locations['0']['city'])  && empty($node->locations['0']['province'])) && (!empty($node->locations['0']['latitude']) && !empty($node->locations['0']['longitude'])))  {
    $parts = mt_event_feed_reverse_getAddressParts($node->locations['0']['latitude'], $node->locations['0']['longitude']);
    $node->locations['0']['name'] = $parts['name'];
    $node->locations['0']['street'] = $parts['address'];
    $node->locations['0']['city'] = $parts['city'];
    $node->locations['0']['province'] = $parts['state'];
    $node->locations['0']['postal_code'] = $parts['zip'];
  }
}

function mt_event_feed_reverse_getAddressParts($latitude, $longitude){
  $address = $latitude . ',' . $longitude;
  $address_encoded = urlencode($address);
  $json = file_get_contents('http://maps.googleapis.com/maps/api/geocode/json?latlng=' . $address_encoded . '&sensor=false');
  $results = json_decode($json);
  if($results->status=='OK'){
    $parts = array( 
          'name'=>array('point_of_interest','establishment'),   
          'address'=>array('street_number','route'), 
          'city'=>array('locality'), 
          'state'=>array('administrative_area_level_1'), 
          'zip'=>array('postal_code'), 
        ); 
    if (!empty($results->results['0']->address_components)){ 
      $ac = $results->results['0']->address_components; 
      foreach($parts as $need=>&$types) { 
        foreach($ac as &$a) { 
          if (in_array($a->types['0'],$types)){
            if(!empty($address_out[$need])){
              $address_out[$need] .= ' ' . $a->short_name; 
            }
            else {
              $address_out[$need] = $a->short_name; 
            }
          }
          elseif (empty($address_out[$need])){
            $address_out[$need] = ''; 
          }
        } 
      } 
    }
    return $address_out;
  }
  else {
    return array();
  }
} 


function mt_event_feed_getAddressParts($address){ 
  if($address=='webinar'){
    return array(
      'name' => $address,
      'address'=>'', 
      'city'=>'', 
      'state'=>'', 
      'zip'=>'', 
    );
  } 
  $address_encoded = urlencode($address);
  $json = file_get_contents('http://maps.googleapis.com/maps/api/geocode/json?address=' . $address_encoded . '&sensor=false');
  $results = json_decode($json);
  if($results->status=='OK'){
    $parts = array( 
          'name'=>array('point_of_interest','establishment'),   
          'address'=>array('street_number','route'), 
          'city'=>array('locality'), 
          'state'=>array('administrative_area_level_1'), 
          'zip'=>array('postal_code'), 
        ); 
        if (!empty($results->results['0']->address_components)){ 
          $ac = $results->results['0']->address_components; 
          foreach($parts as $need=>&$types) { 
            foreach($ac as &$a) { 
              if (in_array($a->types['0'],$types)){
                if(!empty($address_out[$need])){
                  $address_out[$need] .= ' ' . $a->short_name; 
                }
                else {
                  $address_out[$need] = $a->short_name; 
                }
              }
              elseif (empty($address_out[$need])){
                $address_out[$need] = ''; 
              }
            } 
          } 
        }
    if(empty($address_out['address'])){
      $new_address = ereg_replace("[^A-Za-z0-9 ]", "", $address);
      $address_parts = preg_split('/ [0-9]+ /', $new_address);
      if(preg_match('/ [0-9]+ /', $new_address, $matches)){
        $address_number = $matches['0'];
        $address_filtered = $address_number .' ' . $address_parts['1'];
        $address_encoded = urlencode($address_filtered);
        $json = file_get_contents('http://maps.googleapis.com/maps/api/geocode/json?address=' . $address_encoded . '&sensor=false');
        $results = json_decode($json);
        if($results->status=='OK'){
          $parts = array(
            'address'=>array('street_number','route'), 
          );
          if (!empty($results->results['0']->address_components)){ 
            $ac = $results->results['0']->address_components; 
            foreach($parts as $need=>&$types) { 
              foreach($ac as &$a) { 
                if (in_array($a->types['0'],$types)){
                  if(!empty($address_out[$need])){
                    $address_out[$need] .= ' ' . $a->short_name; 
                  }
                  else {
                    $address_out[$need] = $a->short_name; 
                  }
                }
                elseif (empty($address_out[$need])){
                  $address_out[$need] = ''; 
                }
              } 
            } 
          }
        }
      }
    }

    //if(empty($address_out['name'])){
      $address_parts = explode(' ', !empty($address_out['address'])? $address_out['address'] : $address_out['city']);
      $address_start = $address_parts['0'];
      if(!empty($address_start)){
        $address_parts = explode($address_start, $address);
      }
      $address_out['name'] = ereg_replace("[^A-Za-z0-9 #-&]", "", $address_parts['0']);
    //}
    return $address_out;
  }
  else {
    return array();
  }
}

