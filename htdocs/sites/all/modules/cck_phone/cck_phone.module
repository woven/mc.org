<?php

/**
 * @file
 * Defines phone number fields for CCK.
 * Provide some verifications on the phone numbers
 */

define('CCK_PHONE_PHONE_MIN_LENGTH', 4);   // Is there a phone number less than 4 digits?
define('CCK_PHONE_PHONE_MAX_LENGTH', 15);  // International standard 15 digits
define('CCK_PHONE_EXTENSION_MAX_LENGTH', 6);
define('CCK_PHONE_CC_MAX_LENGTH', 2);
define('CCK_PHONE_MOBILE_AGENT', '/(ipod|iphone|android|blackberry|palm|nokia|opera\s+mobi|opera\s+mini|windows\s+ce|iemobile)/i');

// load country codes
require_once dirname(__FILE__) . '/cck_phone_countrycodes.inc';

/**
 * Implementation of hook_init().
 * This hook is called on module initialization.
 */
function cck_phone_init() {
  // Token module support.
  if (module_exists('token')) {
    module_load_include('inc', 'cck_phone', 'cck_phone.token');
  }
}

/**
 * Implementation of hook_theme().
 */
function cck_phone_theme() {
  return array(
    'phone_number' => array(
      'arguments' => array('element' => NULL),
    ),
    'phone_number_extension' => array(
      'arguments' => array('extension' => ''),
    ),
    'cck_phone_formatter_default' => array(
      'arguments' => array('element' => NULL),
    ),
    'cck_phone_formatter_local' => array(
      'arguments' => array('element' => NULL),
    ),
    'cck_phone_mobile_tel' => array(
      'arguments' => array('element' => NULL, 'phone' => ''),
    ),
  );
}


/**
 * Implementation of hook_field_info().
 */
function cck_phone_field_info() {
  return array(
    'phone_number' => array(
      'label' => t('Phone number'),
      'description' => t('Store a number and country code in the database to assemble a phone number.'),
    ),
  );
}

/**
 * Implementation of hook_field_settings().
 */
function cck_phone_field_settings($op, $field) {
  switch ($op) {
    case 'form':
      drupal_add_css(drupal_get_path('module', 'cck_phone') . '/cck_phone.css');
      drupal_add_js(drupal_get_path('module', 'cck_phone') . '/cck_phone.js');

      $form = array();
      $form['default_country'] = array(
        '#type' => 'select',
        '#title' => t('Default country code'),
        '#default_value' => isset($field['default_country']) && ($field['default_country'] !== '') ? $field['default_country'] : NULL,
        '#options' => _cck_phone_cc_options(TRUE),
      );

      $form['all_country_codes'] = array(
        '#type' => 'checkbox',
        '#title' => t('Show all country codes.'),
        '#default_value' => isset($field['all_country_codes']) && ($field['all_country_codes'] !== '') ? $field['all_country_codes'] : TRUE,
        '#description' => t('Uncheck this to select the country to be displayed.'),
      );

      // Country codes settings
      $form['country_codes'] = array(
        '#title' => 'Country selection',
        '#type' => 'fieldset',
        '#collapsible' => TRUE,
        '#collapsed' => TRUE,
        '#attributes' => array('class' => 'cck-phone-settings'),
      );

      $form['country_codes']['country_selection'] = array(
        '#type' => 'checkboxes',
        '#title' => t('Select country codes to be included'),
        '#default_value' => isset($field['country_selection']) && !empty($field['country_selection']) ? $field['country_selection'] : array($field['default_country'] => $field['default_country']),
        '#options' => _cck_phone_cc_options(TRUE),
        '#description' => t('Country marks with <em>*</em> has custom country code settings and/or validation.'),
      );

      $form['enable_custom_country'] = array(
        '#type' => 'checkbox',
        '#title' => t('Enable country level validation'),
        '#default_value' => isset($field['enable_custom_country']) && ($field['enable_custom_country'] !== '') ? $field['enable_custom_country'] : TRUE,
        '#description' => t('Uncheck this to disable stringent country phone number validation.'),
      );

      $form['enable_extension'] = array(
        '#type' => 'checkbox',
        '#title' => t('Enable phone extension support'),
        '#default_value' => isset($field['enable_extension']) && ($field['enable_extension'] !== '') ? $field['enable_extension'] : FALSE,
        '#description' => t('Check this to enable phone number extension field.'),
      );

      $form['enable_mobile'] = array(
        '#type' => 'checkbox',
        '#title' => t('Enable mobile device detection'),
        '#default_value' => isset($field['enable_mobile']) && ($field['enable_mobile'] !== '') ? $field['enable_mobile'] : FALSE,
        '#description' => t('Check this to enable phone number link on mobile browsers (RFC3966).'),
      );

      // Display country specific settings
      foreach (_cck_phone_custom_cc() as $cc) {
        $function = $cc . '_phone_field_settings';
        if (function_exists($function)) {
          $country_settings = $function($op, $field);
          if (isset($country_settings) && !empty($country_settings)) {
            $country_codes = cck_phone_countrycodes($cc);
            // Wrap with fieldset
            $wrapper = array(
              '#title' => $country_codes['country'] . ' specific settings',
              '#type' => 'fieldset',
              '#collapsible' => TRUE,
              '#collapsed' => TRUE,
              '#attributes' => array('class' => 'cck-phone-settings cck-phone-settings-' . $cc),
            );
            $wrapper[] = $country_settings;
            array_push($form, $wrapper);
          }
        }
      }

      return $form;

    case 'validate':
      // Validate country specific settings
      foreach (_cck_phone_custom_cc() as $cc)  {
        $function = $cc . '_phone_field_settings';
        if (function_exists($function)) {
          $function($op, $field);
        }
      }
      break;

    case 'save':
      $settings = array('default_country', 'all_country_codes', 'country_selection', 'enable_custom_country', 'enable_extension', 'enable_mobile');

      // Save country specific settings
      foreach (_cck_phone_custom_cc() as $cc)  {
        $function = $cc . '_phone_field_settings';
        if (function_exists($function)) {
          array_push($settings, $function($op, $field));
        }
      }
      return $settings;

    // TODO: filters for phone number?
//    case 'filters':
//      break;

    case 'database columns':
      return array(
        'number' => array(
          'type' => 'varchar',
          'length' => CCK_PHONE_PHONE_MAX_LENGTH,
          'not null' => FALSE,
        ),
        'country_codes' => array(
          'type' => 'varchar',
          'length' => CCK_PHONE_CC_MAX_LENGTH,
          'not null' => FALSE,
        ),
        'extension' => array(
          'type' => 'varchar',
          'length' => CCK_PHONE_EXTENSION_MAX_LENGTH,
          'not null' => FALSE,
        ),
      );
  }
}

/**
 * Implementation of hook_field().
 */
function cck_phone_field($op, &$node, $field, &$items, $teaser, $page) {
  switch ($op) {
    case 'validate':
      foreach ($items as $delta => $value) {
        _cck_phone_validate($items[$delta], $delta, $field, $node);
      }

      return $items;
      break;

    case 'presave':
      foreach ($items as $delta => $value) {
        _cck_phone_process($items[$delta], $delta, $field, $node);
      }
      break;

    // Do country level code need to modify the output?
    case 'sanitize':
      foreach ($items as $delta => $value) {
        _cck_phone_sanitize($items[$delta], $delta, $field, $node);
      }
      break;

  }

}

/**
 * Implementation of hook_field_formatter_info().
 */
function cck_phone_field_formatter_info() {
  return array(
    'default' => array(
      'label' => 'Global phone number (default)',
      'field types' => array('phone_number'),
      'multiple values' => CONTENT_HANDLE_CORE,
    ),
    'local' => array(
      'label' => 'Local phone number',
      'field types' => array('phone_number'),
      'multiple values' => CONTENT_HANDLE_CORE,
    ),
  );
}

/**
 * Theme function for phone extension.
 */
function theme_phone_number_extension($extension = '') {
  return t('<em> ext.</em> @extension', array('@extension' => $extension));
}

/**
 * Theme function for mobile tel.
 */
function theme_cck_phone_mobile_tel($element, $phone = '') {
  $item = $element['#item'];

  // Mobile browsers support
  if (isset($item['mobile_output']) && $item['mobile_output'] == TRUE) {
    // Always output as global phone number without separator, leave the $phone display unchanged
    $cc = cck_phone_countrycodes($item['country_codes']);
    $tel = $cc['code'] . $item['number'];

    $phone = '<a href="tel:' . $tel . '">' . $phone . '</a>';
  }

  return $phone;
}

/**
 * Theme function for 'default' or global phone number field formatter.
 */
function theme_cck_phone_formatter_default($element) {
  $item = $element['#item'];
  $phone = '';

  // Display a global phone number with country code.
  if (!empty($item['number']) && !empty($item['country_codes'])) {
    // Call country default formatter if exist
    $function = $item['country_codes'] . '_formatter_default';
    if (function_exists($function)) {
      $phone = $function($element);
    }
    else {
      $cc = cck_phone_countrycodes($item['country_codes']);
      $phone = $cc['code'] .'-'. $item['number'];
    }

    // Extension
    if (!empty($item['extension'])) {
      $phone = $phone . theme('phone_number_extension', $item['extension']);
    }

    // Mobile browsers support
    $phone = theme('cck_phone_mobile_tel', $element, $phone);
  }

  return $phone;
}

/**
 * Theme function for 'local' phone number field formatter.
 */
function theme_cck_phone_formatter_local($element) {
  $item = $element['#item'];
  $phone = '';

  // Display a local phone number without country code.
  if (!empty($item['number'])) {
    // Call country local formatter if exist
    $function = $item['country_codes'] . '_formatter_local';
    if (function_exists($function)) {
      $phone = $function($element);
    }
    else {
      $phone = $item['number'];
    }

    // Extension
    if (!empty($item['extension'])) {
      $phone = $phone . theme('phone_number_extension', $item['extension']);
    }

    // Mobile browsers support
    $phone = theme('cck_phone_mobile_tel', $element, $phone);
  }

  return $phone;
}

/**
 * Generate an array of country codes, for use in select or checkboxes form.
 *
 * @param boolean $show_custom
 *   Mark item with '*' to indicate the country code has include file.
 * @param array $country_selection
 *   Limit the list to the countries listed in this array.
 * @return string
 */
function _cck_phone_cc_options($show_custom = FALSE, $country_selection = array()) {
  $options = array();

  if ($show_custom) {
    $custom_cc = _cck_phone_custom_cc();
  }

  foreach (cck_phone_countrycodes() as $cc => $value) {
    $cc_name = $value['country'] .' ('. $value['code'] .')';

    // faster using array key instead of in_array
    if ($show_custom && isset($custom_cc[$cc])) {
      $cc_name .= ' *';
    }

    if (!empty($country_selection) && $country_selection[$cc] === 0) {
      continue;
    }
    $options[$cc] = check_plain($cc_name);
  }

  return $options;
}

/**
 * Get list of country codes that has custom includes.
 *
 * @return
 *   Array of country codes abbreviation or empty array if none exist.
 */
function _cck_phone_custom_cc() {
  static $countrycodes;

  if (!isset($countrycodes)) {
    // load custom country codes phone number includes
    $path = drupal_get_path('module', 'cck_phone') .'/includes';
    // scan include phone numbers directory
    $files = file_scan_directory($path, '^phone\..*\.inc$');

    $countrycodes = array();
    foreach ($files as $file) {
      module_load_include('inc', 'cck_phone', '/includes/'. $file->name);
      list ($dummy, $countrycode) = explode('.', $file->name);
      // faster using array key
      $countrycodes[$countrycode] = $countrycode;
    }
  }

  return $countrycodes;
}

function _cck_phone_valid_input($input) {
  // lenient checking, as long as don't have invalid phone number character
  $regex = '/^
    [\s.()-]*     # optional separator
    (?:           # }
      \d          # } 4-15 digits number
      [\s.()-]*   # } each followed by optional separator
    ){'. CCK_PHONE_PHONE_MIN_LENGTH .','. CCK_PHONE_PHONE_MAX_LENGTH .'}       # }
    $/x';

  return preg_match($regex, $input);
}

function _cck_phone_valid_cc_input($list, $cc) {
  if (isset($list[$cc]) && $list[$cc] == $cc) {
    return TRUE;
  }

  return FALSE;
}

function _cck_phone_validate(&$item, $delta, $field, $node) {
  $phone_input = trim($item['number']);
  $countrycode = trim($item['country_codes']);
  $ext_input = '';
  if ($field['enable_extension']) {
    $ext_input = trim($item['extension']);
  }

  if ($phone_input && !(isset($field['widget']['default_value'][$delta]['number']) && $phone_input == $field['widget']['default_value'][$delta]['number'] && !$field['required'])) {

    $error_params = array(
      '%phone_input' => check_plain($phone_input),   // original phone input
      '%countrycode' => check_plain($countrycode),
      '%min_length' => CCK_PHONE_PHONE_MIN_LENGTH,
      '%max_length' => CCK_PHONE_PHONE_MAX_LENGTH,
      '%ext_input' => check_plain($ext_input),
      '%ext_max_length' => CCK_PHONE_EXTENSION_MAX_LENGTH,
    );

    // Only allow digit, dash, space and bracket
    if (!_cck_phone_valid_input($phone_input, $ext_input)) {
      $error = t('Phone number must be %min_length-%max_length digits only.', $error_params);
      if ($field['enable_extension'] && $ext_input != '') {
        $error .= '<br />'. t('Phone extension must be less than %ext_max_length digits.', $error_params);
      }

      form_set_error($field['field_name'], $error);
    }
    else {
      if (!$field['all_country_codes']) {
        if (!_cck_phone_valid_cc_input($field['country_selection'], $countrycode)) {
          $error = t('Invalid country code "%countrycode" submitted.', $error_params);
          form_set_error($field['field_name'], $error);
        }
      }
      // Generic number validation
      if (!cck_phone_validate_number($countrycode, $phone_input, $ext_input)) {
        $error = t('Phone number must be %min_length-%max_length digits only.', $error_params);
        if ($field['enable_extension'] && $ext_input != '') {
          $error .= '<br />'. t('Phone extension must be less than %ext_max_length digits.', $error_params);
        }

        form_set_error($field['field_name'], $error);
      }
      // Country level validation if enabled
      elseif ($field['enable_custom_country'] != 0 || is_null($field['enable_custom_country']) || !isset($field['enable_custom_country'])) {
        $custom_cc = _cck_phone_custom_cc();

        if (isset($custom_cc[$countrycode])) {
          $validate_function = $countrycode . '_validate_number';

          if (function_exists($validate_function)) {
            $error = '';
            if (!$validate_function($phone_input, $ext_input, $error)) {
              form_set_error($field['field_name'], t($error, $error_params));
            }
          }
        }
      }
    }
  }
}

function _cck_phone_process(&$item, $delta = 0, $field, $node) {
  $widget = $field['widget']['default_value'][$delta];
  // Clean up the phone number.
  $item['number'] = cck_phone_clean_number($item['number']);
  $item['extension'] = cck_phone_clean_number($item['extension']);

  // Don't save an invalid default value.
  if ((isset($widget['number']) && $item['number'] == $widget['number']) && (isset($widget['country_codes']) && $item['country_codes'] == $widget['country_codes']) && is_object($node)) {
    if (!cck_phone_validate_number($item['country_codes'], $item['number'], $item['extension'])) {
      unset($item['number']);
      unset($item['country_codes']);
      unset($item['extension']);
    }
  }
}

/**
 * Cleanup user-entered values for a phone number field according to field settings.
 *
 * @param $item
 *   A single phone number item, usually containing number and country code.
 * @param $delta
 *   The delta value if this field is one of multiple fields.
 * @param $field
 *   The CCK field definition.
 * @param $node
 *   The node containing this phone number.
 */
function _cck_phone_sanitize(&$item, $delta, &$field, &$node) {
  if (!empty($item['number'])) {
    $cc = $item['country_codes'];
    $item['number'] = cck_phone_clean_number($item['number']);

    $custom_cc = _cck_phone_custom_cc();
    if (isset($custom_cc[$cc])) {
      $function = $cc . '_sanitize_number';

      if (function_exists($function)) {
        $function($item['number']);
      }
    }
  }

  if ($field['enable_extension']) {
    $item['extension'] = cck_phone_clean_number($item['extension']);
  }
  else {
    unset($item['extension']);
  }

  if ($field['enable_mobile'] && preg_match(CCK_PHONE_MOBILE_AGENT, drupal_strtolower($_SERVER['HTTP_USER_AGENT']))) {
    $item['mobile_output'] = TRUE;
  }
}


/**
 * Implementation of hook_widget_info().
 */
function cck_phone_widget_info() {
  return array(
    'phone_number' => array(
      'label' => t('Phone number'),
      'field types' => array('phone_number'),
      'multiple values' => CONTENT_HANDLE_CORE,
    ),
  );
}

/**
 * Implementation of hook_widget_settings().
 */
function cck_phone_widget_settings($op, $widget) {
  switch ($op) {
    case 'form':
      $form = array();
      $size = (isset($widget['size']) && is_numeric($widget['size'])) ? $widget['size'] : CCK_PHONE_PHONE_MAX_LENGTH;
      $form['input']['size'] = array(
        '#type' => 'textfield',
        '#title' => t('Size of phone number textfield'),
        '#default_value' => $size,
        '#element_validate' => array('_element_validate_integer_positive'),
        '#required' => TRUE,
        '#description' => t('International number is maximum 15 digits with additional country code, default is %length.', array('%length' => CCK_PHONE_PHONE_MAX_LENGTH)),
      );
      return $form;

    case 'save':
      return array('size');
  }
}

/**
 * Implementation of hook_widget().
 */
function cck_phone_widget(&$form, &$form_state, $field, $items, $delta = 0) {
  $element = array(
    '#type' => $field['widget']['type'],
    '#default_value' => isset($items[$delta]) ? $items[$delta] : '',
    '#title' => $field['widget']['label'],
    '#weight' => $field['widget']['weight'],
    '#description' => $field['widget']['description'],
    '#required' => $field['required'],
    '#field' => $field,
  );
  return $element;
}

/**
 * Implementation of hook_content_is_empty().
 */
function cck_phone_content_is_empty($item, $field) {
  return empty($item['number']);
}

/**
 * Implementation of FAPI hook_elements().
 */
function cck_phone_elements() {
  return array(
    'phone_number' => array(
      '#input' => TRUE,
      '#process' => array('cck_phone_process'),
      '#autocomplete_path' => FALSE,
    ),
  );
}

/**
 * FAPI theme for an individual phone number elements.
 *
 * The phone number is already rendered by the themes and the html
 * output lives in $element['#children']. Override this theme to
 * make custom changes to the output.
 *
 * $element['#title'] is the field title
 * $element['#field_name'] contains the field name
 * $element['#delta''] is the position of this element in the group
 * $element['number] is the phone number
 * $element['country_codes'] is the country code
 */
function theme_phone_number($element) {
  drupal_add_css(drupal_get_path('module', 'cck_phone') .'/cck_phone.css');

  // Prefix single value phone number fields with the name of the field.
//  if (empty($element['#field']['multiple'])) {
//    if (isset($element['number']) && isset($element['country_codes'])) {
//      $element['number']['#title'] = $element['#title'] .' '. $element['number']['#title'];
//      $element['country_codes']['#title'] = $element['#title'] .' '. $element['country_codes']['#title'];
//    }
//    elseif ($element['number']) {
//      $element['number']['#title'] = $element['#title'];
//    }
//  }

  $output = '';

  $output = '<div class="form-item"';
  if (!empty($element['#id'])) {
    $output .= ' id="'. $element['#id'] .'-wrapper"';
  }
  $output .= ">\n";

  $required = !empty($element['#required']) ? '<span class="form-required" title="'. t('This field is required.') .'">*</span>' : '';

  if (!empty($element['#title'])) {
    $title = $element['#title'];
    if (!empty($element['number']['#id'])) {
      $output .= ' <label for="'. $element['number']['#id'] .'">'. t('!title: !required', array('!title' => filter_xss_admin($title), '!required' => $required)) ."</label>\n";
    }
    else {
      $output .= ' <label>'. t('!title: !required', array('!title' => filter_xss_admin($title), '!required' => $required)) ."</label>\n";
    }
  }

  $output .= '<div class="cck-phone-field clear-block">';
  if (isset($element['number'])) {
    $output .= '<div class="cck-phone-field-phone cck-phone-column">'. theme('textfield', $element['number']) .'</div>';
  }
  if (isset($element['extension'])) {
    $prefix = isset($element['extension']['#prefix']) ? $element['extension']['#prefix'] : '';
    $output .= '<div class="cck-phone-field-ext cck-phone-column">'. $prefix . theme('textfield', $element['extension']) .'</div>';
  }
  $output .= '<div class="cck-phone-field-cc cck-phone-column">'. theme('select', $element['country_codes']) .'</div>';
  $output .= '</div></div>';

  return $output;
}

/**
 * Process an individual element.
 */
function cck_phone_process($element, $edit, $form_state, $form) {
  $field_name = $element['#field_name'];
  $field = $form['#field_info'][$field_name];
  $field_key  = $element['#columns'][0];
  $delta = $element['#delta'];

  $element['number'] = array(
    '#type' => 'textfield',
    '#maxlength' => CCK_PHONE_PHONE_MAX_LENGTH,
    '#size' => CCK_PHONE_PHONE_MAX_LENGTH,
//    '#title' => t('Number'),
    '#description' => $element['#description'],
    '#required' => ($delta == 0 && $field['number'] !== 'optional') ? $element['#required'] : FALSE,
    '#default_value' => isset($element['#value']['number']) ? $element['#value']['number'] : NULL,
  );

  if ($field['enable_extension']) {
    $element['extension'] = array(
     '#type' => 'textfield',
     '#maxlength' => CCK_PHONE_EXTENSION_MAX_LENGTH,
     '#size' => CCK_PHONE_EXTENSION_MAX_LENGTH,
//     '#title' => t('ext'),
     '#required' => FALSE,
     '#default_value' => isset($element['#value']['extension']) ? $element['#value']['extension'] : NULL,
     '#prefix' => '<div class="cck-phone-extension">'. t('ext') .'</div>',
    );
  }

  $element['country_codes'] = array(
    '#type' => 'select',
//    '#title' => 'Country code',
    '#default_value' => ($element['#value']['number'] != '' && isset($element['#value']['country_codes'])) ? $element['#value']['country_codes'] : (isset($field['default_country']) ? $field['default_country'] : NULL),
  );
  if ($field['all_country_codes']) {
    $element['country_codes']['#options'] = _cck_phone_cc_options();
  }
  else {
    $element['country_codes']['#options'] = _cck_phone_cc_options(FALSE, $field['country_selection']);
  }

  return $element;
}

/**
 * Strip number of space, hash, dash, bracket, etc leaving digit only.
 *
 * @param string $number
 * @return string Returns digit only phone number.
 */
function cck_phone_clean_number($number) {
  // Remove none numeric characters
  $number = preg_replace('/[^0-9]/', '', $number);

  return $number;
}

/**
 * Generic validation for Phone Number.
 *
 * @param string $countrycode
 * @param string $number
 * @return boolean Returns boolean FALSE if the phone number is not valid.
 */
function cck_phone_validate_number($countrycode, $number, $ext = '') {
  // We don't want to worry about separators
  $number = cck_phone_clean_number($number);
  if ($number !== '' && drupal_strlen($number) > CCK_PHONE_PHONE_MAX_LENGTH) {
    return FALSE;
  }

  $ext = cck_phone_clean_number($ext);
  if ($ext !== '' && drupal_strlen($ext) > CCK_PHONE_EXTENSION_MAX_LENGTH) {
    return FALSE;
  }

  return TRUE;
}
