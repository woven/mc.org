<?php
/**
 * @file
 * Code for the MC News Feed feature.
 */

include_once 'mc_news_feed.features.inc';

function mc_news_feed_late_form_alter(&$form, &$form_state, $form_id){
  global $user;
  if(!is_ct_form($form,"news_feed")){
    return;
  }

  if($submit = &$form['buttons']['submit']){
    unset($form['#redirect']);
    $submit['#submit'][] = '_mc_news_feed_submit';
  }

  $form['title']['#access'] = false;
}

function _mc_news_feed_submit($form, &$form_state){
  if(!empty($form_state['values']['og_groups'])){
    $gid = array_shift(array_values($form_state['values']['og_groups']));

    if($gid){
      $form_state['redirect'] = "node/$gid/news";
    }else{
      $form_state['redirect'] = "news";
    }
  }
}

function remote_file_size($url){
  $head = "";
  $url_p = parse_url($url);
  $host = $url_p["host"];
  if(!preg_match("/[0-9]*\.[0-9]*\.[0-9]*\.[0-9]*/",$host)){
    // a domain name was given, not an IP
    $ip=gethostbyname($host);
    if(!preg_match("/[0-9]*\.[0-9]*\.[0-9]*\.[0-9]*/",$ip)){
      //domain could not be resolved
      return -1;
    }
  }
  $port = intval($url_p["port"]);
  if(!$port) $port=80;
  $path = $url_p["path"];
  //echo "Getting " . $host . ":" . $port . $path . " ...";

  $fp = fsockopen($host, $port, $errno, $errstr, 20);
  if(!$fp) {
    return false;
  } else {
    fputs($fp, "HEAD "  . $url  . " HTTP/1.1\r\n");
    fputs($fp, "HOST: " . $host . "\r\n");
    fputs($fp, "User-Agent: http://www.example.com/my_application\r\n");
    fputs($fp, "Connection: close\r\n\r\n");
    $headers = "";
    while (!feof($fp)) {
      $headers .= fgets ($fp, 128);
    }
  }
  fclose ($fp);
  //echo $errno .": " . $errstr . "";
  $return = -2;
  $arr_headers = explode("\n", $headers);
  // echo "HTTP headers for <a href='" . $url . "'>..." . substr($url,strlen($url)-20). "</a>:";
  // echo "<div class='http_headers'>";
  foreach($arr_headers as $header) {
    // if (trim($header)) echo trim($header) . "";
    $s1 = "HTTP/1.1";
    $s2 = "Content-Length: ";
    $s3 = "Location: ";
    if(substr(strtolower ($header), 0, strlen($s1)) == strtolower($s1)) $status = substr($header, strlen($s1));
    if(substr(strtolower ($header), 0, strlen($s2)) == strtolower($s2)) $size   = substr($header, strlen($s2));
    if(substr(strtolower ($header), 0, strlen($s3)) == strtolower($s3)) $newurl = substr($header, strlen($s3));
  }
  // echo "</div>";
  if(intval($size) > 0) {
    $return=intval($size);
  } else {
    $return=$status;
  }
  // echo intval($status) .": [" . $newurl . "]";
  if (intval($status)==302 && strlen($newurl) > 0) {
    // 302 redirect: get HTTP HEAD of new URL
    $return=remote_file_size($newurl);
  }
  return $return;
}

function mc_news_feed_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL){
    if($node->type == 'news_feed'){
      switch($op){
        case 'validate':
          if(isset($node->feeds['FeedsHTTPFetcher']['source']) && !empty($node->feeds['FeedsHTTPFetcher']['source'])){
            $node->title = "News feed from " . $node->feeds['FeedsHTTPFetcher']['source'];
          }
        break;
      }
    }
}

function mc_news_feed_feeds_parser_sources_alter(&$sources, $content_type) {
  $sources['feed_images'] = array(
    'name' => t('Images in element'),
    'description' => t('Images occurring in the enclosures & description field'),
    'callback' => '_elementfeed_images',
  );
}

//return unique enclosures
function enclosures_get_unique($enclosures){
  //find unique enslosures
  $unique_enclosures = array();
  foreach ($enclosures as $enclosure) {
    $url = strtolower($enclosure->getValue());
    if(!isset($unique_enclosures[$url])){
      $unique_enclosures[$url] = $enclosure;
    }
  }

  return $unique_enclosures;
}

//return only image enclosures based on the mime type OR extensions
function enclosures_get_imgs($enclosures){
  //store enclosures as unique values
  $img_enclosures = array();
  $img_exts = array('png','jpg','gif','jpeg');

  $enclosure = enclosures_get_unique($enclosures);

  //check if any of them has image as mime type or ext
  foreach($enclosures as $enclosure){
    $path = pathinfo($enclosure->getValue());
    $ext = strtolower($path['extension']);
    if(startsWith(strtolower($enclosure->getMIMEType()),"image") OR in_array($ext,$img_exts)){
      $img_enclosures[] = $enclosure;
    };
  }

  return $img_enclosures;
}

function image_enclosure_from_url($url){
  $path = pathinfo($url);
  $mime = !empty($path['extension']) ? "image/".$path['extension'] : "image";
  return new FeedsEnclosure($url, $mime);
}

function image_is_valid($url){
  $size = remote_file_size($url);
  // if image is 5kb or more, return true;
  if(($size / 1024) >= 5 ){
    return true;
  }
  return false;
}

function GetSizeTest(){
  $path = libraries_get_path('fastimage');
  require_once($path."/Fastimage.php");

  $files = array(
    'http://www.google.com.eg/images/srpr/logo3w.png',
    'http://pcdn.500px.net/8123858/7051e2440a869a3fec74406a3aa200618452c390/4.jpg',
    'http://farm3.staticflickr.com/2019/2354671896_8216677d61_o.jpg',
    'http://farm1.staticflickr.com/100/306618144_c2810214ee_b.jpg'
  );

  foreach($files as $file){
    $uri = $file;
    echo "=======> $uri <======\n";
    $time = microtime(true);
    $image = new FastImage($uri);
    echo ">FastImage: \n";
    $size = $image->getSize();
    dsm($size);
    list($width, $height) = $size;
    echo "Width: ". $width . "px Height: ". $height . "px in " . (microtime(true)-$time) . " seconds \n";

    $time = microtime(true);
    list($width, $height) = getimagesize($uri);
    echo ">Getimagesize: \n";
    echo "Width: ". $width . "px Height: ". $height . "px in " . (microtime(true)-$time) . " seconds \n";
  }
}

function get_image_dim($sURL) {
  // note that for jpeg you may need to change 300 to a larger value,
  // as some height/width info is farther out in the header
  try {
    $hSock = @ fopen($sURL, 'rb');
    if ($hSock) {
      while(!feof($hSock)) {
        $vData = fread($hSock, 10240);
        break;
      }
      fclose($hSock);
      if (strpos(' ' . $vData, 'JFIF')>0) {
        $vData = substr($vData, 0, 10240);
        $asResult = unpack('H*',$vData);
        $sBytes = $asResult[1];
        $width = 0;
        $height = 0;
        $hex_width = '';
        $hex_height = '';
        if (strstr($sBytes, 'ffc2')) {
          $hex_height = substr($sBytes, strpos($sBytes, 'ffc2') + 10, 4);
          $hex_width = substr($sBytes, strpos($sBytes, 'ffc2') + 14, 4);
        } else {
          $hex_height = substr($sBytes, strpos($sBytes, 'ffc0') + 10, 4);
          $hex_width = substr($sBytes, strpos($sBytes, 'ffc0') + 14, 4);
        }
        $width = hexdec($hex_width);
        $height = hexdec($hex_height);
        return array('width' => $width, 'height' => $height);
      } elseif (strpos(' ' . $vData, 'GIF')>0) {
        $vData = substr($vData, 0, 300);
        $asResult = unpack('h*',$vData);
        $sBytes = $asResult[1];
        $sBytesH = substr($sBytes, 16, 4);
        $height = hexdec(strrev($sBytesH));
        $sBytesW = substr($sBytes, 12, 4);
        $width = hexdec(strrev($sBytesW));
        return array('width' => $width, 'height' => $height);
      } elseif (strpos(' ' . $vData, 'PNG')>0) {
        $vDataH = substr($vData, 22, 4);
        $asResult = unpack('n',$vDataH);
        $height = $asResult[1];
        $vDataW = substr($vData, 18, 4);
        $asResult = unpack('n',$vDataW);
        $width = $asResult[1];
        return array('width' => $width, 'height' => $height);
      }
    }
  } catch (Exception $e) {}
  return FALSE;
}


//return image enclosures from based on
function enclosures_html_img($html,$url = ''){
  $enclosures = array();

  if(!empty($html)){
    foreach(htmlqp($html,'img')->get() as $img){
      $src = qp($img)->attr("src");
      if(!empty($src)){
        if(image_is_valid($src)){
          $enclosures[] = image_enclosure_from_url($src);
        }
      }
    }
  }

  //no images were found at the body of the image
  if(!empty($url) && empty($enclosures)){
    //check the actual page for images
    $qb = htmlqp($url);

    //check if image
    $ogimage = $qb->find("meta[property='og:image']")->attr("content");
    if(!empty($ogimage)){
      if(image_is_valid($src)){
        $enclosures[] = image_enclosure_from_url($ogimage);
      }
    }
  }

  return enclosures_get_unique($enclosures);
}

function _elementfeed_images(FeedsImportBatch $batch, $key) {
  $item = $batch->currentItem();
  $enclosures = $item['enclosures'];
  $desc = $item['description'];
  $enclosures = enclosures_get_imgs($enclosures);

  //if empty enclosures, no images found, find more images through other ways
  if(empty($enclosures)){
    $enclosures = enclosures_html_img($desc,$item['url']);
  }
  
  return array(array_shift($enclosures));
}


function mc_news_feed_feeds_node_processor_targets_alter(&$targets, $content_type) {
  $targets['enclosure_images'] = array(
    'name' => t('Enclosed Images'),
    'description' => t('Import images to MC images field'),
    'callback' => '_mc_filefield_feeds_set_target',
    'real_target' => 'field_list_image'
  );
}

function _mc_filefield_feeds_set_target($node, $field_name, $value) {
  $field_name = "field_list_image";
  // Normalize $value, create an array of FeedsEnclosures of it.
  $enclosures = array();
  if (!is_array($value)) {
    $value = array($value);
  }
  foreach ($value as $k => $v) {
    if ($v instanceof FeedsEnclosure) {
      $enclosures[] = $v;
    }
    elseif (valid_url($v)) {
      $enclosures[$k] = new FeedsEnclosure($v, 'application/octet-stream');
    }
  }

  // Map enclosures.
  $items = isset($node->$field_name) ? $node->$field_name : array();

  //dsm($enclosures);

  //store enlosures as unique values
  $unique_enclosures = array();
  foreach ($enclosures as $enclosure) {
    if(!isset($unique_enclosures[$enclosure->getValue()])){
      $unique_enclosures[$enclosure->getValue()] = $enclosure;
    }
  }

  foreach ($unique_enclosures as $enclosure) {
    if ($file = $enclosure->getFile()) {
      $field = content_fields($field_name, $node->type);
      $target_dir = filefield_widget_file_path($field, user_load($node->uid));
      $info = field_file_save_file($enclosure->getFile(), array(), $target_dir);
      if ($info) {
        $info['list'] = array();
        $info['data'] = array('description' => '');
        if ($field['list_field']) {
          $info['list'] = $field['list_default'];
        }
        $items[] = $info;
        $error = FALSE;
      }
    }
  }
  $node->$field_name = $items;
}