<?php
/**
 * @file
 * Code for the MiamiTech Event Feed feature.
 */

include_once 'mc_event_feed.features.inc';

function mc_event_feed_late_form_alter(&$form, &$form_state, $form_id){
  global $user;
  if(!is_ct_form($form,"event_feed")){
    return;
  }

  if($user->uid > 1){
    $form['title']['#access'] = false;
  }

  if($submit = &$form['buttons']['submit']){
    unset($form['#redirect']);
    $submit['#submit'][] = '_mc_event_feed_form_submit';
  }

}

function _mc_event_feed_form_submit($form, &$form_state){
  if(!empty($form_state['values']['og_groups'])){
    $gid = array_shift(array_values($form_state['values']['og_groups']));

    if($gid){
      /*
       * @todo improve this logic of hiding messages
       * @see mc_event_feed_init
      */
      $_SESSION['new_event_feed'] = TRUE;
      $form_state['redirect'] = 'node/'.$gid;
    }else{
      // @todo what to do if it's site wide event_feed?
    }
  }

}

function mc_event_feed_form_alter(&$form, &$form_state, $form_id){
  if($form_id == 'event_feed_node_form'){
    $form['#validate'][] = '_mc_event_feed_node_form_validate';
  }
}

function _mc_event_feed_node_form_validate($form, &$form_state) {
  //current event_node node
  $node = $form['#node'];

  //current feedapi settings from the form submit
  $feedapi = &$form_state['values']['feedapi'];

  /*
  * replace webcal with http on if webcal exists
  */
  if(preg_match('/^webcal:\/\//i',$form_state['values']['feedapi']['feedapi_url']) ){
    $form_state['values']['feedapi']['feedapi_url'] = str_replace('webcal://', 'http://', $form_state['values']['feedapi']['feedapi_url']);
  }

  /*
   * change refresh time to never if the upload method is file
  */
  if($form_state['values']['feedapi']['upload_method'] == 'upload'){
    $form_state['values']['feedapi']['refresh_time'] = FEEDAPI_CRON_NEVER_REFRESH;
  }

  /*
  * auto set the title of the event_feed 'Feed from LOCATION'
  */
  if (empty($form_state['values']['title'])) {
    switch($feedapi['upload_method']){
      case 'upload':
        //@todo find away to grap the filename
        form_set_value($form['title'], 'Feed from file', $form_state);
      break;
      case 'url':
        $new_title = 'Feed from ' . str_replace('http://', '', $form_state['values']['feedapi']['feedapi_url']);
        form_set_value($form['title'], $new_title, $form_state);
      break;
    }
  }
}


function mc_event_feed_menu(){
  $items = array();
  $event_path = drupal_get_path('module', 'event');
  $items['node/%node/gical'] = array(
    'title' => 'Group iCal feed',
    'page callback' => 'mc_event_feed_ical',
    'page arguments' => array(1),
    'access callback' => 'user_access',
    'access arguments' => array('access content')
  );
  $items['events/ical'] = array(
    'title' => 'MiamiTech.org Events',
    'page callback' => '_mc_event_feed_ical_sitewide',
    'access callback' => 'user_access',
    'access arguments' => array('access content')
  );

  $items['user/%user/myevents/ical'] = array(
    'title' => 'MiamiTech.org User Events',
    'page callback' => '_mc_event_feed_ical_user',
    'page arguments' => array(1),
    'access callback' => 'user_access',
    'access arguments' => array('access content'),
  );

  return $items;
}

function mc_event_feed_menu_alter(&$items){
  $items['node/%/ical']['page callback'] = 'mc_event_feed_event_node_ical';
}

function _ical_feed_generate($title,$filename,$sql_result){
  module_load_include("inc","event","ical");

  $events = array();
  $result = $sql_result;

  while ($row = db_fetch_object($result)) {
    $node = node_load($row->nid);
    if($node->type=='event' && $node->status){
      $event = _event_node_ical($node);
      $location_node = node_load($node->field_place['0']['nid']);
      $location = $location_node->locations['0'];
      $event['location'] = _mc_api_format_location($location);
      $event['location'] = str_replace(array("\r", "\r\n", "\n"), '', $event['location']);
      $event['uid'] = url("node/$node->nid", array('absolute' => TRUE, 'alias' => TRUE));
      $group_name = array_pop($node->og_groups_both);
      $event['summary'] = $event['summary'] . ' | ' . str_replace(array("\r", "\r\n", "\n"),'',$group_name);
      $event['description'] = 'More info: ' . $event['url'];
      $events[] = $event;
    }
  }

  drupal_set_header('Content-Type: text/calendar; charset=utf-8');
  drupal_set_header('Content-Disposition: attachment; filename="'.$filename.'"; ');
  //print str_replace('\:',':',ical_export($events, $title));
  print ical_export($events, $title);
}

function _mc_event_feed_ical_sitewide(){
  $today = mktime(0, 0, 0);
  $threeMonthsAgo = $today - (3 * 30)*(24 * 3600);
  $result = db_query("select nid from event where unix_event_start>=%d",$threeMonthsAgo );
  _ical_feed_generate("All upcoming events",'calendar.ics',$result);
}

function mc_event_feed_event_node_ical() {
  $node = node_load(arg(1));
  $event = _event_node_ical($node);
  $location_node = node_load($node->field_place['0']['nid']);
  $location = $location_node->locations['0'];
  $event['location'] = _mc_api_format_location($location);
  $event['location'] = str_replace(array("\r", "\r\n", "\n"), '', $event['location']);
  $event['uid'] = url("node/$node->nid", array('absolute' => TRUE, 'alias' => TRUE));
  drupal_set_header('Content-Type: text/calendar; charset=utf-8');
  drupal_set_header('Content-Disposition: attachment; filename="calendar.ics"; ');
  print ical_export(array($event), $event['summary']);
}

function mc_event_feed_ical($node) {
  module_load_include("inc","event","ical");


  $group = $node;
  $gid = $node->nid;

  if($group->type!='group'){
    return;
  }

  $today = mktime(0, 0, 0);
  $threeMonthsAgo = $today - (3 * 30)*(24 * 3600);
  $nids = og_group_child_nids($gid);
  $events = array();
  foreach ($nids as $nid) {
    $node = node_load($nid);
    date_default_timezone_set('UTC');
    $event_start_unixtime = strtotime($node->event['start_utc']);
    if($node->type=='event' && $event_start_unixtime>=$threeMonthsAgo){
      $event = _event_node_ical($node);
      $location_node = node_load($node->field_place['0']['nid']);
      $location = $location_node->locations['0'];
      $event['location'] = _mc_api_format_location($location);
      $event['location'] = str_replace(array("\r", "\r\n", "\n"), '', $event['location']);
      $event['uid'] = url("node/$node->nid", array('absolute' => TRUE, 'alias' => TRUE));
      $events[] = $event;
    }
  }

  drupal_set_header('Content-Type: text/calendar; charset=utf-8');
  drupal_set_header('Content-Disposition: attachment; filename="calendar.ics"; ');
  print ical_export($events, $group->title);
}


function mt_event_feed_feedapi_mapper($op, $node, $feed_element = array(), $field_name = '', $sub_field = '') {
  return mc_event_feed_feedapi_mapper($op, $node, $feed_element, $field_name, $sub_field);
}

function mc_event_feed_feedapi_mapper($op, $node, $feed_element = array(), $field_name = '', $sub_field = '') {
  if ($op == 'describe') {
    return t('Maps a string or an array of strings to myfields.');
  }
  else if ($op == 'list') {
    $myfields = array('event' => array(
      'start' => 'start',
      'end' => 'end',
      'timezone' => 'timezone',
      'location' => 'location',
      'geo' => 'geo',
    ));
    return $myfields;
  }
  else if ($op == 'map') {
      $choice = &$node->field_place_choice[0]['value'];
      if ($field_name == 'event') {
        $group = node_load($node->feedapi->feed_nid);
        $node->og_groups = $group->og_groups;
        $node->og_groups_both = $group->og_groups_both;
        if (is_string($feed_element)) {
          if($sub_field=='start' || $sub_field=='end'){
            $node->event[$sub_field] = $feed_element;
            if($sub_field=='start'){
              $node->event['has_time'] = '1';
            }
            if($sub_field=='end'){
              $node->event['has_end_date'] = '1';
            }
            $node->event[$sub_field . '_exploded']['year'] = date('Y', strtotime($feed_element));
            $node->event[$sub_field . '_exploded']['month'] = date('m', strtotime($feed_element));
            $node->event[$sub_field . '_exploded']['day'] = date('d', strtotime($feed_element));
            $node->event[$sub_field . '_exploded']['hour'] = date('G', strtotime($feed_element));
            $node->event[$sub_field . '_exploded']['minute'] = date('i', strtotime($feed_element));
            $node->event[$sub_field . '_exploded']['second'] = date('s', strtotime($feed_element));
            if(date('G', strtotime($feed_element))=='12'){
              $node->event[$sub_field . '_exploded']['ampm'] = 'pm';
            }
          }
          if($sub_field=='timezone'){
            if($feed_element=='UTC'){
              $feed_element = 'Etc/GMT';
            }
            $timezone = event_zone_by_name(str_replace('_', ' ',$feed_element));
            $node->event['dst_region'] = $timezone['dst_region'];;
            $node->event['offset'] = $timezone['offset'];
            $node->event['offset_dst'] = $timezone['offset_dst'];
            $node->event['timezone'] = $timezone['timezone'];
          }
          if($sub_field=='location'){
            $parts = _mc_location_api_getAddressParts($feed_element);

            if($parts['name']=='webinar'){
              //it's webinar, or an online event
              $node->field_online_event['0']['value'] = 1;
              $node->locations = array(0 => array());
            }
            //it's not webinar, continue with the rest of logic
            else {
                //create new location, and set choice to new
                $choice = 'new';
                $node->locations[0] = array(
                    'name' => $parts['name'],
                    'street' => $parts['address'],
                    'city' => $parts['city'],
                    'province' => $parts['state'],
                    'postal_code' => $parts['zip']
                );
            }
          }
          if($sub_field=='geo'){
              $parts = explode(';', $feed_element); //parts explode
              if(!is_array($node->locations[0])){
                $node->locations[0] = array();
              };

              $node->locations[0] += array(
                  'latitude' => $parts['0'],
                  'longitude' => $parts['1'],
                  'lockpick' => array(
                      'user_latitude' => $parts['0'],
                      'user_longitude' => $parts['1']
                  )
              );
          }
        }

      //return the modified node.
      return $node;
    }
  }
}

function _mc_event_feed_find_similar_place($name, $address){
  $name = trim($name);
  $address = trim($address);
  $nid = db_result(db_query("SELECT li.nid FROM location l JOIN location_instance li ON l.lid=li.lid JOIN node n ON li.nid=n.nid WHERE SOUNDEX(name)=SOUNDEX('%s') AND SOUNDEX(street)=SOUNDEX('%s') AND n.type<>'event' LIMIT 1", $name, $address));
  return $nid;
}

function mc_event_feed_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL){
    /**
     * if it's event_feed
     */
    if($node->type == 'event_feed'){
        switch($op){
            case 'validate':
                if(!isset($node->nid) || empty($node->nid)){
                    //check if it it has feedapi url and if upload method is url
                    if(isset($node->feedapi['feedapi_url']) && !empty($node->feedapi['feedapi_url']) && $node->feedapi['upload_method'] == "url"){

                        $feed_url = $node->feedapi['feedapi_url'];
                        _mc_event_feed_check_group_url_exists($feed_url);

                        $result = db_query("select nid from feedapi where url='%s'", $node->feedapi['feedapi_url']);
                        while ($row = db_fetch_object($result)) {
                            $other_node = node_load($row->nid);
                            if(isset($other_node->og_groups)){
                                $gid = current($node->og_groups);
                                $other_gid = current($other_node->og_groups);
                                if($gid==$other_gid){
                                    form_set_error('', t("Woops, we're already importing that very feed.  Try a different one?"));
                                }
                            }
                        }
                    }
                }
            break;
            case 'insert':
                $mapping = 'a:5:{s:91:"a:5:{i:0;s:7:"options";i:1;s:6:"VEVENT";i:2;s:4:"DATE";i:3;s:5:"DTEND";i:4;s:8:"datetime";}";s:61:"a:3:{i:0;s:13:"mc_event_feed";i:1;s:5:"event";i:2;s:3:"end";}";s:93:"a:5:{i:0;s:7:"options";i:1;s:6:"VEVENT";i:2;s:4:"DATE";i:3;s:7:"DTSTART";i:4;s:8:"datetime";}";s:63:"a:3:{i:0;s:13:"mc_event_feed";i:1;s:5:"event";i:2;s:5:"start";}";s:87:"a:5:{i:0;s:7:"options";i:1;s:6:"VEVENT";i:2;s:4:"DATE";i:3;s:7:"DTSTART";i:4;s:2:"tz";}";s:66:"a:3:{i:0;s:13:"mc_event_feed";i:1;s:5:"event";i:2;s:8:"timezone";}";s:60:"a:3:{i:0;s:7:"options";i:1;s:6:"VEVENT";i:2;s:8:"LOCATION";}";s:66:"a:3:{i:0;s:13:"mc_event_feed";i:1;s:5:"event";i:2;s:8:"location";}";s:55:"a:3:{i:0;s:7:"options";i:1;s:6:"VEVENT";i:2;s:3:"GEO";}";s:61:"a:3:{i:0;s:13:"mc_event_feed";i:1;s:5:"event";i:2;s:3:"geo";}";}';
                $record = new stdClass();
                $record->nid = $node->nid;
                $record->mapping = $mapping;
                drupal_write_record('feedapi_mapper', $record);
            break;
        }
    }

    /**
     * if it's event being added by event_feed/feedapi
     */
   if($node->type == "event"){
       switch($op){
           case 'presave':
               //if the event was added through feedapi, add default timezone
               if(isset($node->feedapi_node->feed_nids) && isset($node->feedapi->feed_nid)){
                   $node->og_public = TRUE;
                   if((empty($node->event['dst_region']) || $node->event['dst_region']==NULL) && (empty($node->event['timezone']) || $node->event['timezone']==NULL)){
                       $timezone = event_zone_by_name(str_replace('_', ' ', 'America/New_York'));
                       $node->event['dst_region'] = $timezone['dst_region'];;
                       $node->event['offset'] = $timezone['offset'];
                       $node->event['offset_dst'] = $timezone['offset_dst'];
                       $node->event['timezone'] = $timezone['timezone'];
                   }
               }
               break;
       }
   }
}

function mc_event_feed_init(){
  /*
   *  hide messages, on event feed import
   *  @see _mc_event_feed_form_submit
   */
  if(isset($_SESSION['new_event_feed']) && $_SESSION['new_event_feed']==TRUE){
    foreach ($_SESSION['messages']['status'] as $key => $value) {
      if(!preg_match("/^You're done!/", $value)){
        unset($_SESSION['messages']['status'][$key]);
      }
    }
    $message = array_shift($_SESSION['messages']['status']);
    unset($_SESSION['messages']['status']);
    $_SESSION['messages']['status'][] = $message;
    unset($_SESSION['new_event_feed']);
  }
}

function _mc_event_feed_check_group_url_exists($group_url){
  if(preg_match('/(meetup\.com|facebook\.com)/i', $group_url)){
    $group_url = preg_replace('/^(http|webcal):\/{2}w{3}\.|^http:\/{2}|^w{3}\./i', '',$group_url);
    $replace_string = preg_replace('/\w+\.\w{2,3}\/[a-z-]+(\/|)/i', '', $group_url);
    $group_url = str_replace($replace_string, '', $group_url);
    $group_url = preg_replace('/\/$/i', '', $group_url);
    $group_result = db_result(db_query('SELECT count(*) FROM content_type_group WHERE field_group_url_url IS NOT NULL AND field_group_url_url LIKE \'%' . $group_url .  '%\''));
    $feed_result = db_result(db_query('SELECT count(*) FROM feedapi WHERE url IS NOT NULL AND url LIKE \'%' . $group_url .  '%\''));
    $result = $group_result + $feed_result;
    if($result){
      if($group_result){
        $nid = db_result(db_query('SELECT nid FROM content_type_group WHERE field_group_url_url IS NOT NULL AND field_group_url_url LIKE \'%' . $group_url .  '%\''));
        $link = '<a href="/node/' . $nid . '">find it here</a>';
        form_set_error('', 'Hmm, seems like we already know about this group. You can ' . $link  . ' or try another.');
      }
      elseif ($feed_result) {
        $nid = db_result(db_query('SELECT nid FROM feedapi WHERE url IS NOT NULL AND url LIKE \'%' . $group_url .  '%\''));
        $link = '<a href="/node/' . $nid . '">find it here</a>';
        form_set_error('', 'Hmm, seems like we already know about this feed. You can ' . $link  . ' or try another.');
      }
    }
  }
  else{
    $group_url = preg_replace('/^(http|webcal):\/{2}w{3}\.|^http:\/{2}|^w{3}\./i', '',$group_url);
    $group_url = str_replace('/', '', $group_url);
    $sql = 'SELECT count(*) FROM content_type_group WHERE field_group_url_url IS NOT NULL AND field_group_url_url LIKE \'%%%' . $group_url .  '%\'';
    $group_result = db_result(db_query($sql));
    $feed_result = db_result(db_query('SELECT count(*) FROM feedapi WHERE url IS NOT NULL AND url LIKE \'%' . $group_url .  '%\''));
    $result = $group_result + $feed_result;
    if($result){
      if($group_result){
        $nid = db_result(db_query('SELECT nid FROM content_type_group WHERE field_group_url_url IS NOT NULL AND field_group_url_url LIKE \'%%%' . $group_url .  '%\''));
        $link = '<a href="/node/' . $nid . '">find it here</a>';
        form_set_error('', 'Hmm, seems like we already know about this group. You can ' . $link  . ' or try another.');
      }
      elseif ($feed_result) {
        $nid = db_result(db_query('SELECT nid FROM feedapi WHERE url IS NOT NULL AND url LIKE \'%' . $group_url .  '%\''));
        $link = '<a href="/node/' . $nid . '">find it here</a>';
        form_set_error('', 'Hmm, seems like we already know about this feed. You can ' . $link  . ' or try another.');
      }
    }
  }
}