<?php

include_once('ft_event.features.inc');


function _mc_user_myevents(){
  global $user; $cuid = arg(1);

  if(!($user->uid == $cuid & $user->uid > 0)){
    return;
  }

  print '<div class="two-cols"><div class="col-main">';

    /*
    if(function_exists('_mc_event_section_all')){
      print  _mc_event_section_all('events_bookmarks');
    }
    */
 print views_embed_view("mc_events_sections","block_1");

  print '</div>';

  $webcal_url = webcal_url("user/$user->uid/myevents/ical",array("absolute"=>true));
  $url = url("user/$user->uid/myevents/ical",array("absolute"=>true));

  $link = '<div class="user_addcal">
                <ul>
                  <li><span class="ical-ico">Image</span><a href="'.$webcal_url.'" class="ical-link">Subscribe to my events (iCal)</a></li>
                  <li><span class="ical-ico">Image</span><a href="'.$url.'" class="ical-link">Download my events (iCal)</a></li>
                </ul>
          </div>';

  $addtocalender = '<div class="block block-ds">
    	<div class="block-title">Add to calendar</div>
        <div class="block-content clear-block">
            '.$link.'
        </div>';
  print  '<div class="col-right">'.$link.'</div>';

  print '</div>';
}

function is_valid_place_choice($val){
  return in_array($val,array('new','nr'));
}

function ft_event_latenodeapi(&$node, $op, $a3 = NULL, $a4 = NULL){
  if($node->type != "event"){
    return;
  }

  $isonline = $node->field_online_event[0]['value'];
  $choice = &$node->field_place_choice[0]['value'];

  switch($op){
    case 'load_alter':
      $isonline = &$node->field_online_event[0]['value'];
      $choice = &$node->field_place_choice[0]['value'];

      //if online. just return an empty arrays
      if($isonline){
        $node->locations = array(0=>array());
        $node->location = array();
      }

      //in case place choice is not set (like in case existing events at mt.org), give it some smart logic
      if(!is_valid_place_choice($choice)){
        if($node->field_place['0']['nid'] > 0){
          $choice = 'nr';
          $node->locations = array('0' => array());
          $node->location = array();
        }elseif($node->locations[0]['lid'] > 0){
          $choice = 'new';
        }
      }

      //if choice is nr and there is node id exists, then load locations of the place node
      if($node->field_place[0]['nid'] > 0 && $choice == "nr"){
        $place_node = node_load($node->field_place[0]['nid']);
        $node->locations = location_load_locations($place_node->vid);
        $node->location = count($node->locations) ? $node->locations[0] : array();
      }

     if(!empty($node->locations[0]) && isset($node->locations[0]['longitude']) && isset($node->locations[0]['latitude'])){
         $node->locations[0]['locpick'] = array(
             'user_latitude' => $node->locations[0]['latitude'],
             'user_longitude' => $node->locations[0]['longitude']
         );
     }

    break;
    case 'prepare': //node about to be shown to the node add/edit forms
      if($choice == 'nr'){
        //remove local event node locations, so we don't confuse user
        $node->locations = array(0=>array());
        $node->location = array();
      }

      //if is_online, remove all locations values, and it should not be selected anyway
      if($isonline){
        $node->locations = array('0' => array());
        $node->location = array();
        $node->field_place['0']['nid'] = null;
      }

      break;
    case 'presave':

      if($isonline){
        $node->locations = array('0' => array());
        $node->location = array();
        $node->field_place['0']['nid'] = null;
      }else{
        switch($choice){
          case 'nr':
            //node reference is selected, delete locations if exists
            $node->locations = array('0' => array());
            break;
          case 'new':
            //empty the node reference field node reference node
            $location = $node->locations[0];

            //trim values
            foreach($location as &$val){
              if(!array($val)){
                $val = trim($val);
              }
            }

            if(!empty($location['name']) && !empty($location['street']) ){ //if location has a title & street address

              //create a new place node/or find semilar and reference it, and change the choice to nr
              $place = _place_new_from_location($location);
              if($place->nid){
                //change the choice to nr instead of new
                $choice = 'nr';
                //set the new nid for place as referenced node
                $node->field_place['0']['nid'] = $place->nid;
                //empty locations
                $node->locations = array('0' => array());
              }
            }else{
                //if only coordinates exist at the location
                //check if location exists and all important fields are empty
                if(isset($node->locations['0']) && is_array($node->locations['0']) && (empty($node->locations['0']['street']) && empty($node->locations['0']['city'])  && empty($node->locations['0']['province']))){
                    $node_location = $node->locations['0'];
                    if((!empty($node_location['latitude']) && !empty($node_location['longitude'])) OR (!empty($node_location['locpick']) && !empty($node_location['locpick']['user_latitude']) && !empty($node_location['locpick']['user_longitude']))){
                        $lat = $node_location['latitude'] ? $node_location['latitude']  : $node_location['locpick']['user_latitude'];
                        $log = $node_location['longitude'] ? $node_location['longitude'] : $node_location['locpick']['user_longitude'];
                        $new_location = coordinates_to_location($lat, $log);
                        if(!empty($new_location)){
                            $node->locations['0'] = $new_location;
                        }
                    }
                }

              //empty the place nid and leave locations/choice as its
              $node->field_place['0']['nid'] = null;
            }
            break;
        }
      }
    break;
  }
}

function _mc_event_feed_ical_user($user){
  $uid = $user->uid;
  $today = mktime(0, 0, 0);
  $threeMonthsAgo = $today - (3 * 30)*(24 * 3600);
  $sql = "SELECT DISTINCT
      n.nid
      FROM
      node AS n
      INNER JOIN flag_content AS f ON n.nid = f.content_id AND f.fid = %d AND f.uid = %d AND f.content_type = 'node'
      INNER JOIN `event` AS e ON e.nid = n.nid
      WHERE
      n.type = 'event' AND e.unix_event_start >= %d
      ORDER BY
      e.event_start ASC
  ";

  //get the default flag to use for events
  $flag = flag_get_flag('events_bookmarks');

  //if flag is loaded and you can find fid, go on and output the feed
  if($flag){
    $result = db_query($sql,$flag->fid,$uid,$threeMonthsAgo);
    _ical_feed_generate("User Calender","calender-user-$uid.ics",$result);
  }
}


function ft_event_preprocess($vars,$hook){
  if($hook == 'block'){
    $cblock = $vars['block'];
    if($cblock->module == 'ds' && $cblock->bid == 'ds-0b596e3199de270de74a2f6e8f0d1525'){
      $cblock->subject = t("Where it's at");
    }
    if($cblock->module == 'ds' && $cblock->bid == 'ds-5c755d31699c072160e29da9599e28f3'){
      $cblock->subject = t("Add to calendar");
    }
  }

}

function ft_event_theme() {
  $theme_functions = array(
    'myevents_flag_link' => array(
      'arguments' => array('field' => NULL),
    ),
    'mc_event_view_header' => array('variables' => array('view' => NULL)),
    'mc_event_header' => array('title' => null,'count' => null,'url' => null),
    'mc_event_date' => array('variables' => array('unix_date_start' => NULL, 'unix_date_end' => NULL, 'has_end_date' => NULL, 'has_time' => NULL, 'hide_day' => NULL))
  );
  return $theme_functions;
}

function theme_myevents_flag_link($field){
  $node = $field['object'];
  global $user;

  if($user->uid){
    return flag_create_link('events_bookmarks', $node->nid);
  }else{
    return '<span class="flag-events-bookmarks unknown" ><a href="#" class="flag-action">Save to my events</a></span>';
  }
}

function ft_event_ds_fields($type_name, $build_mode, $extra) {
  $fields = array(
    'mt_add_ical' => array(
      'title' => t('Add to Calendar'),
      'exclude' => array(
        'group' => 'group',
        'link' => 'link',
        'webform' => 'webform',
        'article' => 0,
        'audio' => 0,
        'event' => 0,
        'feeds' => 0,
        'file' => 0,
        'nnews' => 0,
        'npage' => 0,
        'place' => 0,
        'video' => 0,
        'gallery' => 0,
        'gallery_image' => 0,
        'forum' => 0,
        'taxonomy_feature' => 0,
      ),
      'type' => DS_FIELD_TYPE_CODE,
      'status' => DS_FIELD_STATUS_CUSTOM,
      'properties' => array(
        'css-class' => 'field-ical',
        'formatters' => array(
          'ds_eval_code' => 'Default',
        ),
        'code' => '<?php
          print mt_add_ical($object);
        ?>',
        'token' => 0,
      ),
    ),
    'mt_add_group_ical' => array(
      'title' => t('Add Group to Calendar iCal'),
      'exclude' => array(
        'group' => 'group',
        'link' => 'link',
        'webform' => 'webform',
        'article' => 0,
        'audio' => 0,
        'event' => 0,
        'feeds' => 0,
        'file' => 0,
        'nnews' => 0,
        'npage' => 0,
        'place' => 0,
        'video' => 0,
        'gallery' => 0,
        'gallery_image' => 0,
        'forum' => 0,
        'taxonomy_feature' => 0,
      ),
      'type' => DS_FIELD_TYPE_CODE,
      'status' => DS_FIELD_STATUS_CUSTOM,
      'properties' => array(
        'css-class' => 'field-group-ical',
        'formatters' => array(
          'ds_eval_code' => 'Default',
        ),
        'code' => '<?php
          print mt_add_group_ical($object);
        ?>',
        'token' => 0,
      ),
    ),
    'mt_add_myevents' => array(
      'title' => t('Add To My events'),
      'exclude' => array(
        'group' => 0,
        'link' => 0,
        'webform' => 0,
        'article' => 0,
        'audio' => 0,
        'event' => 0,
        'feeds' => 0,
        'file' => 0,
        'nnews' => 0,
        'npage' => 0,
        'place' => 0,
        'video' => 0,
        'gallery' => 0,
        'gallery_image' => 0,
        'forum' => 0,
        'taxonomy_feature' => 0,
      ),
      'type' => DS_FIELD_TYPE_THEME,
      'status' => DS_FIELD_STATUS_DEFAULT,
      'properties' => array(
        'css-class' => 'field-add-myevents',
        'formatters' => array(
          'myevents_flag_link' => t('Default'),
        ),
        'token' => 0,
      ),
    ),
    'mt_add_group_rss' => array(
      'title' => t('Add Group to Calendar RSS'),
      'exclude' => array(
        'group' => 'group',
        'link' => 'link',
        'webform' => 'webform',
        'article' => 0,
        'audio' => 0,
        'event' => 0,
        'feeds' => 0,
        'file' => 0,
        'nnews' => 0,
        'npage' => 0,
        'place' => 0,
        'video' => 0,
        'gallery' => 0,
        'gallery_image' => 0,
        'forum' => 0,
        'taxonomy_feature' => 0,
      ),
      'type' => DS_FIELD_TYPE_CODE,
      'status' => DS_FIELD_STATUS_CUSTOM,
      'properties' => array(
        'css-class' => 'field-group-ical',
        'formatters' => array(
          'ds_eval_code' => 'Default',
        ),
        'code' => '<?php
          print mt_add_group_rss($object);
        ?>',
        'token' => 0,
      ),
    ),
    'mt_add_gcal' => array(
      'title' => t('Add to Google Calendar'),
      'exclude' => array(
        'group' => 'group',
        'link' => 'link',
        'webform' => 'webform',
        'article' => 0,
        'audio' => 0,
        'event' => 0,
        'feeds' => 0,
        'file' => 0,
        'nnews' => 0,
        'npage' => 0,
        'place' => 0,
        'video' => 0,
        'gallery' => 0,
        'gallery_image' => 0,
        'forum' => 0,
        'taxonomy_feature' => 0,
      ),
      'type' => DS_FIELD_TYPE_CODE,
      'status' => DS_FIELD_STATUS_CUSTOM,
      'properties' => array(
        'css-class' => 'field-gcal',
        'formatters' => array(
          'ds_eval_code' => 'Default',
        ),
        'code' => '<?php
          print mt_add_gcal($object);
        ?>',
        'token' => 0,
      ),
    ),
  );
  return array('nd' => $fields);
}

function mt_add_group_rss($node){
  foreach ($node->og_groups as $key => $value) {
    $gid=$key;
    break;
  }
  return '<span class="rss-group-ico"> </span><a class="ical-link" href="http://'. $_SERVER["SERVER_NAME"] .'/groups/' . $gid . '/rss">All events from this group (RSS)</a>';
}

function mt_add_group_ical($node){
  foreach ($node->og_groups as $key => $value) {
    $gid=$key;
    break;
  }
  return '<span class="ical-group-ico"> </span><a class="ical-link" href="webcal://'. $_SERVER["SERVER_NAME"] .'/node/' . $gid . '/gical">All events from this group (iCal)</a>';
}

function mt_add_ical($node){
  return '<span class="ical-ico">Image</span><a class="ical-link" href="webcal://'. $_SERVER["SERVER_NAME"] .'/node/' . $node->nid . '/ical">Just this event (iCal)</a>';
}

function mt_add_gcal($node){

  $place = node_load($node->field_place[0]['nid']);
  $title = $node->title;
  $description = strip_tags($node->content['body']['#value']);
  $location = _mc_api_format_location($place->location);
  $start_date = event_format_date($node->event['start_utc'], 'custom', "Ymd\THis\Z");
  $end_date = event_format_date($node->event['end_utc'], 'custom', "Ymd\THis\Z");

  $gical_url = url(
    "http://www.google.com/calendar/render",
    array(
      'query' => array(
        'action' => "TEMPLATE",
        'text' => html_entity_decode($title),
        'details' => html_entity_decode($description),
        'dates' => $start_date .'/' . $end_date,
        'location' => html_entity_decode($location)
      )
    )
  );
  return '<span class="gcal-ico">Image</span><a target="_blank" class="ical-link" href="'.$gical_url.'">Just this event (gCal)</a>';
}

/**
 * Implementation of hook_theme()
 *
 */

function ft_event_late_form_alter(&$form, &$form_state, $form_id){
  global $user;

  if(!is_ct_form($form,'event')){
    return;
  }

  //adding new event, set default values for event start/end
  if(arg(0) == "node" && arg(1) == "add" ){
        $ctime = &$form['event']['start_exploded']['#default_value'];
        if($ctime['minute'] > 30){
            $ctime['hour']++;
        }
        $ctime['minute'] = 0;
        $ctime['second'] = 0;

        $form['event']['end_exploded'] = $form['event']['start_exploded'];
  }

    //remove file field
    if($form['field_upload_file'] && $user->uid > 1){
        $form['field_upload_file']['#access'] = false;
    }

  //add some js and css required for the event add form
  drupal_add_js((drupal_get_path('module', 'ft_event') .'/js/mc_event.js'));
  drupal_add_css((drupal_get_path('module', 'ft_event') .'/css/mc_event.css'));

  if($form['locations']){
    //force place locations instead
    $form['group_place']['locations'] = $form['locations'];
    unset($form['locations']);

    $form_loc = &$form['group_place']['locations'];
    $form_loc[0]['#pre_render'] = array('_event_location_item_process');
    $form_loc['#weight'] = 40;

    if(isset($form['field_online_event'])){
      if(isset($form['#node'])){
        if($form['#node']->field_online_event[0]['value']){
          //$form['field_place']['0']['#prefix'] = '<div class="default-location-wrapper hidden">';
          $form['group_place']['#attributes']['style'] ="display: none;";
        }
      }
    }
  }
}

function _event_location_item_process($element){
  //unset($element['#title']);

  $element['#location_settings'] = variable_get('location_settings_node_place', array());
  //dsm($element);
  if($element['delete_location']){
    $element['delete_location']['#access'] = false;
  }
  return $element;
}

/**
 * Implementation of theme_mcc_event_header
 */

function theme_mc_event_view_header($view){
  // Important: Pager should be turned on, otherwise count will not work.
  $display = $view->current_display;
  $itemsDisplayed = $view->display[$display]->handler->options['items_per_page'];

  if (isset ($view->total_rows)){
    $count = $view->total_rows - $itemsDisplayed;
  }else{
    $count = count($view->result) - $itemsDisplayed;
  }
  $title = $view->display[$display]->display_title;
  return theme("mc_event_header",$title,$count, $view->see_all_link);
}

/**
 * Implementation of theme_mc_event_header
 */

function theme_mc_event_header($title,$count,$url){
    $output = '<div class="block more-head">';
    $output .= '<div class="block-title">';
    $output .= '<h3>'.$title.'</h3>';
    if($count > 0){
        $output .= l ("<span>+$count more</span><span class=\"ico-small ico-see-all\"></span>", $url,array('html' => TRUE));
    }
    $output .= '<span class="arrow"></span>';
    $output .= '</div></div>';
    
    return $output;
}


/**
 * Implementation of theme_mc_event_date()
 */
function theme_mc_event_date($unix_date_start = NULL, $unix_date_end = NULL, $has_end_date = NULL, $has_time = NULL, $hide_day = FALSE){
  $today = mktime(0, 0, 0);
  $yesterday = $today - 24 * 3600;
  $one_week_ago = $today - 7 * (24 * 3600);
  $output = '';
  $occurring = FALSE;
  
  if ($unix_date_start < time()){
    if ($unix_date_end < time()){
      $output .= t('Happened ');
    }else{
      // it's still ocuring today
      $occurring = TRUE;
      $output .= t('Happening now, ');
    }
  }
  
  $output .= '<span class="event-time">';
  if (!$hide_day){
    if ($occurring){
      //$output .= t('Today');
    }
    elseif ($unix_date_start < $yesterday &&  $unix_date_start > $one_week_ago) {
      $time_diff = time() - $unix_date_start;
      $output .= strip_tags(t('%time ago', array('%time' => format_interval($time_diff, 1))));
      $output .= ', ' . mc_api_format_day($unix_date_start);
    }
    else{
      $output .= mc_api_format_day($unix_date_start);
    }
  }
  
  // if it has a time, and it's not a past date
  if ($has_time){
    // if it has an end time, different than start time
    if ($has_end_date && (date('zHi', $unix_date_start) != date('zHi', $unix_date_end))){
      $time = mc_api_format_time($unix_date_start, $unix_date_end, $occurring);
    }else{
      $time = mc_api_format_time($unix_date_start, null, $occurring);
    }
    if (!$hide_day && !$occurring){
      $output .= ', ';
    } 
    $output .= $time;
  }
  else {
    if ($has_end_date){
      $time = mc_api_format_whole_day_event($unix_date_start, $unix_date_end, $occurring);
    }else{
      if($unix_date_start < $today){
        $time = mc_api_format_whole_day_event($unix_date_start, null, $occurring);
      }
      else {
        $time = '';
      }
    }
    $output .= $time;
  }

  $output .= '</span>';
  return $output;
}

function theme_mc_event_print_date($unix_date_start = NULL, $unix_date_end = NULL, $has_end_date = NULL, $has_time = NULL, $hide_day = FALSE){
  $output = '';

  $output .= '<span class="event-time">';
    
  $output .= mc_event_print_format_day($unix_date_start);
      
  // if it has a time, and it's not a past date
  if ($has_time && ($unix_date_start > time() || $occurring)){
    // if it has an end time, different than start time
    if ($has_end_date && (date('Hi', $unix_date_start) != date('Hi', $unix_date_end))){
      $time = mc_api_format_time($unix_date_start, $unix_date_end);
    }else{
      $time = mc_api_format_time($unix_date_start);
    }
    if (!$hide_day){
      $output .= ', ';
    } 
    $output .= $time;
  }

  $output .= '</span>';
  return $output;
}

function mc_event_print_format_day($unix_date){
  $output = "";
  if (date('Y') == date('Y', $unix_date)){ // same year
    $output .= date('l F jS', $unix_date);
  }else{ // different year
    $output .= date('l F jS, Y', $unix_date);
  }
  return $output;
}