<?php

include_once('ft_location.features.inc');

//include ft_location api methods (mostly google functions)
include_once('ft_location.api.inc');


function coordinates_to_location($lat,$long){
    $parts = _mc_location_api_reverse_getAddressParts($lat, $long);
    if(!empty($parts)){
        $location = array();
        $location['name'] = $parts['name'];
        $location['street'] = $parts['address'];
        $location['city'] = $parts['city'];
        $location['province'] = $parts['state'];
        $location['postal_code'] = $parts['zip'];
        $location['latitude'] = $lat;
        $location['longitude'] = $long;

        return $location;
    }
    return array();
}

function ft_location_ds_fields($type_name, $build_mode, $extra) {

    //since the event node has no location, we need to stimulate as if we are passing place ct instead
    if($type_name == "event"){
      return nd_location_ds_fields("place",$build_mode,$extra);
    }

    return array("nd"=>array());
}

function ft_location_ds_fields_alter(&$fields) {
  if($fields['nd_directions']){
    $fields['nd_directions']['properties']['formatters']['mc_nd_location_directions'] = t('MC: Direction link');
  }

  if($fields['nd_location_gmap']){
    $fields['nd_location_gmap']['properties']['formatters']['mc_location_gmap_default'] = t('MC: Gmap with bubble link');
  }

  if($fields['nd_location_address']){
    $fields['nd_location_address']['properties']['formatters']['mc_nd_location_address'] = t('MC: Address, includes name');
  }
}

function ft_location_theme() {

  $theme_functions = array(
    'mc_location_gmap_default' => array(
      'arguments' => array('field' => NULL),
    ),
    'mc_nd_location_directions' => array(
      'arguments' => array('field' => NULL),
    ),
    'mc_nd_location_address' => array(
      'arguments' => array('field' => NULL),
    ),
  );

  return $theme_functions;
}


function theme_mc_nd_location_directions($field) {
  $node = $field['object'];

  if(empty($node->location['street'])){
    return;
  }
  $destination = array();
  $fields = array('street', 'city', 'province_name', 'postal_code');
  foreach ($fields as $key) {
    if (!empty($node->location[$key])) {
      $destination[] = check_plain($node->location[$key]);
    }
  }
  if (!empty($destination)) {
     $gurl = url(
       'http://maps.google.com',
       array(
         'query' => array(
           'daddr' => implode($destination, ' ')
         ),
         'external' => true
       )
     );
    $link ='<a href="'.url($gurl).'" target="_blank">'. t('Get Directions') .'</a>';
    return $link;
  }
}

function theme_mc_location_gmap_default($field) {
  $field['format'] = 'nd_location_gmap';
  $field['formatter'] = 'nd_location_gmap_default';
  $node = $field['object'];
  if(isset($node->location) && ((!empty($node->location['street']) || !empty($node->location['city']) || !empty($node->location['province']) || !empty($node->location['postal_code'])) || ($node->location['latitude']!='0.000000' && $node->location['longitude']!='0.000000' ) ) ){
    if (!empty($node->location['latitude']) && !empty($node->location['longitude'])) {

      // Defaults.
      $zoom = 'default';
      $width = 'default';
      $height = 'default';
      $latitude = $node->location['latitude'];
      $longitude = $node->location['longitude'];
      if($latitude=='0.000000' && $longitude=='0.000000'){
        $address = $node->location['street'] . ' ' . $node->location['city'] . ' ' . $node->location['province'] . ' ' . $node->location['postal_code'];
        $results = _mc_location_api_google_get_georeference($address);
        $longitude = $results['longitude'];
        $latitude = $results['latitude'];
      }
      $autoclick = FALSE;

      // Check format.
      $format = str_replace('nd_location_gmap_', '', $field['formatter']);
      if ($format != 'default') {
        $formatters = variable_get('nd_location_formatters', array());
        $formatter = $formatters[$format];
        $width = $formatter['width'] .'px';
        $height = $formatter['height'] .'px';
        $zoom = $formatter['zoom'];
        $autoclick = (isset($formatter['autoclick'])) ? $formatter['autoclick'] : FALSE;
      }
      $is_only_state_provided = empty($node->location['street']) && empty($node->location['city']) && empty($node->location['postal_code']) && !empty($node->location['province']);
      if($is_only_state_provided){
        $zoom = '7';
      }

      $newfield = arrayCopy($field);
      $newfield['object'] = $node;

      return theme('nd_location_gmap', $newfield, $latitude, $longitude, $width, $height, $zoom, $autoclick);
    }
  }
}


function theme_mc_nd_location_address($field) {

  $node = &$field['object']; //object = node

  if($node->type == "event" && $node->field_online_event[0]['value']==1){   //if it's node and has field_online_event, return Online Event
    return 'Online Event';
  }

  // Get the location field settings for this node type
  $node_type = ($node->type == 'event') ? "place" : $node->type;

  $settings = variable_get('location_settings_node_'. $node_type, array());

  // Loop through and collect the address fields we want to output in the order specified in node location settings,
  // and check that they are not set to be hidden in node location setting
  // also ignore arrays (eg. locpick)
  $address = array();

  foreach ($settings['form']['fields'] as $fieldname => $fieldsettings) {
    if (!$settings['display']['hide'][$fieldname] && !empty($node->location[$fieldname]) && !is_array($node->location[$fieldname])) {
      // Replace country code with full country name.
      if ($fieldname == 'country') {
        module_load_include('inc', 'location', 'location');
        $node->location[$fieldname] = location_country_name($node->location[$fieldname]);
      }
      // Add this field to our array of fields to output.
      $address[$fieldname] = check_plain($node->location[$fieldname]);
    }
  }

  /*
   * if name is "Exact Location TBD", unset some of the address items (might not be needed really).
   */
  if($address['name']=='Exact Location TBD'){ //special code that might need to be removed later
    unset($address['name']);
    unset($address['street']);
    unset($address['postal_code']);
  }

  /*
   * if address array is empty
   * OR
   * if address items count = 1 & has country.
  if(empty($address) || (count($address)==1 && isset($address['country'])) ){
    $has_address = $node->location['name'] && $node->location['street'] && $node->location['city'] && $node->location['province'];
    $has_lat_and_lon = $node->location['latitude'] && $node->location['longitude'] && $node->location['latitude']!='0.000000' && $node->location['longitude']!='0.000000';
    if(!$has_address && $has_lat_and_lon && function_exists('mc_event_feed_reverse_getAddressParts')){
      //$parts = mc_event_feed_reverse_getAddressParts($node->locations['0']['latitude'], $node->locations['0']['longitude']);
      //$address['city'] = $parts['city'];
      //$address['province'] = $parts['state'];
    }
  }
   */

  /*
   * if it's still true, return location was not provided.
   */
  if(empty($address) || (count($address)==1 && isset($address['country'])) ){
    return '<div class="no-location"> A location wasn\'t provided.</div>';
  }

  /*
   * render location with rich snappits support
   * @todo maye change this to be a seperate theming function.
   */

  $lines = array(
    0 => array('name'),
    1 => array('street'),
    2 => array('city','province','postal_code')
  );

  $lines_value = array();

  foreach($lines as $key => $parts){

    foreach($parts as $part){
      if(!empty($address[$part])){
        $value = $address[$part];
        switch($part){
          case 'name':
            $lines_value[$key][] = '<span itemprop="name" class="loc-name">'.$value.'</span>';
            break;
          case 'street':
            $lines_value[$key][] = '<span itemprop="streetAddress" class="loc-street">'.$value.'</span>';
            break;
          case 'city':
            $lines_value[$key][] = '<span itemprop="addressLocality" class="loc-city">'.$value.'</span>';
            break;
          case 'province':
            $lines_value[$key][] = '<span itemprop="addressRegion" class="loc-state">'.$value.'</span>';
            break;
          case 'postal_code':
            $lines_value[$key][] = '<span itemprop="postalCode" class="loc-postalcode">'.$value.'</span>';
            break;
        };
      }
    }
  };

  $content = "";

  $part1 = "";
  $part2 = "";

  foreach($lines_value as $key => $values){

    if($key == 0){
      if(count($values)){
        $part1 = "<div class='line-$key'>".implode($values, ', ')."</div>";
      }
    }

    if($key > 0){
      if(count($values)){
        $part2 .= "<div class='line-$key'>".implode($values, ', ')."</div>";
      }
    }
  }

  $part2 = '<div itemprop="address" itemscope itemtype="http://schema.org/PostalAddress">'.$part2.'</div>';

  return '<div itemprop="location" itemscope itemtype="http://schema.org/Place">' . $part1 . $part2 . '</div>';
}