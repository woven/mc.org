<?php

define("MC_DEFAULT_NAME","{MC Default Image}");
/**
 *  Implementation of hook_menu
 */
function mc_defaultimg_menu() {
  $items = array();
  $items['admin/settings/defaultimg'] = array(
      'title' => 'Default Image Config',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('mc_defaultimg_admin_settings'),
      'access arguments' => array('administer users'),
  );

  return $items;
}

/*
 * @todo make it work with default image settings per field
 * @todo check if files exist, and use site generic if it does
 */
function theme_imagecache_mc_defaultimg($element,$imagecache_formatter = 'default'){
  $newfid = null;

  $element['#formatter'] = str_replace('_mcdefaultimg','',$element['#formatter']);
  $preset = substr($element['#formatter'], 0, strrpos($element['#formatter'], '_'));
  $style = str_replace($preset."_","",$element['#formatter']);
  $calllback = "theme_imagecache_formatter_".$style;

  dsm($element,$preset."-".$style);

  $node = $element['#node'];

  if(!isset($element['#item']) OR empty($element['#item'])){
    //first check if it has og groups attached
    if(og_is_group_type($node->type)){
      $ogs = array($node->nid => $node->nid);
    }else{
      $ogs = og_get_node_groups($node);
    }

    if(!empty($ogs)){
      $gnid = key($ogs);
      $sql = "SELECT flogo.field_logo_fid AS fid FROM {node} AS n INNER JOIN content_field_logo AS flogo ON flogo.vid = n.vid AND flogo.nid = n.nid AND flogo.field_logo_list = 1 WHERE n.nid = %d";
      $logo_fid = db_result(db_query($sql,$gnid));

      if($logo_fid){
        $fid = field_file_load($logo_fid);
        $fid['destination'] = $fid['filepath'];
        $fid['nid'] = $node->nid;
        $fid['default'] = false;
        $newfid = $fid;
      }
    }

    if(is_null($newfid)){
      $fid_ct = variable_get('default_img_'.$node->type,false);
      if($fid_ct){
        $newfid = field_file_load($fid_ct);
      }
    }

    if(is_null($newfid)){
      $fid_ct = variable_get('default_img_generic',false);
      if($fid_ct){
        $newfid = field_file_load($fid_ct);
      }
    }

    if($newfid){
      $element['#item'] = $newfid;
    }
  }

  /*
  //check if item is assignedthen check if it's
  if(isset($element['#item']) && isset($element['#item']['fid'])){
    $f = $element['#item'];

    //check if the item really exist
    if(!file_exists($f['filepath'])){
      $fid_generic = variable_get('default_img_generic',false);
      if($fid_generic){
        $fid = &$element['#item'];
        $fid = field_file_load($fid_generic);
        $fid['destination'] = $fid['filepath'];
        $fid['nid'] = $node->nid;
        $fid['default'] = false;
      }
      dsm($fid,'im not here');
    };
  }else{
    return '';
  }
  */

  if(function_exists($calllback)){
    return $calllback($element);
  }
}

/**
 * Implementation of hook_theme().
 */
function mc_defaultimg_theme() {
  $theme = array();

  $theme['imagecache_mc_defaultimg'] = array(
    'arguments' => array(
      'element' => NULL,
      'imagecache_formatter' => 'default'
  ));

  foreach (imagecache_presets() as $preset) {
    $theme['mc_defaultimg_formatter_'. $preset['presetname'] .'_default_mcdefaultimg'] = array(
      'arguments' => array('element' => NULL,'imagecache_formatter' => 'default'),
      'function' => 'theme_imagecache_mc_defaultimg',
    );
    $theme['mc_defaultimg_formatter_'. $preset['presetname'] .'_linked_mcdefaultimg'] = array(
      'arguments' => array('element' => NULL,'imagecache_formatter' => 'linked'),
      'function' => 'theme_imagecache_mc_defaultimg',
    );
    $theme['mc_defaultimg_formatter_'. $preset['presetname'] .'_imagelink_mcdefaultimg'] = array(
      'arguments' => array('element' => NULL,'imagecache_formatter' => 'imgelink'),
      'function' => 'theme_imagecache_mc_defaultimg',
    );
    $theme['mc_defaultimg_formatter_'. $preset['presetname'] .'_path_mcdefaultimg'] = array(
      'arguments' => array('element' => NULL,'imagecache_formatter' => 'path'),
      'function' => 'theme_imagecache_mc_defaultimg',
    );
    $theme['mc_defaultimg_formatter_'. $preset['presetname'] .'_url_mcdefaultimg'] = array(
      'arguments' => array('element' => NULL,'imagecache_formatter' => 'url'),
      'function' => 'theme_imagecache_mc_defaultimg',
    );
  }

  return $theme;
}

/**
 * Implementation of hook_field_formatter_info().
 *
 * imagecache formatters are named as $presetname_$style
 * $style is used to determine how the preset should be rendered.
 * If you are implementing custom imagecache formatters please treat _ as
 * reserved.
 */
function mc_defaultimg_field_formatter_info() {
  $formatters = array();
  foreach (imagecache_presets() as $preset) {
    $formatters[$preset['presetname'] .'_default_mcdefaultimg'] = array(
      'label' => t('@preset image @mcdefault', array('@preset' => $preset['presetname'],'@mcdefault' => MC_DEFAULT_NAME)),
      'field types' => array('image', 'filefield'),
    );
    $formatters[$preset['presetname'] .'_linked_mcdefaultimg'] = array(
      'label' => t('@preset image linked to node @mcdefault', array('@preset' => $preset['presetname'],'@mcdefault' => MC_DEFAULT_NAME)),
      'field types' => array('image', 'filefield'),
    );
    $formatters[$preset['presetname'] .'_imagelink_mcdefaultimg'] = array(
      'label' => t('@preset image linked to image @mcdefault', array('@preset' => $preset['presetname'],'@mcdefault' => MC_DEFAULT_NAME)),
      'field types' => array('image', 'filefield'),
    );
    $formatters[$preset['presetname'] .'_path_mcdefaultimg'] = array(
      'label' => t('@preset file path @mcdefault', array('@preset' => $preset['presetname'],'@mcdefault' => MC_DEFAULT_NAME)),
      'field types' => array('image', 'filefield'),
    );
    $formatters[$preset['presetname'] .'_url_mcdefaultimg'] = array(
      'label' => t('@preset URL @mcdefault', array('@preset' => $preset['presetname'],'@mcdefault' => MC_DEFAULT_NAME)),
      'field types' => array('image', 'filefield'),
    );
  }
  return $formatters;
}

function mc_defaultimg_admin_settings(&$form_state) {
  $form = array();
  $form['#attributes'] = array('enctype' => 'multipart/form-data');
  $content_types = node_get_types();
  $generic = new stdClass();
  $generic->name = 'Generic';
  $generic->type = 'generic';
  $temp_array = array(
      'generic' => $generic,
  );
  $content_types = $temp_array + $content_types;
  foreach ($content_types as $content_type) {

    $form[$content_type->type] = array(
        '#type' => 'fieldset',
        '#title' => $content_type->name . ' Default Image Settings',
        '#collapsible' => TRUE,
        '#collapsed' => FALSE,
    );

    $existing_variable = variable_get('default_img_' . $content_type->type, '');

    if (!empty($existing_variable)) {
      $file = field_file_load($existing_variable);
      $image = theme('imagecache', "medium", $file['filepath']);
      $form[$content_type->type]['existing_img_' . $content_type->type] = array(
          '#type' => 'markup',
          '#value' => $image,
      );
      $form[$content_type->type]['delete_existing_img_' . $content_type->type] = array('#type' => 'checkbox', '#title' => t('Delete picture'),
          '#description' => t('Check this box to delete your current picture.'));
    }

    $form[$content_type->type]['default_img_' . $content_type->type] = array(
        '#type' => 'file',
        '#title' => t('Default image for ' . $content_type->name),
    );

  }
  $form = system_settings_form($form);
  unset($form['#submit']);
  $form['#submit'] = array('_mc_defaultimg_admin_settings_submit');
  return $form;
}

function _mc_defaultimg_admin_settings_submit($form, &$form_state) {
  global $user;
  $field_taxonomy_default_image = _mc_defaultimg_nodefield_widget_settings('field_taxonomy_default_image');

  if (!function_exists('mime_content_type')) { 
   function mime_content_type($f) { 
       $f = escapeshellarg($f); 
       return trim( `file -bi $f` ); 
   } 
  }

  foreach ($_FILES['files']['tmp_name'] as $key => $path) {
    if (!empty($path)) {
      $file_temp = file_get_contents($path);
      $file_temp = file_save_data($file_temp, file_directory_path() . '/defaultimgs/' . basename($_FILES['files']['name'][$key]), FILE_EXISTS_RENAME);
      $file = new stdClass();
      $file->filename = basename($file_temp);
      $file->filepath = $file_temp;
      $file->filemime = mime_content_type($file_temp);
      $file->filesize = filesize($file_temp);
      $file->uid = $user->uid;
      $file->timestamp = time();
      $file->status = FILE_STATUS_PERMANENT;
      drupal_write_record('files', $file);
      $existing_variable = variable_get($key, '');
      if (!empty($existing_variable)) {
        $old_file=field_file_load($existing_variable);
        $count_node = db_result(db_query("SELECT COUNT(*) FROM {content_field_list_image} WHERE field_list_image_fid=%d", $old_file['fid']));
        if($count_node=='0'){
          file_delete($old_file['filepath']);
          db_query('DELETE FROM files WHERE fid=' . $existing_variable);
        }
      }
      variable_set($key, $file->fid);
    }
  }
  foreach ($form_state['values'] as $key => $value) {
    if (strstr($key, 'delete_existing_img')) {
      if ($value == 1) {
        $variable = str_replace('delete_existing_img_', '', $key);
        $variable = "default_img_" . $variable;
        $existing_variable = variable_get($variable, '');
        if (!empty($existing_variable)) {
          $old_file=field_file_load($existing_variable);
          $count_node = db_result(db_query("SELECT COUNT(*) FROM {content_field_list_image} WHERE field_list_image_fid=%d", $old_file['fid']));
          if($count_node=='0'){
            file_delete($old_file['filepath']);
            db_query('DELETE FROM files WHERE fid=' . $existing_variable);
          }
        }
        variable_set($variable, '');
      }
    }
  }
}

/**
 * Implementation of hook_nodeapi
 */
function _mc_defaultimg_nodeapi(&$node, $op) {
  if ($node->type != 'page' || $node->type!='taxonomy_feature' || $node->type!='taxonomy_topic' ) {
    $vid = db_result(db_query("select vid from vocabulary where module='features_topic'"));
    switch ($op) {
      case 'prepare':

        // remove default image before presenting the form
        $field_taxonomy_default_image = _mc_defaultimg_nodefield_widget_settings('field_taxonomy_default_image');
        $default_path = 'sites/default/files/' . $field_taxonomy_default_image['file_path'];
        if ($node->field_list_image && count($node->field_list_image) == 1 &&
                strpos($node->field_list_image[0]['filepath'], $default_path) === 0) {

          unset($node->field_list_image[0]);
        }

        break;
      case 'delete':
        $a=4;
      break;
      case 'presave':
        if ($node->field_list_image && ( empty($node->field_list_image[0]) || empty($node->field_list_image[0]['fid']))) {

          // add default image

          $use_generic_image = TRUE;

          // get category terms

          if (is_array($node->taxonomy) && !empty($node->taxonomy[$vid])) {
            foreach ($node->taxonomy[$vid] as $tid) {
              $nid = _taxonomynode_get_nid_from_tid($tid);
              $node_taxonomy = node_load($nid);
              if (isset($node_taxonomy->field_taxonomy_default_image['0']['fid'])) {
                $file = field_file_load($node_taxonomy->field_taxonomy_default_image['0']['fid']);
                $filename = $file['filepath'];
                $use_generic_image = FALSE;
                break;
              }
            }
          }

          // if no term found, add generic one
          if ($use_generic_image) {
            $type_default_image_fid = variable_get("default_img_" . $node->type, '');
            if ($type_default_image_fid != '') {
              $file = field_file_load($type_default_image_fid);
              $filename = $file['filepath'];
            } else {
              $generic_default_image_fid = variable_get("default_img_generic", '');
              if ($generic_default_image_fid != '') {
                $file = field_file_load($generic_default_image_fid);
                $filename = $file['filepath'];
              } else {
                return;
              }
            }
          }

          $node->field_list_image = array(
              array(
                  'fid' => $file['fid'],
                  'title' => basename($file['filename']),
                  'filename' => $file['filename'],
                  'filepath' => $file['filepath'],
                  'filesize' => $file['filesize'],
                  'mimetype' => $file['filemime'],
                  'data' => array(
                      'description' => basename($file['filename']),
                  ),
                  'list' => 1,
              ),
          );
        }
        break;
    }
  }
}


function _mc_defaultimg_file_references($file) {
  $field_taxonomy_default_image = _mc_defaultimg_nodefield_widget_settings('field_taxonomy_default_image');
  if(arg(0)=='node' && arg(2)=='delete'){
    $node=node_load(arg(1));
  }
  else {
    $node=new stdClass();
    $node->type = 'taxonomy_term';
  }
  $path = 'sites/default/files/' . $field_taxonomy_default_image['file_path'];
  $belongs_to_module = strstr($file->filepath, $path);
  if ($belongs_to_module) {
    $count_node = db_result(db_query("SELECT COUNT(*) FROM {content_field_list_image} WHERE field_list_image_fid=%d", $file->fid));
    $count_terms = db_result(db_query("SELECT COUNT(*) FROM {content_type_taxonomy_topic} WHERE field_taxonomy_default_image_fid=%d", $file->fid));
    
    $content_types = node_get_types();
    $generic = new stdClass();
    $generic->name = 'Generic';
    $generic->type = 'generic';
    $temp_array = array(
        'generic' => $generic,
    );
    $content_types = $temp_array + $content_types;
    $count_defaults=0;
    foreach ($content_types as $content_type) {
      $variable = variable_get('default_img_' . $content_type->type, '');
      if($variable==$file->fid){
        $count_defaults++;
      }
    }
    if($node->type=='taxonomy_term'){
      $count_terms--;
    }
    else{
      $count_node--;
    }
    $total_count=$count_defaults+$count_node+$count_terms;
    return array('mc_defaultimg' => $total_count);
  }
}

function _mc_defaultimg_nodefield_widget_settings($field_name) {
  $sql = " SELECT widget_settings FROM {content_node_field_instance} WHERE field_name = '%s' ";
  return unserialize(db_result(db_query($sql, $field_name)));
}