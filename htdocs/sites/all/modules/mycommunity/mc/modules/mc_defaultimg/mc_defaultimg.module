<?php

define("MC_DEFAULT_NAME","{MC Default Image}");

  /**
 *  Implementation of hook_menu
 */
function mc_defaultimg_menu() {
  $items = array();
  $items['admin/mc/defaultimg'] = array(
      'type' => MENU_NORMAL_ITEM,
      'title' => 'Default Image Config',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('mc_defaultimg_admin_settings'),
      'access arguments' => array('administer users'),
  );

  return $items;
}

function _is_file_exists($file){

  if(empty($file) OR is_null($file)){
    return false;
  }

  if(file_exists($file['filepath'])){
    return true;
  }

  return false;
}

function file_load_default($type = "generic"){
  if($type == "site_generic"){
    $path = conf_path();
    $filename = "generic.png";
  }else{
    $path = libraries_get_path('mc_defaultimage');
    $filename = $type.".png";
  }
  $fullpath = $path . "/" . $filename;

  if(file_exists($fullpath)){
    $file = field_file_load('');
    $file['fid'] = 1;
    $file['filepath'] = $fullpath;
    $file['filename'] = $filename;
    $file['filemime'] = 'image/png';
    $file['filesize'] = filesize($fullpath);
    return $file;
  }

  return;
}

/*
 * @todo make it work with default image settings per field
 * @todo check if files exist, and use site generic if it does
 * @todo create a general function that could take file/node as argument to get the default image (see mc_search_core.module for cleanup)
 */
function theme_imagecache_mc_defaultimg($element,$imagecache_formatter = 'default'){

  $node = $element['#node'];

  //if($node->nid == 1073){ //debug specific node

    $newfid = null;

    $element['#formatter'] = str_replace('_mcdefaultimg','',$element['#formatter']);
    $preset = substr($element['#formatter'], 0, strrpos($element['#formatter'], '_'));
    $style = str_replace($preset."_","",$element['#formatter']);

    $calllback = "theme_imagecache_formatter_".$style;

  if(!isset($element['#item']) OR empty($element['#item'])){
    $newfid = array();


    //check if if mc_defaultimg_og is enabled
    if(variable_get("mc_defaultimg_og",false)){
      //first check if it has og groups attached
      if(og_is_group_type($node->type)){
        $ogs = array($node->nid => $node->nid);
      }else{
        $ogs = og_get_node_groups($node);
      }

      if(!empty($ogs)){
        $gnid = key($ogs);

        //the field id, it has to be file , unlimited field
        $field_id = 'field_logo';
        $sql = t("SELECT flogo.!fid_fid AS fid FROM {node} AS n INNER JOIN content_!fid AS flogo ON flogo.vid = n.vid AND flogo.nid = n.nid AND flogo.!fid_list = 1 WHERE n.nid = %d",array('!fid' => $field_id));
        $logo_fid = db_result(db_query($sql,$gnid));

        if($logo_fid){
          $fid = field_file_load($logo_fid);
          $newfid = $fid;
        }
      }
    }


    if(!_is_file_exists($newfid)){
      $fid_ct = variable_get('default_img_'.$node->type,false);
      if($fid_ct){
        $newfid = field_file_load($fid_ct);
      }
    }

    if(!_is_file_exists($newfid)){
      $fid_ct = variable_get('default_img_generic',false);
      if($fid_ct){
        $newfid = field_file_load($fid_ct);
      }
    }

    if(_is_file_exists($newfid)){
      $element['#item'] = $newfid;
    }

  }


  //additional checks to provide default image if #item is still empty, even if the file was set but doesnot exist
  if(!_is_file_exists($element['#item'])){
    $element['#item'] = file_load_default("site_generic");
  }

  //additional checks to provide default image if #item is still empty, even if the file was set but doesnot exist
  if(!_is_file_exists($element['#item'])){
    $element['#item'] = file_load_default($node->type);
  }

  if(!_is_file_exists($element['#item'])){
    $element['#item'] = file_load_default();
  }

  if($element['#item'] && !$element['#item']['nid']){
    $element['#item']['nid'] = $node->nid;
  }

  if(function_exists($calllback)){
     return $calllback($element);
  }

  //}//end debug
}

/**
 * Implementation of hook_theme().
 */
function mc_defaultimg_theme() {
  $theme = array();

  $theme['imagecache_mc_defaultimg'] = array(
    'arguments' => array(
      'element' => NULL,
      'imagecache_formatter' => 'default'
  ));

  foreach (imagecache_presets() as $preset) {
    $theme['mc_defaultimg_formatter_'. $preset['presetname'] .'_default_mcdefaultimg'] = array(
      'arguments' => array('element' => NULL,'imagecache_formatter' => 'default'),
      'function' => 'theme_imagecache_mc_defaultimg',
    );
    $theme['mc_defaultimg_formatter_'. $preset['presetname'] .'_linked_mcdefaultimg'] = array(
      'arguments' => array('element' => NULL,'imagecache_formatter' => 'linked'),
      'function' => 'theme_imagecache_mc_defaultimg',
    );
    $theme['mc_defaultimg_formatter_'. $preset['presetname'] .'_imagelink_mcdefaultimg'] = array(
      'arguments' => array('element' => NULL,'imagecache_formatter' => 'imgelink'),
      'function' => 'theme_imagecache_mc_defaultimg',
    );
    $theme['mc_defaultimg_formatter_'. $preset['presetname'] .'_path_mcdefaultimg'] = array(
      'arguments' => array('element' => NULL,'imagecache_formatter' => 'path'),
      'function' => 'theme_imagecache_mc_defaultimg',
    );
    $theme['mc_defaultimg_formatter_'. $preset['presetname'] .'_url_mcdefaultimg'] = array(
      'arguments' => array('element' => NULL,'imagecache_formatter' => 'url'),
      'function' => 'theme_imagecache_mc_defaultimg',
    );
  }

  return $theme;
}

/**
 * Implementation of hook_field_formatter_info().
 *
 * imagecache formatters are named as $presetname_$style
 * $style is used to determine how the preset should be rendered.
 * If you are implementing custom imagecache formatters please treat _ as
 * reserved.
 */
function mc_defaultimg_field_formatter_info() {
  $formatters = array();
  foreach (imagecache_presets() as $preset) {
    $formatters[$preset['presetname'] .'_default_mcdefaultimg'] = array(
      'label' => t('@preset image @mcdefault', array('@preset' => $preset['presetname'],'@mcdefault' => MC_DEFAULT_NAME)),
      'field types' => array('image', 'filefield'),
    );
    $formatters[$preset['presetname'] .'_linked_mcdefaultimg'] = array(
      'label' => t('@preset image linked to node @mcdefault', array('@preset' => $preset['presetname'],'@mcdefault' => MC_DEFAULT_NAME)),
      'field types' => array('image', 'filefield'),
    );
    $formatters[$preset['presetname'] .'_imagelink_mcdefaultimg'] = array(
      'label' => t('@preset image linked to image @mcdefault', array('@preset' => $preset['presetname'],'@mcdefault' => MC_DEFAULT_NAME)),
      'field types' => array('image', 'filefield'),
    );
    $formatters[$preset['presetname'] .'_path_mcdefaultimg'] = array(
      'label' => t('@preset file path @mcdefault', array('@preset' => $preset['presetname'],'@mcdefault' => MC_DEFAULT_NAME)),
      'field types' => array('image', 'filefield'),
    );
    $formatters[$preset['presetname'] .'_url_mcdefaultimg'] = array(
      'label' => t('@preset URL @mcdefault', array('@preset' => $preset['presetname'],'@mcdefault' => MC_DEFAULT_NAME)),
      'field types' => array('image', 'filefield'),
    );
  }
  return $formatters;
}

function mc_defaultimg_admin_settings(&$form_state) {
  $form = array();
  $form['#attributes'] = array('enctype' => 'multipart/form-data');
  $content_types = node_get_types();
  $generic = new stdClass();
  $generic->name = 'Generic';
  $generic->type = 'generic';
  $temp_array = array(
      'generic' => $generic,
  );
  $content_types = $temp_array + $content_types;
  foreach ($content_types as $content_type) {

    $form[$content_type->type] = array(
        '#type' => 'fieldset',
        '#title' => $content_type->name . ' Default Image Settings',
        '#collapsible' => TRUE,
        '#collapsed' => FALSE,
    );

    $existing_variable = variable_get('default_img_' . $content_type->type, '');

    if (!empty($existing_variable)) {
      $file = field_file_load($existing_variable);
      $image = theme('imagecache', "medium", $file['filepath']);
      $form[$content_type->type]['existing_img_' . $content_type->type] = array(
          '#type' => 'markup',
          '#value' => $image,
      );
      $form[$content_type->type]['delete_existing_img_' . $content_type->type] = array('#type' => 'checkbox', '#title' => t('Delete picture'),
          '#description' => t('Check this box to delete your current picture.'));
    }

    $form[$content_type->type]['default_img_' . $content_type->type] = array(
        '#type' => 'file',
        '#title' => t('Default image for ' . $content_type->name),
    );

  }
  $form = system_settings_form($form);
  unset($form['#submit']);
  $form['#submit'] = array('mc_defaultimg_admin_settings_submit');
  return system_settings_form($form);
}

function mc_defaultimg_admin_settings_submit($form, &$form_state) {
  global $user;
  //$field_taxonomy_default_image = _mc_defaultimg_nodefield_widget_settings('field_taxonomy_default_image');

  if (!function_exists('mime_content_type')) {
   function mime_content_type($f) {
       $f = escapeshellarg($f);
       return trim( `file -bi $f` );
   }
  }

  foreach ($_FILES['files']['tmp_name'] as $key => $path) {
    if (!empty($path)) {
      $file_temp = file_get_contents($path);
      $file_temp = file_save_data($file_temp, file_directory_path() . '/defaultimgs/' . basename($_FILES['files']['name'][$key]), FILE_EXISTS_RENAME);
      $file = new stdClass();
      $file->filename = basename($file_temp);
      $file->filepath = $file_temp;
      $file->filemime = mime_content_type($file_temp);
      $file->filesize = filesize($file_temp);
      $file->uid = $user->uid;
      $file->timestamp = time();
      $file->status = FILE_STATUS_PERMANENT;
      drupal_write_record('files', $file);
      $existing_variable = variable_get($key, '');
      if (!empty($existing_variable)) {
        $old_file=field_file_load($existing_variable);
        $count_node = db_result(db_query("SELECT COUNT(*) FROM {content_field_list_image} WHERE field_list_image_fid=%d", $old_file['fid']));
        if($count_node=='0'){
          file_delete($old_file['filepath']);
          db_query('DELETE FROM files WHERE fid=' . $existing_variable);
        }
      }
      variable_set($key, $file->fid);
    }
  }
  foreach ($form_state['values'] as $key => $value) {
    if (strstr($key, 'delete_existing_img')) {
      if ($value == 1) {
        $variable = str_replace('delete_existing_img_', '', $key);
        $variable = "default_img_" . $variable;
        $existing_variable = variable_get($variable, '');
        if (!empty($existing_variable)) {
          $old_file=field_file_load($existing_variable);
          $count_node = db_result(db_query("SELECT COUNT(*) FROM {content_field_list_image} WHERE field_list_image_fid=%d", $old_file['fid']));
          if($count_node=='0'){
            file_delete($old_file['filepath']);
            db_query('DELETE FROM files WHERE fid=' . $existing_variable);
          }
        }
        variable_set($variable, '');
      }
    }
  }
}