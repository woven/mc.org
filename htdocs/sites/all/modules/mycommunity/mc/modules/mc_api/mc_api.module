<?php
function webcal_url($path = NULL, $options = array()){
  //force url to be absolute
  $options['absolute'] = true;
  $url = url($path,$options);
  return str_replace("http://","webcal://",$url);
}

function webcal_l($text, $path, $options = array()) {
  global $language;

  // Merge in defaults.
  $options += array(
    'attributes' => array(),
    'html' => FALSE,
  );

  // Append active class.
  if (($path == $_GET['q'] || ($path == '<front>' && drupal_is_front_page())) &&
    (empty($options['language']) || $options['language']->language == $language->language)) {
    if (isset($options['attributes']['class'])) {
      $options['attributes']['class'] .= ' active';
    }
    else {
      $options['attributes']['class'] = 'active';
    }
  }

  // Remove all HTML and PHP tags from a tooltip. For best performance, we act only
  // if a quick strpos() pre-check gave a suspicion (because strip_tags() is expensive).
  if (isset($options['attributes']['title']) && strpos($options['attributes']['title'], '<') !== FALSE) {
    $options['attributes']['title'] = strip_tags($options['attributes']['title']);
  }

  return '<a href="' . check_url(webcal_url($path, $options)) . '"' . drupal_attributes($options['attributes']) . '>' . ($options['html'] ? $text : check_plain($text)) . '</a>';
}

function _mc_taxonomy_fix_vid($vid,$feature){
  //get the vid of the current taxonomy term
  $c_vid = db_result(db_query("SELECT vid FROM {vocabulary} WHERE module = '%s'",$feature));

  //check if the target $vid exists already or not
  $vid_exists = db_result(db_query("SELECT vid FROM {vocabulary} WHERE vid = %d",$vid));

  if($c_vid != $vid){
    if(!$vid_exists){ //if vid does not already exist
      //change the vid to become to the target vid on vocabulary and term_date
      db_query("UPDATE {vocabulary} SET vid = %d WHERE vid = %d",$vid,$c_vid);
      db_query("UPDATE {term_data} SET vid = %d WHERE vid = %d",$vid,$c_vid);
      return true;
    }
  }

  return false;
}

function addhttp($url) {
  if (!preg_match("~^(?:f|ht)tps?://~i", $url)) {
    $url = "http://" . $url;
  }
  return $url;
}

function arrayCopy( array $array ) {
  $result = array();
  foreach( $array as $key => $val ) {
    if( is_array( $val ) ) {
      $result[$key] = arrayCopy( $val );
    } elseif ( is_object( $val ) ) {
      $result[$key] = clone $val;
    } else {
      $result[$key] = $val;
    }
  }
  return $result;
}

/*
 * @todo: https://app.asana.com/0/1947405877174/1955527457973
 * Commented the function, remove later if sure not needed 9/24/2012

function theme_imgplaceholder($gname,$gid){

  $range_colors = array(
    '1-15' => array("red","white"),
    '16-25' => array("orange","black"),
    '26-35' => array("purple","white"),
    '35-50' => array("green","white"),
    'else' => array("blue","white")
  );

  $colors_use = array();
  $gfirst = strtolower($gname[0]);

  foreach($range_colors as $range => $colors){
    $lt = explode("-",$range);

    if(count($lt) > 1){
      if(strlen($gname) >= $lt[0] && strlen($gname) <= $lt[1]){
        $colors_use = $colors;
        break 1;
      }
    }
  }

  if(empty($colors_use)){
    $colors_use =  $range_colors['else'];
  }

  $glink = url("node/".$gid);
  return "<div class=\"img-placeholder\"><a class=\"img\" href='$glink'><img src='/sites/miamitech.org/themes/miamitech/images/icons/ico-event.png'/></a></div>";
}
 */

function startsWith($haystack, $needle)
{
  $length = strlen($needle);
  return (substr($haystack, 0, $length) === $needle);
}

function endsWith($haystack, $needle)
{
  $length = strlen($needle);
  if ($length == 0) {
    return true;
  }

  return (substr($haystack, -$length) === $needle);
}

function _form_options_yes_no(){
    return array("0" => 'No',"1" => "Yes");
}

function _schema_meta_date($ts,$itemprop = 'startDate'){
  $iso_start = date('c',$ts);
  return "<meta itemprop=\"$itemprop\" content=\"$iso_start\">";
}

function mc_module_update_weight($module,$weight = 0){
  return db_query("UPDATE {system} SET weight = %d WHERE name = '%s'",$weight,$module);
}

/**
 * @param $form
 * @param $ct
 * @return bool
 */
function is_ct_form($form,$ct){
  if($form['#id'] == "node-form"){
    if(isset($form['#node'])){
      $node = $form['#node'];

      switch($ct){
        case 'form':
          return true;
        break;
        default:
          if($ct == $node->type){
            return TRUE;
          }
        break;
      }
    }
  }

  return FALSE;
}

/**
 *  like array_unshift but can working on assoctes
 * @param $arr
 * @param $key
 * @param $val
 */
function array_unshift_assoc($arr = array(), $key, $val)
{
  if(is_array($arr)){
    $arr = array_reverse($arr, TRUE);
    $arr[$key] = $val;
    return array_reverse($arr, TRUE);
  }
}

/**
 * Returns the groups that the user is subscribed to.
 */
function _mc_api_user_subscribed_groups(){
	$uid=arg(1);
	if(!is_numeric($uid) || arg(0)!='user'){
		global $user;
	}
	elseif(is_numeric($uid) && arg(0)=='user') {
		$user=user_load($uid);
	}
  else{
    return array();
  }
	$user_groups=$user->og_groups;
	$groups_nids=array();
	foreach ($user_groups as $nid => $value) {
    $group_node=node_load($nid);
    if($group_node->field_enable_discussions['0']['value']=='1'){
		  array_push($groups_nids, $nid);
    }
	}
	if(empty($groups_nids)){
		return array();
	}
	$placeholders=db_placeholders($groups_nids);
	$result=db_query("SELECT og_fr.tid FROM {og_forum_reference} og_fr WHERE og_fr.nid IN ($placeholders)", $groups_nids);
	$groups_tids=array();
	while ($row = db_fetch_object($result)) {
		$groups_tids[] = $row->tid;
	}
	$result=array();
	foreach ($groups_tids as $tid) {
		$result[]=taxonomy_get_term($tid);
	}
	return $result;
}

/**
 * Returns the emails of the users that want to recieve all the notifications
 */
function _mc_api_users_receive_all_notifications($tid, $account, $nid){
	// We'll let our SQL do the magic
	$results = db_query("SELECT DISTINCT u.uid FROM {users} u, {femail_ext_user_subscription} f WHERE u.uid = f.uid AND (tid = %d OR tid = 0) AND u.uid != %d AND f.setting=%d", $tid, $account->uid, '0');
	$node = node_load($nid);
	$emails = array();
	while($row = db_fetch_array($results)){
	  $account = user_load(array('uid' => $row['uid']));
	  if(node_access('view', $node, $account)){
	    $emails[] = "<{$account->mail}>";
	  }
	}
	return $emails;
}


/**
 * Helper function to determine the users that have commented or started a disccusion.
 * @param Term id of the forum $tid
 *        Node id of the node that belongs the comment.
 * @return string
 */
function _mc_api_users_receive_notifications_when_started_commented_discussions($tid, $nid, $cid = 0){
  $node = node_load($nid);
  if ($cid != 0){
    $uid_user_created_comment = db_result(db_query("SELECT uid FROM comments WHERE cid = ".$cid));
    $results = db_query("SELECT DISTINCT c.uid FROM {comments} c, {femail_ext_user_subscription} f WHERE (c.uid = f.uid AND f.tid = %d) AND (c.nid = %d AND c.uid != %d AND c.uid != %d AND f.setting = %d) AND (c.uid != %d)", $tid, $nid, $GLOBALS['user']->uid, $node->uid, SOME_NOTIFICATIONS, $uid_user_created_comment);
  }else{
    $results = db_query("SELECT DISTINCT c.uid FROM {comments} c, {femail_ext_user_subscription} f WHERE (c.uid = f.uid AND f.tid = %d) AND (c.nid = %d AND c.uid != %d AND c.uid != %d AND f.setting = %d)", $tid, $nid, $GLOBALS['user']->uid, $node->uid, SOME_NOTIFICATIONS);
  }
  $uid = array();
  $emails = array();
  while($row = db_fetch_array($results)){
    $account = user_load(array('uid' => $row['uid']));
    if(node_access('view', $node, $account)){
      $uid[] = $row['uid'];
      if (!isset($uid_user_created_comment)){
        $emails[] = "<{$account->mail}>";
      }elseif($row['uid']!=$uid_user_created_comment){
        $emails[] = "<{$account->mail}>";
      }
    }
  }
  if (($cid != 0) && !in_array($node->uid, $uid) && ($node->uid != $uid_user_created_comment)){
    $account = user_load(array('uid' => $node->uid));
    $emails[] = "<{$account->mail}>";
  }
  return $emails;
}


/**
 * Helper function to determine if a user belongs to a group.
 * @param Term id of the forum $tid
 *        User id $uid
 * @return boolean
 */

function _mc_api_user_belongs_to_a_group($uid, $tid){
  //Get the group id, given a tid.
  $group = _get_group_or_forum($tid);
  $belong_to_a_group = db_result(db_query("SELECT COUNT(*) FROM {og_uid} WHERE nid = %d AND uid = %d", $group, $uid));
  
  if ($belong_to_a_group>0){
    return TRUE;
  }else{
    return FALSE;
  }
}


/**
 * Helper function for giving a nid of group get the forum term id and viceversa.
 * @param Term id of the forum $tid or 
 *        Group id $nid
 * @return string
 */

function _get_group_or_forum($tid = '', $nid= ''){
  $result = '';
  if ($tid != ''){
    $result = db_result(db_query("SELECT nid FROM og_forum_reference WHERE tid = " . $tid));
  }elseif($nid != ''){
    $result = db_result(db_query("SELECT tid FROM og_forum_reference WHERE nid = " . $nid));
  }
  return $result;
}


/**
 * Helper function for giving a group name get the nid of the group.
 * @param Group name 
 *        
 * @return string
 */

function _get_group_id($group_name){
  
  $uid_user_created_comment = db_result(db_query("SELECT nid FROM content_type_group c WHERE c.field_small_name_value = '%s'", $group_name));
  return $uid_user_created_comment;
}


/**
 * Helper function for giving a Email body, verify if it is a comment, if yes return the comment and add all the history until the comment.
 * @param Message Body $body
 *        Comment id $cid
 *        $Discussion id $nid 
 *        
 * @return string
 */
function _mc_api_add_comments_history($body, $cid, $nid){
 
  if ($cid != 0){
    $result = db_query('SELECT timestamp, name, comment FROM {comments} WHERE nid=%d', $nid);
    $new_body = '';
    $comments_history = array();
    while ($row = db_fetch_array($result)) {
      $created = (string)(date("M d, h:i A", $row["timestamp"]));
      $author_object = user_load(array('name'=> $row['name']));
      $author = _mc_api_get_user_name($author_object);
      $comment = (string)($row['comment']);      
      $old_comment = "<blockquote style='margin:0;padding:0'><table style='font-family:Helvetica Neue,Arial,sans-serif;font-size:12px;line-height:1.4;color:#212f40;width:600px' border=0 cellspacing=0 cellpadding=0><tbody><tr style='text-align:left;vertical-align:baseline'><td style='width:10px;font-family:Verdana,sans-serif;font-size:12px;font-weight:bold;text-align:right;padding-right:10px;padding-top:10px;vertical-align:top'>»</td><td style='padding-bottom:10px;padding-top:10px'><div style='font-weight:bold;margin-bottom:4px'>" . $author . "</div><span style='white-space:nowrap'> " . check_markup($comment) . "
      </span></td></tr></tbody></table></blockquote>";
      $comments_history[] = $old_comment;
    }
  }else{
    $forum_node = node_load($nid);
    $user_object = user_load($forum_node->uid);
    $author = _mc_api_get_user_name($user_object); 
    $discussion = "<blockquote style='margin:0;padding:0'><table style='font-family:Helvetica Neue,Arial,sans-serif;font-size:12px;line-height:1.4;color:#212f40;width:600px;border:1px solid #ced7e0;margin:0;padding:0' border=0 cellspacing=0 cellpadding=0><tbody><tr style='text-align:left;vertical-align:baseline'><td style='padding:10px;padding-left:20px;font-size:14px;font-weight:bold;background-color:#ced7e0;color:#596573'>" . check_markup($forum_node->title) . "</td></tr><tr style='text-align:left;vertical-align:baseline'><td style='padding:0 10px;padding-left:20px'><table style='font-family:Helvetica Neue,Arial,sans-serif;font-size:12px;line-height:1.4;color:#212f40;width:590px;border-bottom:1px solid #e5e5e5' border=0 cellspacing=0 cellpadding=0><tbody><tr style='text-align:left;vertical-align:baseline'><td style='padding:10px 0px;'>" . check_markup($forum_node->body) ."</td></tr><tr style='min-height:7px;text-align:left;vertical-align:baseline'><td style='padding:0'></td></tr></tbody></table><table style='font-family:Helvetica Neue,Arial,sans-serif;font-size:12px;line-height:1.4;color:#212f40;width:590px' border=0 cellspacing=0 cellpadding=0><tbody><tr style=min-height:7px;text-align:left;vertical-align:baseline><td style=padding:0></td><td style=padding:0></td></tr><tr style=text-align:left;vertical-align:baseline><td style=padding:10px 0px;width:90px;color:#999999;font-size:11px;font-weight:bold;padding-bottom:0px;vertical-align:top>Author</td><td style=padding:10px 0px><span style=font-weight:bold;white-space:nowrap>" . $author . "</span></td></tr><tr style=text-align:left;vertical-align:baseline><td style=padding:10px 0px;width:90px;color:#999999;font-size:11px;font-weight:bold;padding-bottom:0px;vertical-align:top>Date</td><td style=padding:9px 0px><span style=font-weight:bold;white-space:nowrap>" . (string)(date("M d, h:i A", $forum_node->created)) . "</span> </td></tr><tr style='min-height:7px;text-align:left;vertical-align:baseline'><td style='padding:0'></td><td style='padding:0'></td></tr></tbody></table></td></tr></tbody></table></blockquote>";
    return $discussion;
  }
  $comments_counter = 0;
  for ($index = (count($comments_history)-1); $index >= 0 ; $index--) {
    $forum_node = node_load($nid);
    
    if ($comments_counter<6){
      $new_body = $new_body . $comments_history[$index];
      $comments_counter+=1;
    }else{
      $group_nid = _get_group_or_forum($forum_node->forum_tid, '');
      $group_object = node_load($group_nid);
      //Generate link to the discussion.
      $web_topic_link = l('View this topic on the web.' ,'node/' . $nid);
      $plural = 'There are ' . (count($comments_history) - $comments_counter) . ' more previous comments. ';
      $singular = 'There is ' . (count($comments_history) - $comments_counter) . ' more previous comment. ';
      $web_topic = format_plural((count($comments_history) - $comments_counter), $singular, $plural);
      $text = "<blockquote style='margin:0;padding:0'><table style='font-family:Helvetica Neue,Arial,sans-serif;font-size:12px;line-height:1.4;color:#212f40;width:600px' border=0 cellspacing=0 cellpadding=0><tbody><tr style='text-align:left;vertical-align:baseline'><td style='padding-bottom:10px;padding-top:10px'><div style='font-weight:bold;margin-bottom:4px;font-style: italic'> <span style='font-weight: bold;'>" . $web_topic . "</span>" . $web_topic_link . "</div><span style='white-space:nowrap'> " . '' . "
      </span></td></tr></tbody></table></blockquote>";
      $new_body = $new_body . $text;
      break;
    }
  }
  if ($cid != 0){
    $user_object = user_load($forum_node->uid);
    $author = _mc_api_get_user_name($user_object); 
    $discussion = "<blockquote style='margin:0;padding:0'><table style='font-family:Helvetica Neue,Arial,sans-serif;font-size:12px;line-height:1.4;color:#212f40;width:600px;border:1px solid #ced7e0;margin:0;padding:0' border=0 cellspacing=0 cellpadding=0><tbody><tr style='text-align:left;vertical-align:baseline'><td style='padding:10px;padding-left:20px;font-size:14px;font-weight:bold;background-color:#ced7e0;color:#596573'>" . $forum_node->title . "</td></tr><tr style='text-align:left;vertical-align:baseline'><td style='padding:0 10px;padding-left:20px'><table style='font-family:Helvetica Neue,Arial,sans-serif;font-size:12px;line-height:1.4;color:#212f40;width:590px;border-bottom:1px solid #e5e5e5' border=0 cellspacing=0 cellpadding=0><tbody><tr style='text-align:left;vertical-align:baseline'><td style='padding:10px 0px;'>" . check_markup($forum_node->body) ."</td></tr><tr style='min-height:7px;text-align:left;vertical-align:baseline'><td style='padding:0'></td></tr></tbody></table><table style='font-family:Helvetica Neue,Arial,sans-serif;font-size:12px;line-height:1.4;color:#212f40;width:590px' border=0 cellspacing=0 cellpadding=0><tbody><tr style=min-height:7px;text-align:left;vertical-align:baseline><td style=padding:0></td><td style=padding:0></td></tr><tr style=text-align:left;vertical-align:baseline><td style=padding:10px 0px;width:90px;color:#999999;font-size:11px;font-weight:bold;padding-bottom:0px;vertical-align:top>Author</td><td style=padding:10px 0px><span style=font-weight:bold;white-space:nowrap>" . $author . "</span></td></tr><tr style=text-align:left;vertical-align:baseline><td style=padding:10px 0px;width:90px;color:#999999;font-size:11px;font-weight:bold;padding-bottom:0px;vertical-align:top>Date</td><td style=padding:9px 0px><span style=font-weight:bold;white-space:nowrap>" . (string)(date("M d, h:i A", $forum_node->created)) . "</span> </td></tr><tr style='min-height:7px;text-align:left;vertical-align:baseline'><td style='padding:0'></td><td style='padding:0'></td></tr></tbody></table></td></tr></tbody></table></blockquote>";
    return $new_body . $discussion;
  }else{
    return $new_body;
  }
  
}



/**
 * Helper function to generate an email address based on the domain of the site.
 * @param First part of the email.
 *        
 * @return string
 */

function _mc_api_generate_email_based_on_domain($first_part, $email = ''){
  $email_parts = explode('@', $email);
  $email_generated = $first_part . '@' . $email_parts[1];
  return $email_generated;
}

/**
 * Helper function to get the user name.
 * @param User Object.
 *        
 * @return string
 */
function _mc_api_get_user_name($user){
  $name = ($user->profile_real_name != '') ? $user->profile_real_name : $user->name;
  return $name;
}



/**
 * Helper function to save the Facebook picture of the user.
 * @param 
 *        
 * @return array
 */
function _mc_api_save_facebook_user_image($picture_path, $filename = ''){
  global $user;

  if (!function_exists('mime_content_type')) { 
   function mime_content_type($f) { 
       $f = escapeshellarg($f); 
       return trim( `file -bi $f` ); 
   } 
  } 
  $file_temp = file_get_contents($picture_path);
  if($filename==''){
    $filename=basename($picture_path);
  }
  $file_temp = file_save_data($file_temp, file_directory_path(). '/user_profile_pictures/' . basename($filename), FILE_EXISTS_RENAME);
  $file            = new stdClass();
  $file->filename  = basename($file_temp);
  $file->filepath  = $file_temp;
  $file->filemime  = mime_content_type($file_temp);
  $file->filesize  = filesize($file_temp);
  $file->uid       = $user->uid;
  $file->timestamp = time();
  drupal_write_record('files', $file);

  $image=array(
    'fid' => $file->fid,
    'title' => basename($file_temp),
    'filename' => basename($file_temp),
    'filepath' => $file_temp,
    'filesize' => filesize($file_temp),
    'data' => array('desc' => array('body'=> $texts[$i])),
  );
  return $image;
}


/**
 * Return a date with a specific format time.
 */

function mc_api_format_day($unix_date, $uppercase = false){

  $today = mktime(0, 0, 0);
  $tomorrow = $today + 24 * 3600;
  $yesterday = $today - 24 * 3600;
  $afterTomorrow = $tomorrow + 24 * 3600;
  $dayOfWeek = (int)date('w', $today);
  $thisSunday = $today + (7 - $dayOfWeek) * 24 * 3600;
  $output = '';
  $printDay = TRUE;

  if ($unix_date < $today){
    $printDay = FALSE;
  }else{
    $day = "<span class=\"day\">".date('l', $unix_date)."</span> ";
  }
  if ($unix_date >= $yesterday && $unix_date < $today){
    if($uppercase){
      $output .= t('Yesterday');
    }
    else {
      $output .= t('yesterday');
    }
  }elseif ($unix_date >= $today && $unix_date < $tomorrow){
    $output .= t('Today');
  }elseif ($unix_date >= $tomorrow && $unix_date < $afterTomorrow){
    $output .= t('Tomorrow');
  }elseif ($unix_date >= $afterTomorrow && $unix_date < $thisSunday){
    $output .= "<span class=\"day\">".date('l', $unix_date)."</span>";
  }else{
    if (date('Y') == date('Y', $unix_date)){ // same year
      if ($printDay){
        $output .= $day.date('F jS', $unix_date);
      }else{
        $output .= date('D F jS', $unix_date);
      }
    }else{ // different year
      if ($printDay){
        $output .= $day.date('F jS, Y', $unix_date);
      }else{
        $output .= date('F jS, Y', $unix_date);
      }
    }
  }
  return $output;
}


/*
  * return check if the current user has any nodes of the @type.
*/
function _mc_count_user_ct($type){
  global $user;
  return db_result(db_query("SELECT Count(node.nid) FROM node WHERE node.type = '%s'  AND node.uid = %d",$type,$user->uid));
}

/*
   return the current week from timestamp
*/
function _mc_date_calender_week($ts){
  if($ts){
    $day = format_date($ts,'custom','Y-m-d');

    //check if date_api function exists
    if(function_exists("date_week")){
      //return calender week Sunday-Saturday
      return intval(date_week($day));
    }else{
      //use default date format at php
      //monday to sunday week
      $date = date_create($day);
      return intval(date_format($date, 'W'));
    }
  }

  return;
}

/*
 * return the first day of the weeok
 */
function _mc_date_week_firstday($week,$year){
  $days = date_week_range($week,$year);
  if(!empty($days)){
    return date_timestamp_get($days[0]);
  }
  return ;
}

/**
 * Return a date with a specific format time.
 */
function _mc_api_get_formatted_time($time, $printAMPM = TRUE){
  if (date('i', $time) != '00'){
    if ($printAMPM){
      $timeFormat = "g:ia";
    }else{
      $timeFormat = "g:i";
    }
  }else{
    if ($printAMPM){
      $timeFormat = "ga";
    }else{
      $timeFormat = "g";
    }
  }
  return date($timeFormat, $time);
}


function mc_api_format_whole_day_event($start, $end = NULL, $occurring = NULL){
  if($occurring){
    $prefix_start = ' ';
    $prefix_end = '-';
  }
  else {
    $prefix_start = ' ';
    $prefix_end = '-';
  }
  if (!$end){
    // start date only
    return $prefix_start . date('D', $start);
  }
  return $prefix_start . date('D', $start) . $prefix_end . date('D', $end);
}

/**
 * Return a date with a specific format time.
 */
function mc_api_format_time($start, $end = NULL, $occurring = NULL){
  if($occurring){
    $prefix_start = '';
    $prefix_end = '-';
  }
  else {
    $prefix_start = '';
    $prefix_end = '-';
  }
  
  if (!$end){
    // start date only
    return $prefix_start . _mc_api_get_formatted_time($start, TRUE);
  }
  if(date('z', $start)==date('z', $end)){
    if (date('a', $start) == date('a', $end)){
      // do not print AM/PM in start date
      $startDate = _mc_api_get_formatted_time($start, FALSE);
    }else{
      $startDate = _mc_api_get_formatted_time($start, TRUE);
    }
    $endDate = _mc_api_get_formatted_time($end, TRUE);
  }
  else {
    $startDate = date('D', $start) . ' ' . _mc_api_get_formatted_time($start, TRUE) . ' ';
    $endDate = ' ' . date('D', $end) . ' ' . _mc_api_get_formatted_time($end, TRUE);
  }


  return $prefix_start . $startDate . $prefix_end . $endDate;
  
}


/**
 * Return the a image with the html format.
 */
function _mc_api_get_image_tag($image, $preset, $title){
  $picture = imagecache_create_url($preset, $image);
  $picture = '<img src="' . $picture . '" alt="' . $title . '" title="' . $title . '" />';
  return $picture;
}


/**
 * Helper function to grt the vid from a Vocabulary Machine Name.
 * @param Vocabulary machine name
 *        
 * @return string
 */
function _mc_api_get_vid_from_name($name){
  $vid = db_result(db_query("SELECT vid FROM {vocabulary} v WHERE v.module = '%s'", $name));
  return $vid;
}

function _mc_api_format_location($location){
  $location_output = $location['name'];
  if(!empty($location['street']) && !empty($location['city']) && !empty($location['province']) && !empty($location['postal_code'])){
    $location_output .= ' (';
    $location_output .= !empty($location['street'])? $location['street'] :'';
    $location_output .= (!empty($location['street']) && (!empty($location['city']) || !empty($location['province']) || !empty($location['postal_code'])))? ', ' : '';
    $location_output .= !empty($location['city'])? $location['city'] :'';
    $location_output .= (!empty($location['city']) && (!empty($location['province']) || !empty($location['postal_code'])))? ', ' : '';
    $location_output .= !empty($location['province'])? $location['province'] :'';
    $location_output .= (!empty($location['province']) && !empty($location['postal_code']))? ', ' : '';
    $location_output .= !empty($location['postal_code'])? $location['postal_code'] :'';
    $location_output .= ')';
  }
  return $location_output;
}

function _mc_api_format_twitter($input){
  $input = trim($input);
  $output = '';
  if(empty($input)){
    return $output;
  }
  elseif(preg_match('/^http:\/\/www\.twitter\.com\//i', $input)){
    $username = preg_replace('/^http:\/\/www\.twitter\.com\//i', '', $input);
  }
  elseif(preg_match('/^http:\/\/twitter\.com\//i', $input)){
    $username = preg_replace('/^http:\/\/twitter\.com\//i', '', $input);
  }
  elseif(preg_match('/^@/i', $input)){
    $username = preg_replace('/^@/i', '', $input);
  }
  else{
    $username = $input;
  }
  $output = '<a href="http://www.twitter.com/' . $username  . '" target="_blank">' . $username . '</a>';
  return $output;
}

function _mc_api_format_facebook($input){
  $input = trim($input);
  $output = '';
  if(empty($input)){
    return $output;
  }
  elseif(preg_match('/^(http|https):\/\/www\.facebook\.com\//i', $input)){
    $username = preg_replace('/^(http|https):\/\/www\.facebook\.com\//i', '', $input);
  }
  elseif(preg_match('/^http:\/\/facebook\.com\//i', $input)){
    $username = preg_replace('/^http:\/\/facebook\.com\//i', '', $input);
  }
  elseif(preg_match('/^www\.facebook\.com\//i', $input)){
    $username = preg_replace('/^www\.facebook\.com\//i', '', $input);
  }
  elseif(preg_match('/^(www\.|)facebook\.com\//i', $input)){
    $username = preg_replace('/^(www\.|)facebook\.com\//i', '', $input);
  }
  else{
    $username = $input;
  }
  $output = '<a href="http://www.facebook.com/' . $username  . '" target="_blank">' . $username . '</a>';
  return $output;
}