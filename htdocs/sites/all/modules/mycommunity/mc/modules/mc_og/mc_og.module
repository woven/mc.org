<?php

require_once ( dirname(__FILE__) . '/mc_og.inc');

function mc_og_form_alter(&$form, &$form_state, $form_id) {
  // Add audience selection to node forms
  if (isset($form['#node']) && $form_id == $form['#node']->type .'_node_form') {
    $node = $form['#node'];
    if (og_is_group_post_type($node->type)) {
      _mc_og_form_add_og_audience($form, $form_state);
    }
  }
}

function og_post_visibility($node){
  $is_public = $node->og_public;

  if(!empty($node->og_access_roles)){
    $is_auth = array_search('2',$node->og_access_roles);
  }else{
    $is_auth = FALSE;
  }

  if(!($is_auth === FALSE)){
    $is_auth = 1;
  }else{
    $is_auth = 0;
  }

  if($is_public){
    return 0;
  }else{
    if($is_auth){
      return 2;
    }
    return 1;
  }

}

function mc_og_nodeapi(&$node, $op, $teaser = NULL, $page = NULL) {
  global $user;
  if (!og_is_group_post_type($node->type)) {
    return;
  }

  switch($op){
    case 'load':
      $node->og_post_visibility = og_post_visibility($node);
      break;
  }

}


function _mc_og_post_visibility_validate($form, &$form_state) {
  $form_post_visibility = $form_state['values']['og_post_visibility'];
  $og = &$form['og_nodeapi'];

  switch($form_post_visibility){
    case 0; //public
      form_set_value($og['visible']['og_public'], 1, $form_state);
      form_set_value($og['og_access_roles'], array(), $form_state);
    break;
    case 1; //private
      form_set_value($og['visible']['og_public'], 0, $form_state);
      form_set_value($og['og_access_roles'], array(), $form_state);
    break;
    case 2; //semi-private
      form_set_value($og['visible']['og_public'], 0, $form_state);
      form_set_value($og['og_access_roles'], array(2), $form_state);
    break;
  }
}

function mc_og_late_form_alter(&$form, &$form_state, $form_id) {

  if (isset($form['#node']) && $form_id == $form['#node']->type .'_node_form' && og_is_group_post_type($form['#node']->type)) {
    $og = &$form['og_nodeapi'];
    $og_visible = &$og['visible'];

    $og_groups = $og_visible['og_groups'];

    if(!(isset($og_groups['#options']) && !empty($og_groups['#options']))){
      $l = l("browse available groups","groups");
      drupal_set_message("Woops, you must be a member of a group first. Please $l.");
      drupal_goto('<front>');
    }

  }

  //post visibility
  if (isset($form['#node']) && $form_id == $form['#node']->type .'_node_form' && og_is_group_post_type($form['#node']->type)) {

    $node = $form['#node'];

    array_unshift($form['#validate'],'_mc_og_post_visibility_validate');

    $og = &$form['og_nodeapi'];
    $og_visible = &$og['visible'];

    $og_visible['og_post_visibility'] = array(
        '#type' => 'select',
        '#title' => t('Post Visibility'),
        '#options' => array(
          '1' => 'Private -- only group members can see',
          '0' => 'Public -- anyone can see',
          '2' => 'Community -- anyone in the community can see'
        ),
        '#default_value' => ($node->og_post_visibility) ? $node->og_post_visibility : 0
    );

    $og_visible['og_public']['#prefix'] = '<div style="display:none;">';
    $og_visible['og_public']['#suffix'] = '</div>';


    $og['og_access_roles']['#prefix'] = '<div style="display:none;">';
    $og['og_access_roles']['#suffix'] = '</div>';

    //force discussions forms to be always public
    if($node->type == "forum"){
      unset($og_visible['og_post_visibility']);
      $og_visible['og_public']['#default_value'] = 1;
    }
  }

}

function mc_og_perm(){
  return array('post to all the groups');
}

function mc_og_follow_group_form(&$form_state) {
  global $user;
  $user = user_load(array('name' => $user->name));
  $group = og_get_group_context();
  $form['gid'] =  array(
    '#type' => 'hidden',
    '#value' => $group->nid,
  );
  $form['#attributes'] = array('class' => 'follow-block subscribe');
  $sql = 'SELECT COUNT(*) FROM og_uid ou INNER JOIN users u ON ou.uid = u.uid WHERE ou.nid = %d AND u.status > 0 AND ou.is_active >= 1 AND ou.is_admin >= 0';
  $count = db_result( db_query($sql, $group->nid) );
  $form['count'] =  array(
    '#type' => 'hidden',
    '#value' => $count,
  );
  if($user->uid!='0'){
    if (!og_is_group_member($group->nid, FALSE) && (!$_SESSION['anonymous_must_follow'] && !$_SESSION['anonymous_group']  )){
      $form['follow_button'] = array(
        '#prefix' => '<div id="group-follow">',
        '#type' => 'submit',
        '#value' => t('Follow'),
        '#weight' => 0,
        '#submit' => array('mc_og_follow_group_form_submit'), // If no javascript action.
        '#ahah' => array(
          'path' => 'mc/group/follow/js',
          'wrapper' => 'group-follow',
          'method' => 'replace',
          'effect' => 'fade',
        ),
        '#attributes' => array(
          'class' => 'button'
        ),
      );
      $output_follow = '';
      $output_follow .= '<p id="text-follow">Follow us to show your support, get updates and contribute.</p>';
      $output_follow .= '<p class="member-count">' . $count /* l($count, "og/users/$group->nid/faces") */ . ' following</p>';
      $form['users-following'] = array(
        '#type' => 'markup',
        '#value' => $output_follow,
        '#weight' => '10',
        '#suffix' => '</div>',
      );
    }
    else {
      $output = _mc_og_following_text($group->nid, $count, $user);
      $form['unfollow'] = array(
        '#type' => 'markup',
        '#value' => $output,
      );
      if($_SESSION['anonymous_must_follow'] || $_SESSION['anonymous_group']){
        unset($_SESSION['anonymous_must_follow']);
        unset($_SESSION['anonymous_group']);
      }
    }
  }
  else {
    $output_anonymous = '<a href="#" class="button" id="anonymous-follow">Follow</a>';
    $output_anonymous .= '<p id="text-follow">Follow us to show your support, get updates and contribute.</p>';
    $output_anonymous .= '<p class="member-count">' . $count /* l($count, "og/users/$group->nid/faces") */ . ' following</p>';
    $form['follow-button-anonymous'] = array(
      '#type' => 'markup',
      '#value' => $output_anonymous,
    );
  }
  return $form;
}

function _mc_og_following_text($gid, $count, $user){
  $count--;
  $output = '';
  if($count==0){
    $output =  '<p class="member-count">You are following this group.</p>';
  }
  else {
    $output =  '<p class="member-count">You and ' . $count /*l($count, "og/users/$gid/faces")*/ . ' more people are following this group.</p>';
  }
  $output .= l(t('Unfollow'), "og/unsubscribe/$gid/$user->uid", array('attributes' => array('rel' => 'nofollow'), 'query' => 'destination=' . urlencode('node/' . $gid ) ));
  return $output;
}

function mc_og_follow_group_form_submit(&$form, &$form_state) {
  $group = $form_state['values']['gid'];
  follow_group($group);
}

function mc_og_follow_group_js(){
  global $user;
  $form_state = array('storage' => NULL, 'submitted' => FALSE);
  $form_build_id = $_POST['form_build_id'];
  // Get the form from the cache.
  $form = form_get_cache($form_build_id, $form_state);
  $args = $form['#parameters'];
  $form_id = array_shift($args);
  // We will run some of the submit handlers so we need to disable redirecting.
  $form['#redirect'] = FALSE;
  // We need to process the form, prepare for that by setting a few internals
  // variables.
  $form['#post'] = $_POST;
  $form['#programmed'] = FALSE;
  $form_state['post'] = $_POST;
  // Build, validate and if possible, submit the form.
  drupal_process_form($form_id, $form, $form_state);
  // This call recreates the form relying solely on the form_state that the
  // drupal_process_form set up.
  $gid = $form_state['values']['gid'];
  $count = $form_state['values']['count'] + 1;
  $form = drupal_rebuild_form($form_id, $form_state, $args, $form_build_id);
  // Render the new output.
  $output_unfollow = _mc_og_following_text($gid, $count, $user);
  $new_form['unfollow'] = array(
    '#type' => 'markup',
    '#value' => $output_unfollow,
    '#weight' => 0,
  );
  $output = theme('status_messages') . drupal_render($new_form);

  drupal_json(array('status' => TRUE, 'data' => $output));
}

function mc_og_menu(){
  $items['mc/group/follow/js'] = array(
    'title' => 'Javascript Follow Group',
    'page callback' => 'mc_og_follow_group_js',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
}