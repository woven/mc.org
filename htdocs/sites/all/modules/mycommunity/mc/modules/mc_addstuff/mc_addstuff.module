<?php



function mc_addstuff_block($op = 'list', $delta = 0, $edit = array()) {
    
  if ($op == 'list') {
    
    $blocks[0] = array(
      'info' => t('Add Stuff block'), 
      'weight' => 0, 
      'status' => 1,
      'cache' => BLOCK_CACHE_PER_ROLE | BLOCK_CACHE_PER_PAGE
    );
    return $blocks;
    
  }else if ($op == 'view') {
    switch ($delta) {
      case 0:
        $block = array(
          'subject' => '', 
          'content' => mc_addstuff_display_block_add_stuff(),
	  'cache' => BLOCK_CACHE_PER_ROLE
        );
        break;
    }
    return $block;
  }
  
}



/**
 * Block content callback. Retrieves the list of content types that are group posts and display them in a group.
 */
function mc_addstuff_display_block_add_stuff(){
  global $user;
  
  // check if og is configured properly
  $is_configured = count(og_get_types('group')) && count(og_get_types('group_post'));

  if (!$is_configured) {
    form_set_error('content_types_table', t('You must designate at least one content type to act as a group node and another as a group post. <a href="!create">Create new content type</a> if needed.', array('!create' => url('admin/content/types/add', array('query' => drupal_get_destination())))));
  }
  
  $map = og_types_map();
  
  $rows = array();

  
  // if in a node page, load node
  $node = NULL;
  if (arg(0) == 'node' && is_numeric(arg(1))){
    $node = node_load(arg(1));
  }

  $types = array();
  $result = db_query('SELECT * FROM node_type ORDER BY weight');
  while ($row = db_fetch_object($result)) {
    $types[] = $row;
  }
  //dsm($add_stuff_types);
  //dsm(node_get_types('types'));


  foreach ($types as $type) {
    $type_url_str = str_replace('_', '-', $type->type);
    $usage = variable_get('og_content_type_usage_'. $type->type, 'omitted');
    
    $addLink = FALSE;
    $addLinkDestination = FALSE;
    $addLinkOptions = array();
    
    // Check if we should add to a group
    $group = og_get_group_context();
    if ($group == NULL){
      if (arg(0) == 'node' && is_numeric(arg(1))){
        $group = og_determine_context_get_group(node_load(arg(1)));
      }elseif (arg(0) == 'node' && arg(1) == 'add' && is_numeric(arg(3))){
        $group = og_determine_context_get_group(node_load(arg(3)));
      }
    }
    
    // Anonymous, will see add stuff containing links to the register page
    if (!$user->uid){
      if(user_access('add stuff ' . $type->type )){
        // show them only the types that can be posted in a group (except page and album)
        
          //$addLink = 'user/register';
          $addLink = "node/add/$type_url_str";
          $addLinkOptions['query']['type'] = $type_url_str;
          if (is_object($group)){
            $addLinkDestination = "node/add/$type_url_str/" . $group->nid;
          }else{
            $addLinkDestination = "node/add/$type_url_str";
          }
          if ($type->type != 'gallery_image'){
            $addLinkOptions['query']['destination'] = $addLinkDestination;
            //$addLinkOptions['query']['destination'] = $_GET['destination'];
          } 
          $addLinkOptions['query']['message'] = 'register-first';  
        
      }
    
    // check if the user has permissions to create this type of node
    }elseif (user_access("create " . $type->type . " content") || ($type->type=='forum' && user_access("create forum topics"))){
      if(user_access('add stuff ' . $type->type )){
      // TODO: Fix this hack, it's really ugly 
      // Since we are using nodereference_url alread for the gallery-image type, 
      // we need to find a way for the user to choose the gallery, so we redirect
      // them to the galleries page, and just display a messsage with instructions
      if ($type->type == 'gallery_image'){
      
        if ($node && $node->type == 'gallery'){
          $addLink = "node/add/$type_url_str/" . $node->nid;
        }elseif ($node && $node->type == 'gallery_image'){
          $addLink = "node/add/$type_url_str/" . $node->field_gallery[0]['nid'];
        }else{
          
          if($usage == 'group_post_standard' && is_object($group)){
            $addLink = $group->path . '/photos';
          }else{
            $addLink = $_GET['q'];
          }
                    
          $addLinkOptions['query']['message'] = 'choose-gallery';
            
        }
      
      }else{
        
        if($usage == 'group_post_standard' && is_object($group)){
          $addLink = "node/add/$type_url_str/" . $group->nid;
        }else{
          $addLink = "node/add/$type_url_str";
        }
        
        
      }
    }
      
    // No anonymous, no permissions, continue with next content type
    }else{
      continue;
    }
    
    if ($addLink){
      
      $rows[$type->name] = array(
        'title' => '<span class="ico-add-stuff ico-'. $type->type .'" ></span><span class="add-stuff-name">' . $type->name . '</span>',
        'html' => true,
        'href' => $addLink,
      );
      if (!empty($addLinkOptions)){
        $rows[$type->name] += $addLinkOptions;
      }
    }
  }

  $output = theme('links', $rows);
  return $output;

}

function mc_addstuff_init(){
  $message = $_GET['message'];
  if ($message == 'choose-gallery'){
    drupal_set_message(t('To add a photo, please first find an album and then try again. We try to keep things organized around here!'), 'strong-status');
  }elseif ($message == 'register-first'){
    $login_link = l(t('sign in'), 'user/login', array( 'query' => array('destination' => $_GET['destination']) ) );
    $join_link = l(t('join now'), 'user/register', array( 'query' => array('destination' => $_GET['destination']) ) );
    drupal_set_message(t("We're just thrilled that you'd like to add stuff, but please first $login_link or join now below."), 'strong-status');
  }
}

function _mc_addstuff_sort_by_name($a, $b) {
  if ($a->name == $b->name) {
    return 0;
  } else {
    return $a->name < $b->name ? -1 : 1;
  }
}


/**
 * Implementation of hook_boot()
 */
function mc_addstuff_boot(){
  global $user;
  
  if ($user->uid != 0 && isset($_GET['message']) && $_GET['message']=='register-first'){
    unset($_GET['message']);
  }
  if(isset($_GET['q'])){
    $arg = explode('/', $_GET['q']);
    if((!isset($user->uid) || $user->uid=='0') && $arg[0]=='node' && $arg[1]=='add' ){
      if (isset($_GET['type'])){
        if ($_GET['message']=='register-first'){
          header('Location: http://' .$_SERVER['HTTP_HOST'] .'/user/register?type=' . $_GET['type'] . '&message=register-first');
        }else{
          header('Location: http://' .$_SERVER['HTTP_HOST'] .'/user/register?type=' . $_GET['type']);
        }
      }else{
        header('Location: http://' .$_SERVER['HTTP_HOST'] .'/user/register?message=register-first');
      }
      exit();
    }
  }
}
 

function mc_addstuff_perm(){
  $perms = array();
  $types = node_get_types();
  foreach ($types as $type) {
    $perms[] = 'add stuff ' . $type->type;
  }
  return $perms;
}

function mc_addstuff_menu(){
  $items = array();
  $items['admin/settings/mcaddstuff'] = array(
    'title' => 'MC Add Stuff Block',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mc_addstuff_order_form'),
    'access arguments' => array('administer nodes'),
  );
  return $items;
}

function mc_addstuff_order_form(){
  $form = array('#tree' => TRUE);
  $types = node_get_types('types');
  foreach($types as $type){
    $weight = db_result(db_query("SELECT weight FROM node_type WHERE type='$type->type'"));
    $form[$type->type] = array(
      'name' => array('#value' => check_plain($type->name)),
      'weight' => array('#type' => 'weight', '#delta' => 10, '#default_value' => $weight),
      '#weight' => $weight,
    );
  }
  if (count($types) > 1) {
    $form['submit'] = array('#type' => 'submit', '#value' => t('Save'));
  }
  elseif (isset($type)) {
    unset($form[$type->type]['weight']);
  }
  return $form;
}

function theme_mc_addstuff_order_form($form) {
  $rows = array();
  foreach (element_children($form) as $key) {
    if (isset($form[$key]['name'])) {
      $type = &$form[$key];

      $row = array();
      $row[] = drupal_render($type['name']);
      if (isset($type['weight'])) {
        $type['weight']['#attributes']['class'] = 'mc_addstuff-weight';
        $row[] = drupal_render($type['weight']);
      }
      $rows[] = array('data' => $row, 'class' => 'draggable');
    }
  }
  if (empty($rows)) {
    $rows[] = array(array('data' => t('No content types available.'), 'colspan' => '5'));
  }

  $header = array(t('Name'));
  if (isset($form['submit'])) {
    $header[] = t('Weight');
    drupal_add_tabledrag('mc_addstuff', 'order', 'sibling', 'mc_addstuff-weight');
  }
  return theme('table', $header, $rows, array('id' => 'mc_addstuff')) . drupal_render($form);
}

function mc_addstuff_theme(){
  return array(
    'mc_addstuff_order_form' => array(
      'arguments' => array('form' => array()),
    ),
  );
}

function mc_addstuff_order_form_submit($form, &$form_state) {
  foreach ($form_state['values'] as $type_name => $attributes) {
    if(is_array($attributes) && isset($attributes['weight'])){
      db_query('UPDATE node_type SET weight='. $attributes['weight'] . " WHERE type='" . $type_name . "'");
    }
  }
}

