<?php

function mc_ui_init(){
  $path = drupal_get_path('module', 'mc_ui');
  drupal_add_js($path .'/js/mc_ui.js', 'module', 'header', FALSE, TRUE, FALSE);
}

function mc_ui_formatter_info() {
  return array(
    'post_date' => array(
      'label' => t('MC: Post date'),
      'field types' => array('date', 'datestamp', 'datetime'),
      'multiple values' => CONTENT_HANDLE_CORE
    )
  );

  return $formatters;
}

function theme_mc_ui_formatter_post_date($element){
  dsm($element);
}

/**
 * Implementation of hook_theme
 */
function mc_ui_theme($existing, $type, $theme, $path){
	  return array(
	  	'ghh_user_picture' => array('variables' => array('uid' => NULL,'imagecache' => null, 'imageComment' => TRUE)),
	  	'ghh_article_thumbnail' => array('variables' => array('img' => NULL,'imagecache' => null)),
        'ghh_browse_menu' => array('variables' => array('mid' => NULL)),
        'ghh_see_all' => array('title' => null, 'url' => null,'icon' => null),
        'ghh_post_date' => array('variables' => array('date' => NULL)),
        'ghh_authoring_info' => array('variables' => array('uid' => NULL, 'uname' => NULL,'gnid' => NULL, 'gtitle' => NULL, 'picture' => NULL)),
        'ghh_node_categories' => array('variables' => array('nid' => NULL, 'vocabulary_id' => NULL)),
        'mc_post_date' => array('variables' => array('ts' => NULL)),
        'mc_ui_formatter_post_date' => array(
          'arguments' => array('element' => NULL),
        )
      );
}

function mc_ui_preprocess_block(&$vars){
  if($vars['block']->module=='menu' && (
    $vars['block']->delta=='secondary-links' || $vars['block']->delta=='menu-footer-links' || $vars['block']->delta=='menu-categories'
    )){
    $vars['block']->subject = '';
  }
}

/**
 * Implementation of theme_ghh_see_all area
 */
 
function theme_ghh_see_all($title,$url,$icon = "ico-small ico-see-all"){
    $icon = '<span class="'.$icon.'">';
    $title = "<span>$title</span>$icon</span>";
    return '<div class="see-all">' . l($title, $url, array('html' => TRUE)).'</div>';
}

/**
 * Implementation of theme_ghh_user_picture
 */
function theme_ghh_user_picture($uid = NULL,$imagecache, $imageComment = TRUE){
    if($uid == NULL){
        global $user;
    }else{
        $user = user_load($uid);        
    }
    
    $picture = $user->picture;
    
    if(!$picture){
      //Bring Facebook Picture profile if the user has associated the accounts.
      if(function_exists('_fbconnect_get_user_fbuid') && _fbconnect_get_user_fbuid($user->uid) == fbconnect_get_fbuid()){
                 
       $pictureUrl = "https://graph.facebook.com/" . fbconnect_get_fbuid() . "/picture?type=large";
       $image=_mc_api_save_facebook_user_image($pictureUrl, "fb-" . fbconnect_get_fbuid() . '.jpg' );
       $user->picture = $image['filepath'];
       $update['picture'] = $image['filepath'];
       user_save($user, $update);
       $picture = $user->picture;
        
      }else{
        $picture = drupal_get_path('module', 'ft_account') . "/pic-user-default-avatar.jpg";
      }
    }
    
    $picture = imagecache_create_url($imagecache, $picture);
    $picture = '<img src="' . $picture . '" alt="' . $user->name . '" title="' . $user->name . '" />';
    
    $output .= "<div class=\"image\">";
    $output .= l($picture, 'user/' . $user->uid, array('html' => TRUE));
    if ($imageComment){
      $output .= "<span class=\"image-comment\"></span>";
    }
    $output .= "</div>";
    
    return $output;
}

/**
 * Implementation of theme_ghh_article_thumbnail
 */
function theme_ghh_article_thumbnail($img = NULL,$imagecache){
      
    if (!$img){
      $img = drupal_get_path('module', 'mc') . '/mc_default_images' . '/generic.png';
      $img = imagecache_create_url($imagecache, $img);
      $img = '<img src="' . $img . '" />';
    }
    return $img;
}

/**
 * Implementation of theme_ghh_browse_menu
 */

function theme_ghh_browse_menu($mid){
    return '<div class="ghh-menu-items">'.theme('links', menu_navigation_links($mid)).'</div>';
}

/**
 * Implementation of theme_ghh_post_date
 * theme_mc_post_date
 */
function theme_ghh_post_date($date){
  return theme_mc_post_date($date);
}

function theme_mc_post_date($ts){
  $output = '';
  $today = strtotime("today 12am");
  $now = time();
  $oneWeekAgo = $today - 24*3600*7;
  $twoWeekAgo = $today - 24*3600*7*2;
  $difference = $now - $ts;

  $thisweek = _mc_date_weekyear_firstday(_mc_date_calender_weekyear(strtotime("today 12am",$today)));
  $lastweek = _mc_date_weekyear_firstday(_mc_date_calender_weekyear(strtotime("-1 week 12am",$today)));

  $tsday = format_date($ts,'custom','l');
  $nowday = format_date($today,'custom','l');
  $tsdaynum = format_date($ts,'custom','w');
  $todaydaynum = format_date($today,'custom','w');

  $yesterday = strtotime("yesterday 12am");
  $tomorrow = strtotime("tomorrow 12am");
  $tsyesterday = strtotime("today",$ts);

  $tsyear = intval(format_date($ts,'custom',"Y"));
  $nowyear = intval(format_date($today,'custom',"Y"));

  /*
  if ($difference < 600){
    $output = t("moments ago");
  }elseif($difference < 3600){
    $mins = intval(floor($difference / 60)); 
    $output = "$mins minutes ago";
  }elseif($difference < 3600*24){
    $hours = intval(floor($difference / 3600));
    if ($hours == 1){
      $output = "$hours hour ago";
    }else{
      $output = "$hours hours ago";
    }*/
  if(strtotime("today 12am",$ts) == $today){
    $output = "Today";
  }elseif(strtotime("today 12am",$ts) == $yesterday){
    $output = "Yesterday";
  }elseif($ts > $thisweek){
    $output = format_date($ts,'custom','l');
  }elseif($ts >= $lastweek AND $ts < $thisweek){
    $days = intval(floor($difference / 86400));
    if($todaydaynum >= $tsdaynum){
      $output = format_date($ts,'custom','l jS');
    }else{
      $output = format_date($ts,'custom','l');
    }
  }elseif ($tsyear != $nowyear){ //if now is not the same year of input ts, include year
    $output = format_date($ts,'custom','l, F jS, Y');
  }else{
    $output = format_date($ts,'custom','l, F jS');
  }
  return ($output);
}

function theme_ghh_authoring_info($uid, $uname, $gnid = 0, $gtitle = '', $picture = NULL){
  $output = '';
  if ($gnid){
    $output = t('from ') . l($gtitle, 'node/' . $gnid);
  }else{
    $output = t('by ');
    if ($uid){
      $pictureTag = '';
      if ($picture){
        $pictureTag = _mc_api_get_image_tag($picture, 'header_mini_avatar', $uname);
      }
      $output .= l($pictureTag . $uname, 'user/' . $uid, array('attributes' => array('class' => 'username'), 'html' => TRUE));
    }else{
      $output .= t('Anonymous');
    }
  }
  return $output;
}

function theme_ghh_node_categories($nid, $vocabulary_id = null){
  if($vocabulary_id==null){
    $vocabulary_id = db_result(db_query("SELECT vid FROM vocabulary WHERE name='Topic' LIMIT 1"));
  }
  $output = '';
  $node = node_load($nid);
  $terms = taxonomy_node_get_terms($node);
  $termsCount = 0;
  
  foreach ($terms as $term){
    if ($term->vid == $vocabulary_id){
      $termsCount++;
      if ($termsCount == 1){
        $output .= ' in ';
      }
      $output .= l($term->name, 'latest/category/' . $term->tid, array('attributes' => array('class' => 'term-' . $term->tid)));
      $output .= ', ';
    }
  }
  if ($termsCount > 0){
    // remove trailing slash
    $output = substr($output, 0, -2);
  }
  return $output;
}


function mc_ui_theme_registry_alter(&$theme_registry) {
  $theme_registry['box']['function']='_mc_ui_box_theme';
  
}

function _mc_ui_box_theme($title, $content, $region = 'main') {
  if(function_exists('_ft_comment_box_theme')){
    _ft_comment_box_theme($title, $content, $region);
  }

  if(function_exists('_ft_discussion_box_theme')){
    _ft_discussion_box_theme($title, $content, $region);
  }

  if(empty($content)){
    return;
  }
  
  return theme_box($title, $content, $region);
}
