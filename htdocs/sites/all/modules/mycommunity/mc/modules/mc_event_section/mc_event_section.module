<?php

function _mc_event_section_all($flag = null){
  $content = array();

  _mc_event_section_next_two_weeks($content,$flag);
  _mc_event_section_after_two_weeks($content,$flag);

  if(count($content)){
    print implode("\n",$content);
    $path = drupal_get_path('module', 'mc_event_section');
    drupal_add_js($path .'/js/mc_event_section.js', 'module', 'header', FALSE, TRUE, FALSE);
  }else{
    if($flag){
      print "Nothing to show here. Star some upcoming events and they'll show here.";
    }else{
      print "Wow, it's quiet around here.  Want to <a href='/node/add/event'>add an event</a> or <a href='/node/add/event-feed'>import an event feed</a>?";
    }
  }
}

function _mc_event_section_next_two_weeks(&$content,$flag = null){
  global $user;

  $today = mktime(0, 0, 0);
  $now = time();
  $tomorrow = $today + 24 * 3600;
  $afterTomorrow = $tomorrow + 24 * 3600;
  $dayOfWeek = (int)date('w', $today);
  
  if ($dayOfWeek == 0){
    $thisSunday = $today;
  }else{
    $thisSunday = $today + (7 - $dayOfWeek) * 24 * 3600;
  }
  
  $nextSunday = $thisSunday + 7 * 24 * 3600;
  $minsago = $now - (60 * 30);

  if(!is_null($flag) && !empty($flag)){
    $flag_ob = flag_get_flag($flag);
    if(!is_null($flag_ob)){
      $fuid = $user->uid;
      $fid = $flag_ob->fid;
      $flag_join = 'JOIN flag_content AS flag ON flag.content_id = n.nid';
      $flag_where =  "AND (flag.uid = $fuid AND flag.fid = $fid)";
    }
  }

  $query = "SELECT n.nid, n.title, l.name AS 'location_name', e.unix_event_start, e.unix_event_end, MAKEDATE(YEAR(FROM_UNIXTIME(e.unix_event_start)),DAYOFYEAR(FROM_UNIXTIME(e.unix_event_start))) as 'Day',
      CASE 
          WHEN ((e.unix_event_start BETWEEN '%s' AND '%s') OR (e.unix_event_end BETWEEN '%s' AND '%s') OR (UNIX_TIMESTAMP(now()) BETWEEN e.unix_event_start AND e.unix_event_end))
          THEN 'Today'
          WHEN e.unix_event_start BETWEEN '%s' AND '%s'
          THEN 'Tomorrow'
          WHEN e.unix_event_start BETWEEN '%s' AND '%s'
          THEN 'This week'
          WHEN e.unix_event_start BETWEEN '%s' AND '%s'
          THEN 'Next week'

      ELSE 'Upcoming'
      END AS 'Section'
  FROM node as n 
  JOIN event as e on n.nid=e.nid
  JOIN location_instance AS li on n.nid=li.nid
  JOIN location AS l on li.lid=l.lid
  $flag_join
  WHERE n.status=1 AND ((e.unix_event_start between '%s' and '%s') OR (e.unix_event_end between '%s' and '%s')) $flag_where
  GROUP BY n.nid
  ORDER BY
    (CASE WHEN Section='Today' then 0
     WHEN Section='Tomorrow' then 1
     WHEN Section='This week' then 2
     WHEN Section='Next week' then 3
     WHEN Section='Upcoming' then 4
    ELSE Section
    END),
    (CASE WHEN (UNIX_TIMESTAMP(now()) - e.unix_event_start)<=0 THEN 1  WHEN (UNIX_TIMESTAMP(now()) - e.unix_event_start)>0 THEN 0 END) DESC,
    abs(UNIX_TIMESTAMP(now()) - e.unix_event_start),
    Day,
  rand()";
  
  if ($dayOfWeek == 0){
    $twoSundaysFromNow = $nextSunday + 7 * 24 * 3600;
    $result = db_query($query, $now, $tomorrow, $now, $tomorrow, $tomorrow, $afterTomorrow, $afterTomorrow, $nextSunday, $nextSunday, $twoSundaysFromNow, $now, $twoSundaysFromNow, $now, $twoSundaysFromNow);
  }
  else{
    $result = db_query($query, $now, $tomorrow, $now, $tomorrow, $tomorrow, $afterTomorrow, $afterTomorrow, $thisSunday, $thisSunday, $nextSunday, $now, $nextSunday, $now, $nextSunday);
  }

  $lists = array();
  $events = array();

  while ($row = db_fetch_object($result)) {
    if($row->Section=='Today'){
      $row->Day = date('Y-m-d');
    }
    $lists[$row->Section][$row->Day][] = $row->nid;
    $events[$row->nid]['title'] = $row->title;
    $events[$row->nid]['datetime'] = $row->unix_event_start;
    $events[$row->nid]['datetime_end'] = $row->unix_event_end;
    $events[$row->nid]['location_name'] = $row->location_name;
  }

  $new_list = array();
  $ignore_nids = array();

  foreach($lists as $section => $list_section){
    foreach($list_section as $day => $list_day){
      for($i=0; $i< count($list_day); $i++){
        if(!isset($ignore_nids[$list_day[$i]])){
          $main_nid = $list_day[$i];
          $new_list[$section][$day][$i][] = $main_nid;
          $ignore_nids[$main_nid] = $main_nid;
          $main_event = $events[$main_nid];
          $main_title_soundex = soundex($main_event['title']);
          $main_location_soundex = soundex($main_event['location_name']);
          for($j=$i; $j<count($list_day); $j++){
            if(!isset($ignore_nids[$list_day[$j]])){
              $checked_nid = $list_day[$j];
              $checked_event = $events[$checked_nid];

              if($main_event['datetime']==$checked_event['datetime'] && $main_event['datetime_end']==$checked_event['datetime_end'] ){
                $checked_title_soundex = soundex($checked_event['title']);
                $checked_location_soundex = soundex($checked_event['location_name']);

                similar_text($main_title_soundex, $checked_title_soundex, $percent_title);
                similar_text($main_location_soundex, $checked_location_soundex, $percent_location);

                $total_percent = 30;

                if($checked_event['title']!='Share and Learn'){
                  $total_percent += ($percent_title * 0.5);
                  $total_percent += ($percent_location * 0.2);
//                  if($percent_title>=50){
//                    $total_percent += 50;
//                  }
//
//                  if($percent_location>=50){
//                    $total_percent += 20;
//                  }
                }
                else{
                  if($percent_location>=50){
                    $total_percent += 40;
                  }
                }

                if($total_percent>=60){
                  $new_list[$section][$day][$i][] = $checked_nid;
                  $ignore_nids[$checked_nid] = $checked_nid;
                }
              }
            }
          }
        }
      }
    }
  }


  foreach($new_list as $key => $list){
    if(count($list)){
      $content[] = _mc_event_section_print_view($key, $list);
    }
  }


}

function _mc_event_section_print_view($key, $list){

  switch($key){
    case 'Today':
    case 'Tomorrow':
      $block = "block_5";
      break;
    case 'This week':
    case 'Next week':
      $block = "block_1";
      break;
    default:
      $block = "block_2";
  }
  $view_header = new stdClass();
  $view_header->current_display = $block;
  $view_header->display[$block]->display_title = $key;
  $head = '<div class="view"><div class="view-header">';
  $head .= theme("mc_event_view_header",$view_header);
  $head .= '</div></div>';
  $output = '';
  foreach ($list as $day => $dups) {
    $output .= _mc_event_section_print_day_view($day, $dups, $key, $block);
  }
  return $head . $output;
}

function _mc_event_section_print_day_view($day, $lists, $key, $block){

  if($key=='Today' || $key=='Tomorrow'){
    $head = '';
  }
  else {
    $date = strtotime($day);
    $head = '<div class="event-separator">';
    switch($key){
      case 'This week':
      case 'Next week':
        $head .= _mc_event_section_format_day($date);
        break;
      default:
        $head .= _mc_event_section_format_week($date);
    }
    $head .= '</div>';
  }

  $content = array();
  foreach($lists as $dup => $list){
    $content[] = _mc_event_section_print_duplicate_view($day, $list, $key, $block);
  }
  return $head . implode('',$content);
}

function _mc_event_section_print_duplicate_view($day, $list, $key, $block){
  $view = views_get_view('mc_events_by_dates');
  if (!$view || !$view->access($block)) {
    return;
  }
  if($key=='Today' || $key=='Tomorrow'){
    $view->hide_day = TRUE;
    if($key=='Today'){
      $view->day = 'today';
    }
  }
  $view_display =$view->preview($block, array(implode('+', $list)));
  return '<div class="duplicates">' . $view_display . '</div>';
}

function _mc_event_section_format_day($date){
  return date('l', $date);
}

function _mc_event_section_format_week($date){
  if(function_exists('_mc_date_calender_week')){
    $week = _mc_date_calender_week($date);
    $year = date('Y',$date);
    $firstdayts = _mc_date_week_firstday($week,$year);
    if($year > date('Y')){
      return "Week of ". date('F jS Y',$firstdayts);
    }else{
      return "Week of ". date('F jS',$firstdayts);
    }
  }
}

function _mc_event_section_after_two_weeks(&$content,$flag){
  global $user;

  $today = mktime(0, 0, 0);
  $now = time();
  $tomorrow = $today + 24 * 3600;
  $afterTomorrow = $tomorrow + 24 * 3600;
  $dayOfWeek = (int)date('w', $today);
  
  if ($dayOfWeek == 0){
    $thisSunday = $today;
  }else{
    $thisSunday = $today + (7 - $dayOfWeek) * 24 * 3600;
  }
  
  $nextSunday = $thisSunday + 7 * 24 * 3600;
  $minsago = $now - (60 * 30);


  if(!is_null($flag) && !empty($flag)){
    $flag_ob = flag_get_flag($flag);
    if(!is_null($flag_ob)){
      $fuid = $user->uid;
      $fid = $flag_ob->fid;
      $flag_join = 'JOIN flag_content AS flag ON flag.content_id = n.nid';
      $flag_where =  "AND (flag.uid = $fuid AND flag.fid = $fid)";
    }
  }

  $query = "SELECT n.nid, n.title, l.name AS 'location_name', e.unix_event_start, e.unix_event_end, MAKEDATE(YEAR(FROM_UNIXTIME(e.unix_event_start)),(7*(WEEKOFYEAR(FROM_UNIXTIME(e.unix_event_start)) -1)  + 1)) as 'Day',
      CASE 
          WHEN e.unix_event_start > '%s'
          THEN 'Upcoming'
      END AS 'Section'
  FROM node as n 
  JOIN event as e on n.nid=e.nid
  JOIN location_instance AS li on n.nid=li.nid
  JOIN location AS l on li.lid=l.lid
  $flag_join
  WHERE n.status=1 AND  e.unix_event_start > '%s' $flag_where
  GROUP BY n.nid
  ORDER BY (CASE WHEN (UNIX_TIMESTAMP(now()) - e.unix_event_start)<=0 THEN 1  WHEN (UNIX_TIMESTAMP(now()) - e.unix_event_start)>0 THEN 0 END) DESC,
    abs(UNIX_TIMESTAMP(now()) - e.unix_event_start),
    Day,
   (CASE WHEN Section='Today' then 0
   WHEN Section='Tomorrow' then 1
   WHEN Section='This week' then 2
   WHEN Section='Next week' then 3
   WHEN Section='Upcoming' then 4
  ELSE Section
  END),
  rand()";
  
  if ($dayOfWeek == 0){
    $twoSundaysFromNow = $nextSunday + 7 * 24 * 3600;
    $result = db_query($query, $twoSundaysFromNow, $twoSundaysFromNow);
  }
  else{
    $result = db_query($query, $nextSunday, $nextSunday);
  }

  $lists = array();
  $events = array();

  while ($row = db_fetch_object($result)) {
    $lists[$row->Section][$row->Day][] = $row->nid;
    $events[$row->nid]['title'] = $row->title;
    $events[$row->nid]['datetime'] = $row->unix_event_start;
    $events[$row->nid]['datetime_end'] = $row->unix_event_end;
    $events[$row->nid]['location_name'] = $row->location_name;
  }

  $new_list = array();
  $ignore_nids = array();

  foreach($lists as $section => $list_section){
    foreach($list_section as $day => $list_day){
      for($i=0; $i< count($list_day); $i++){
        if(!isset($ignore_nids[$list_day[$i]])){
          $main_nid = $list_day[$i];
          $new_list[$section][$day][$i][] = $main_nid;
          $ignore_nids[$main_nid] = $main_nid;
          $main_event = $events[$main_nid];
          $main_title_soundex = soundex($main_event['title']);
          $main_location_soundex = soundex($main_event['location_name']);
          for($j=$i; $j<count($list_day); $j++){
            if(!isset($ignore_nids[$list_day[$j]])){
              $checked_nid = $list_day[$j];
              $checked_event = $events[$checked_nid];

              if($main_event['datetime']==$checked_event['datetime'] && $main_event['datetime_end']==$checked_event['datetime_end'] ){
                $checked_title_soundex = soundex($checked_event['title']);
                $checked_location_soundex = soundex($checked_event['location_name']);

                similar_text($main_title_soundex, $checked_title_soundex, $percent_title);
                similar_text($main_location_soundex, $checked_location_soundex, $percent_location);

                $total_percent = 30;

                if($checked_event['title']!='Share and Learn'){
                  $total_percent += ($percent_title * 0.5);
                  $total_percent += ($percent_location * 0.2);
//                  if($percent_title>=50){
//                    $total_percent += 50;
//                  }
//
//                  if($percent_location>=50){
//                    $total_percent += 20;
//                  }
                }
                else{
                  if($percent_location>=50){
                    $total_percent += 40;
                  }
                }

                if($total_percent>=60){
                  $new_list[$section][$day][$i][] = $checked_nid;
                  $ignore_nids[$checked_nid] = $checked_nid;
                }
              }
            }
          }
        }
      }
    }
  }



  foreach($new_list as $key => $list){
    if(count($list)){
        $content[] = _mc_event_section_print_view($key, $list);
    }
  }

}

function _mc_event_section_formatted_location($location, $online){
  if(preg_match("/webinar/i", $location)){
    return $location;
  }
  elseif($online){
    return '<span class="location">' . 'Online Event' .'</span>';
  }
  else {
    if(!empty($location) || $location!=NULL){
      return 'at <span class="location">' . $location .'</span>';
    }
  }
  return;
}

function mc_event_section_views_query_alter(&$view, &$query) {
  if($view->current_display=='block_5' && $view->name=='mc_events_by_dates'){
    if(isset($view->day) && $view->day=='today'){
      $new_condition = '(CASE WHEN (UNIX_TIMESTAMP(now()) - event_unix_event_start)<=0 THEN 1  WHEN (UNIX_TIMESTAMP(now()) - event_unix_event_start)>0 THEN 0 END) DESC';
      $another_condition = 'abs(UNIX_TIMESTAMP(now()) - event_unix_event_start)';
      array_unshift($query->orderby, $new_condition);
      $query->orderby['0'] = $another_condition;
    }
  }
}