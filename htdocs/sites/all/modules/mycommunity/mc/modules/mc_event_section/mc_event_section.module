<?php

include_once('mc_event_section.features.inc');

/* OLD Code */
function _mc_event_section_all($flag = null){
  $content = array();

  _mc_event_section_next_two_weeks($content,$flag);
  _mc_event_section_after_two_weeks($content,$flag);

  if(count($content)){
    print implode("\n",$content);
    $path = drupal_get_path('module', 'mc_event_section');
    drupal_add_js($path .'/js/mc_event_section.js', 'module', 'header', FALSE, TRUE, FALSE);
  }else{
    if($flag){
      print "<div class=\"default-message\">Nothing to show here. Star some upcoming events and they'll show here.</div>";
    }else{
      print "Wow, it's quiet around here.  Want to <a href='/node/add/event'>add an event</a> or <a href='/node/add/event-feed'>import an event feed</a>?";
    }
  }
}

function mc_event_section_init(){
  global $user;

  //add javascript to all pages
  $path = drupal_get_path('module', 'mc_event_section');
  drupal_add_js($path .'/js/mc_event_section.js', 'module', 'header', FALSE, TRUE, FALSE);

  //js settings
  $settings = array();

  //add mc_event_section settings to drupal settings objects, array.
  if($user->uid > 0){
    $user_flag_ob = flag_get_flag('events_starred');
    $settings['has_stared'] = $user_flag_ob->is_flagged($user->uid);
    if (!$settings['has_stared']){
      $settings['has_stared_link'] = flag_create_link("events_starred",$user->uid);
    }
    $settings['msg_myevents_help'] = "Your starred events will appear here.<br/> <a href=\"#\" onclick=\"$('.ui-tooltip').hide();\">Ok, got it!</a>";
    $settings['msg_myevents_empty'] = "<p class='default-message'>Nothing to show here. Star some upcoming events and they'll show here.</p>";
  }else{
    $settings['msg_anonymous'] =  l('Sign in','user', array('attributes' => array('class' => "login","onclick"=>"openColorboxLogin();return false;"))) ." or ". l('join now','user/register',array('attributes' => array('class' => "join","onclick"=>"openColorboxJoin();return false;"))) . " to save events.";
    $settings['msg_anonymous_stuff'] =  l('Sign in','user', array('attributes' => array('class' => "login","onclick"=>"openColorboxLogin();return false;"))) ." or ". l('join now','user/register',array('attributes' => array('class' => "join","onclick"=>"openColorboxJoin();return false;"))) . " to promote or demote stuff.";
  }

  $settings['tooltip_show_deplay'] = 1250;
  $settings['tooltip_hide_inactive'] = 2000;

  drupal_add_js(array('mc_event_section' => $settings), 'setting');
}

/*
 * allow star to appear everywhere
 * Implantion of hook_flag_access_multiple
 * */
function mc_event_section_flag_access_multiple($flag, $content_ids, $account) {
  $access = array();
  if($flag->name == "events_bookmarks"){
    foreach($content_ids as $id => $op){
      $access[$id] = true;
    }
  }

  return $access;
}

function _mc_event_section_next_two_weeks(&$content,$flag = null){
  global $user;

  $today = mktime(0, 0, 0);
  $now = time();
  $tomorrow = $today + 24 * 3600;
  $afterTomorrow = $tomorrow + 24 * 3600;
  $dayOfWeek = (int)date('w', $today);
  
  if ($dayOfWeek == 0){
    $thisSunday = $today;
  }else{
    $thisSunday = $today + (7 - $dayOfWeek) * 24 * 3600;
  }
  
  $nextSunday = $thisSunday + 7 * 24 * 3600;
  $minsago = $now - (60 * 30);

  if(!is_null($flag) && !empty($flag)){
    $flag_ob = flag_get_flag($flag);
    if(!is_null($flag_ob)){
      $fuid = $user->uid;
      $fid = $flag_ob->fid;
      $flag_join = 'JOIN flag_content AS flag ON flag.content_id = n.nid';
      $flag_where =  "AND (flag.uid = $fuid AND flag.fid = $fid)";
    }
  }

  $query = "SELECT n.nid, n.title, l.name AS 'location_name', e.unix_event_start, e.unix_event_end, MAKEDATE(YEAR(FROM_UNIXTIME(e.unix_event_start)),DAYOFYEAR(FROM_UNIXTIME(e.unix_event_start))) as 'Day',
      CASE 
          WHEN ((e.unix_event_start BETWEEN '%s' AND '%s') OR (e.unix_event_end BETWEEN '%s' AND '%s') OR (UNIX_TIMESTAMP(now()) BETWEEN e.unix_event_start AND e.unix_event_end))
          THEN 'Today'
          WHEN e.unix_event_start BETWEEN '%s' AND '%s'
          THEN 'Tomorrow'
          WHEN e.unix_event_start BETWEEN '%s' AND '%s'
          THEN 'This week'
          WHEN e.unix_event_start BETWEEN '%s' AND '%s'
          THEN 'Next week'
      ELSE 'Upcoming'
      END AS 'Section'
  FROM node as n 
  JOIN event as e on n.nid=e.nid
  JOIN content_type_event AS cte ON n.nid=cte.nid
  LEFT JOIN location_instance AS li ON cte.field_place_nid=li.nid
  LEFT JOIN location AS l on li.lid=l.lid
  $flag_join
  WHERE n.status=1 AND ((e.unix_event_start between '%s' and '%s') OR (e.unix_event_end between '%s' and '%s')) $flag_where
  GROUP BY n.nid
  ORDER BY
    (CASE WHEN Section='Today' then 0
     WHEN Section='Tomorrow' then 1
     WHEN Section='This week' then 2
     WHEN Section='Next week' then 3
     WHEN Section='Upcoming' then 4
    ELSE Section
    END),
    (CASE WHEN (UNIX_TIMESTAMP(now()) - e.unix_event_start)<=0 THEN 1  WHEN (UNIX_TIMESTAMP(now()) - e.unix_event_start)>0 THEN 0 END) DESC,
    abs(UNIX_TIMESTAMP(now()) - e.unix_event_start),
    Day,
  rand()";
  
  if ($dayOfWeek == 0){
    $twoSundaysFromNow = $nextSunday + 7 * 24 * 3600;
    $result = db_query($query, $now, $tomorrow, $now, $tomorrow, $tomorrow, $afterTomorrow, $afterTomorrow, $nextSunday, $nextSunday, $twoSundaysFromNow, $now, $twoSundaysFromNow, $now, $twoSundaysFromNow);
  }else{
    $result = db_query($query, $now, $tomorrow, $now, $tomorrow, $tomorrow, $afterTomorrow, $afterTomorrow, $thisSunday, $thisSunday, $nextSunday, $now, $nextSunday, $now, $nextSunday);
  }

  $lists = array();
  $events = array();

  while ($row = db_fetch_object($result)) {
    if($row->Section=='Today'){
      $row->Day = date('Y-m-d');
    }
    $lists[$row->Section][$row->Day][] = $row->nid;
    $events[$row->nid]['title'] = $row->title;
    $events[$row->nid]['datetime'] = $row->unix_event_start;
    $events[$row->nid]['datetime_end'] = $row->unix_event_end;
    $events[$row->nid]['location_name'] = $row->location_name;
  }

  $new_list = array();
  $ignore_nids = array();

  foreach($lists as $section => $list_section){
    foreach($list_section as $day => $list_day){
      for($i=0; $i< count($list_day); $i++){
        if(!isset($ignore_nids[$list_day[$i]])){
          $main_nid = $list_day[$i];
          $new_list[$section][$day][$i][] = $main_nid;
          $ignore_nids[$main_nid] = $main_nid;
          $main_event = $events[$main_nid];
          $main_title_soundex = soundex($main_event['title']);
          $main_location_soundex = soundex($main_event['location_name']);
          for($j=$i; $j<count($list_day); $j++){
            if(!isset($ignore_nids[$list_day[$j]])){
              $checked_nid = $list_day[$j];
              $checked_event = $events[$checked_nid];

              if($main_event['datetime']==$checked_event['datetime'] && $main_event['datetime_end']==$checked_event['datetime_end'] ){
                $checked_title_soundex = soundex($checked_event['title']);
                $checked_location_soundex = soundex($checked_event['location_name']);

                similar_text($main_title_soundex, $checked_title_soundex, $percent_title);
                similar_text($main_location_soundex, $checked_location_soundex, $percent_location);

                $total_percent = 30;

                if($checked_event['title']!='Share and Learn'){
                  $total_percent += ($percent_title * 0.5);
                  $total_percent += ($percent_location * 0.2);
                }
                else{
                  if($percent_location>=50){
                    $total_percent += 40;
                  }
                }

                if($total_percent>=60){
                  $new_list[$section][$day][$i][] = $checked_nid;
                  $ignore_nids[$checked_nid] = $checked_nid;
                }
              }
            }
          }
        }
      }
    }
  }


  foreach($new_list as $key => $list){
    if(count($list)){
      $content[] = _mc_event_section_print_view($key, $list);
    }
  }


}

function _mc_event_section_print_view($key, $list){

  switch($key){
    case 'Today':
    case 'Tomorrow':
      $block = "block_5";
      break;
    case 'This week':
    case 'Next week':
      $block = "block_1";
      break;
    default:
      $block = "block_2";
  }
  $view_header = new stdClass();
  $view_header->current_display = $block;
  $view_header->display[$block]->display_title = $key;
  $head = '<div class="view"><div class="view-header">';
  $head .= theme("mc_event_view_header",$view_header);
  $head .= '</div></div>';
  $output = '';
  foreach ($list as $day => $dups) {
    $output .= _mc_event_section_print_day_view($day, $dups, $key, $block);
  }
  return $head . $output;
}

function _mc_event_section_print_day_view($day, $lists, $key, $block){

  if($key=='Today' || $key=='Tomorrow'){
    $head = '';
  }
  else {
    $date = strtotime($day);
    $head = '<div class="event-separator">';
    switch($key){
      case 'This week':
      case 'Next week':
        $head .= _mc_event_section_format_day($date);
        break;
      default:
        $head .= _mc_event_section_format_week($date);
    }
    $head .= '</div>';
  }

  $content = array();
  foreach($lists as $dup => $list){
    $content[] = _mc_event_section_print_duplicate_view($day, $list, $key, $block);
  }
  return $head . implode('',$content);
}

function _mc_event_section_print_duplicate_view($day, $list, $key, $block){
  $view = views_get_view('mc_events_by_dates');
  if (!$view || !$view->access($block)) {
    return;
  }
  if($key=='Today' || $key=='Tomorrow'){
    $view->hide_day = TRUE;
    if($key=='Today'){
      $view->day = 'today';
    }
  }
  $view_display =$view->preview($block, array(implode('+', $list)));
  return '<div class="duplicates">' . $view_display . '</div>';
}

function _mc_event_section_format_day($date){
  return date('l', $date);
}

function _mc_event_section_format_week($date){
  if(function_exists('_mc_date_calender_week')){
    $week = _mc_date_calender_week($date);
    $year = date('Y',$date);
    $firstdayts = _mc_date_week_firstday($week,$year);
    if($year > date('Y')){
      return "Week of ". date('F jS Y',$firstdayts);
    }else{
      return "Week of ". date('F jS',$firstdayts);
    }
  }
}

function _mc_event_section_after_two_weeks(&$content,$flag){
  global $user;

  $today = mktime(0, 0, 0);
  $now = time();
  $tomorrow = $today + 24 * 3600;
  $afterTomorrow = $tomorrow + 24 * 3600;
  $dayOfWeek = (int)date('w', $today);
  
  if ($dayOfWeek == 0){
    $thisSunday = $today;
  }else{
    $thisSunday = $today + (7 - $dayOfWeek) * 24 * 3600;
  }
  
  $nextSunday = $thisSunday + 7 * 24 * 3600;
  $minsago = $now - (60 * 30);


  if(!is_null($flag) && !empty($flag)){
    $flag_ob = flag_get_flag($flag);
    if(!is_null($flag_ob)){
      $fuid = $user->uid;
      $fid = $flag_ob->fid;
      $flag_join = 'JOIN flag_content AS flag ON flag.content_id = n.nid';
      $flag_where =  "AND (flag.uid = $fuid AND flag.fid = $fid)";
    }
  }

  $query = "SELECT n.nid, n.title, l.name AS 'location_name', e.unix_event_start, e.unix_event_end, MAKEDATE(YEAR(FROM_UNIXTIME(e.unix_event_start)),(7*(WEEKOFYEAR(FROM_UNIXTIME(e.unix_event_start)) -1)  + 1)) as 'Day',
      CASE 
          WHEN e.unix_event_start > '%s'
          THEN 'Upcoming'
      END AS 'Section'
  FROM node as n 
  JOIN event as e on n.nid=e.nid
  JOIN content_type_event AS cte ON n.nid=cte.nid
  LEFT JOIN location_instance AS li ON cte.field_place_nid=li.nid
  LEFT JOIN location AS l on li.lid=l.lid
  $flag_join
  WHERE n.status=1 AND  e.unix_event_start > '%s' $flag_where
  GROUP BY n.nid
  ORDER BY (CASE WHEN (UNIX_TIMESTAMP(now()) - e.unix_event_start)<=0 THEN 1  WHEN (UNIX_TIMESTAMP(now()) - e.unix_event_start)>0 THEN 0 END) DESC,
    abs(UNIX_TIMESTAMP(now()) - e.unix_event_start),
    Day,
   (CASE WHEN Section='Today' then 0
   WHEN Section='Tomorrow' then 1
   WHEN Section='This week' then 2
   WHEN Section='Next week' then 3
   WHEN Section='Upcoming' then 4
  ELSE Section
  END),
  rand()";



  if ($dayOfWeek == 0){
    $twoSundaysFromNow = $nextSunday + 7 * 24 * 3600;
    $result = db_query($query, $twoSundaysFromNow, $twoSundaysFromNow);
  }
  else{
    $result = db_query($query, $nextSunday, $nextSunday);
  }

  $lists = array();
  $events = array();

  while ($row = db_fetch_object($result)) {
    $lists[$row->Section][$row->Day][] = $row->nid;
    $events[$row->nid]['title'] = $row->title;
    $events[$row->nid]['datetime'] = $row->unix_event_start;
    $events[$row->nid]['datetime_end'] = $row->unix_event_end;
    $events[$row->nid]['location_name'] = $row->location_name;
  }

  $new_list = array();
  $ignore_nids = array();

  foreach($lists as $section => $list_section){
    foreach($list_section as $day => $list_day){
      for($i=0; $i< count($list_day); $i++){
        if(!isset($ignore_nids[$list_day[$i]])){
          $main_nid = $list_day[$i];
          $new_list[$section][$day][$i][] = $main_nid;
          $ignore_nids[$main_nid] = $main_nid;
          $main_event = $events[$main_nid];
          $main_title_soundex = soundex($main_event['title']);
          $main_location_soundex = soundex($main_event['location_name']);
          for($j=$i; $j<count($list_day); $j++){
            if(!isset($ignore_nids[$list_day[$j]])){
              $checked_nid = $list_day[$j];
              $checked_event = $events[$checked_nid];

              if($main_event['datetime']==$checked_event['datetime'] && $main_event['datetime_end']==$checked_event['datetime_end'] ){
                $checked_title_soundex = soundex($checked_event['title']);
                $checked_location_soundex = soundex($checked_event['location_name']);

                similar_text($main_title_soundex, $checked_title_soundex, $percent_title);
                similar_text($main_location_soundex, $checked_location_soundex, $percent_location);

                $total_percent = 30;

                if($checked_event['title']!='Share and Learn'){
                  $total_percent += ($percent_title * 0.5);
                  $total_percent += ($percent_location * 0.2);
//                  if($percent_title>=50){
//                    $total_percent += 50;
//                  }
//
//                  if($percent_location>=50){
//                    $total_percent += 20;
//                  }
                }
                else{
                  if($percent_location>=50){
                    $total_percent += 40;
                  }
                }

                if($total_percent>=60){
                  $new_list[$section][$day][$i][] = $checked_nid;
                  $ignore_nids[$checked_nid] = $checked_nid;
                }
              }
            }
          }
        }
      }
    }
  }



  foreach($new_list as $key => $list){
    if(count($list)){
        $content[] = _mc_event_section_print_view($key, $list);
    }
  }

}
/* Eend of Old Code */

function _mc_event_section_formatted_location($location, $online){

    if(preg_match("/webinar/i", $location['name'])){
        return $location['name'];
    }
    elseif($online){
        return '<span class="location">' . 'Online Event' .'</span>';
    }
    else {
        if(!empty($location) && !empty($location['name'])){
            return 'at <span class="location">' . $location['name'] .'</span>';
        }
    }
    return;
}

function _mc_event_section_print_location($lid){
    $location = location_load_location($lid);
    $node = new stdClass();
    $node->location = $location;
    $node->type = 'place';
    $field = array('object' => $node);
    print theme('nd_location_address', $field);
}

function _mc_event_section_print_location_hidden($location){

    if(empty($location)){
        return "";
    }

    $node = new stdClass();
    $node->location = $location;
    $node->type = 'place';
    $field = array('object' => $node);
    print "<div class=\"display-none\">" . theme('mc_nd_location_address', $field) . "</div";
}

/**
 * adds info array that has information about the current event record (object) that are used later on the misc code
 * @param $event
 * @return array
 */
function _mc_event_process_record_info($event){
    $info = array();

    $info['event'] = array(
        'nid' => $event->nid,
        'title' => $event->node_title,
        'place_name' => $event->location_name
    );

    $info['place'] = array(
        'nid' => $event->node_node_data_field_place_nid,
        'title' => $event->node_node_data_field_place__location_name
    );

    $info['object'] = array(
        'title' => $info['event']['title']
    );

    if($info['place']['nid'] && $info['place']['title']){
        $info['object']['location'] = $info['place']['title'];
    }else{
        $info['object']['location'] = $info['event']['place_name'];
    }

    //generate soundex for object
    $info['object_soundex'] = array();
    foreach($info['object'] as $key=>$val){
        $info['object_soundex'][$key] = soundex($val);
    }

    return $info;
}

/** check if two event records (objects) are duplicate (source is from views records ANd objects that has ->info array
 * ran through _mc_event_process_record_info
 * @param $event1
 * @param $event2
 * @return bool
 *
 * @see _mc_event_process_record_info()
 */
function _mc_event_is_duplicate($event1,$event2){
    if($event1->event_unix_event_start == $event2->event_unix_event_start && $event1->event_unix_event_end == $event2->event_unix_event_end){
        similar_text($event1->info['object_soundex']['title'], $event2->info['object_soundex']['title'], $percent_title);
        similar_text($event1->info['object_soundex']['location'], $event2->info['object_soundex']['location'], $percent_location);

        //percentage start at 30
        $total_percent = 30;

        //alter percentages
        $total_percent += ($percent_title * 0.5);
        $total_percent += ($percent_location * 0.2);

        if($total_percent>=60){ //if it matchs more than 60 percentage
            return true;
        }
    }

    return false;
}

/**
 * process records/views rows per day and finds the duplicates based on special logic (soundex)
 * @param $day
 * @return array
 */
function _mc_event_filter_day_dubs($day){
    $ignore_nids = array();
    $day_new = array();

    foreach($day as $key => $event){
        $day_res = array_reverse($day,true);

        //check for duplicates

        //to store dups of the current loop/event being checked $event
        $dups = array();

        //if the day has more than one event & current event is not ignored
        if(count($day) > 1 && !isset($ignore_nids[$event->nid])){
            foreach($day_res as $key_res => $event_res){

                //break the loop if current key is the same as checked key
                if($key_res == $key){
                    break 1;
                }

                //make sure that this node id should not be checked again.
                if(!isset($ignore_nids[$key_res])){
                    //check if it's duplicate with the current event
                    if(_mc_event_is_duplicate($event,$event_res)){
                        $dups[$event_res->nid] = $event_res; //add it to dups array
                        $ignore_nids[$event_res->nid] = $key_res; //add it to the ignore array
                    }
                }
            }
        }

        //if duplicates found, add the event to an array and merge it
        if(!empty($dups)){
            $dups_list = array($event->nid => $event);
            $dups_list += $dups;
            $day_new[$event->nid] = $dups_list; //add the current event and merge it with dups into a group
        }elseif(!isset($ignore_nids[$event->nid])){ //if no duplicates found, return the event object.
            $day_new[$event->nid] = $event;
        }
    }

    return $day_new;
}

/*
   @todo cache this data?
*/
function _mc_events_tokens(){
    $tokens = array();

    $tokens['!today'] = mktime(0, 0, 0);
    $tokens['!now'] = time();
    $tokens['!tomorrow'] = $tokens['!today'] + 24 * 3600;
    $tokens['!afterTomorrow'] = $tokens['!tomorrow'] + 24 * 3600;

    $dayOfWeek = (int)date('w', $tokens['!today']);
    $tokens['!dayOfWeek'] = $dayOfWeek;

    if ($dayOfWeek == 0){
        $tokens['!thisSunday'] = $tokens['!today'];
    }else{
        $tokens['!thisSunday'] = $tokens['!today'] + (7 - $dayOfWeek) * 24 * 3600;
    }

    $tokens['!nextSunday'] = $tokens['!thisSunday'] + 7 * 24 * 3600;
    $tokens['!twoSundaysFromNow'] = $tokens['!nextSunday'] + 7 * 24 * 3600;
    $tokens['!minsago'] = $tokens['!now'] - (60 * 30);

    if($dayOfWeek == 0){
        $tokens['!StartSunday'] = $tokens['!nextSunday'];
        $tokens['!EndSunday'] = $tokens['!twoSundaysFromNow'];
    }else{
        $tokens['!StartSunday'] = $tokens['!thisSunday'];
        $tokens['!EndSunday'] = $tokens['!nextSunday'];
    }

    return $tokens;
}

/*
 * implanation of hook_views_query_substitutions()
 */
function mc_event_section_views_query_substitutions($view){
    if($view->name == 'mc_events_sections'){
        $subs = array();
        $tokens = _mc_events_tokens();
        foreach($tokens as $key => $val){
                $newkey = str_replace("!",'',$key);
                $newkey = strtoupper("***MC_".$newkey."***");
                $subs[$newkey] = strtoupper($val);
        }
        return $subs;
    }
    return array();
}

/*
 * implanation of hook_views_query_alter()
 */
function mc_event_section_views_query_alter(&$view, &$query) {

  if($view->name != 'mc_events_sections'){
    return ;
  }

   $tokens = _mc_events_tokens();

   //add day field
   //$query->add_field(null,"DAYOFYEAR(FROM_UNIXTIME(event.unix_event_start))","day");

  $sql_case = "
   CASE
	WHEN ((event.unix_event_start BETWEEN '***MC_NOW***' AND '***MC_TOMORROW***') OR (event.unix_event_end BETWEEN '***MC_NOW***' AND '***MC_TOMORROW***'))
	THEN 'Today'
	WHEN event.unix_event_start BETWEEN '***MC_TOMORROW***' AND '***MC_AFTERTOMORROW***'
	THEN 'Tomorrow'
	WHEN event.unix_event_start BETWEEN '***MC_AFTERTOMORROW***' AND '***MC_STARTSUNDAY***'
	THEN 'This week'
	WHEN event.unix_event_start BETWEEN '***MC_STARTSUNDAY***' AND '***MC_ENDSUNDAY***'
	THEN 'Next week'
    ELSE 'Upcoming'
    END";
    //$sql_where = "(event.unix_event_start between '***MC_NOW***' and '***MC_AFTERTOMORROW***') OR (event.unix_event_end between '***MC_NOW***' and '***MC_ENDSUNDAY***')"; //old range limiter
    $sql_where = "(event.unix_event_start > '***MC_NOW***') OR (event.unix_event_end > '***MC_NOW***')";

    if($sql_case && $sql_where){
          //add fields as defined above
          $query->add_field(null,$sql_case,'section');
          $query->add_where('event_section',$sql_where);

        //adding sort, by section, abs and day,rand();
        $query->orderby = array(
            "(CASE WHEN section='Today' then 0
     WHEN section='Tomorrow' then 1
     WHEN section='This week' then 2
     WHEN section='Next week' then 3
     WHEN section='Upcoming' then 4
     ELSE section
     END) ASC",
            "(CASE WHEN (UNIX_TIMESTAMP(now()) - event.unix_event_start)<=0 THEN 1
        WHEN (UNIX_TIMESTAMP(now()) - event.unix_event_start) > 0
        THEN 0 END) DESC",
            "abs(UNIX_TIMESTAMP(now()) - event.unix_event_start)",
            "rand()"
        );
    }//end if sql_case and sql_where
}

/**
 * accepts the str variable as string "WEEK-YEAR" format, ex: "41-2004"
 * @param $str
 * @return string
 * @todo also see theme_weekofyear
 */
function theme_weekofyear_str($str){
    $parts = explode("-",$str);
    return theme_weekofyear($parts[0],$parts[1]);
}

/**
 * return Week of FIRST DAY OF WEEK (based on the input day and year).
 * @param $week
 * @param $year
 * @return string
 * @todo should this be a real themeing function?
 */
function theme_weekofyear($week,$year){
        $firstdayts = _mc_date_week_firstday($week,$year);
        if($year > date('Y')){
            return "Week of ". date('F jS Y',$firstdayts);
        }else{
            return "Week of ". date('F jS',$firstdayts);
        }
}

/**
 * renders the mc_sections view landing page in groups (sections/week/day/events (duplicate) or EVENT)
 * @param $view
 * @param $sets
 * @return string.
 */
function mc_event_section_views_group_render($view,$sets){
    $output = "";
    $i = 0;

    foreach($sets as $section_name => $section){
        $section_cls = strtolower(str_replace(array(" "),"_",$section_name));

        $output .= '<div id="'.$section_cls.'" class="section-section '.$section_cls.'">'; //start section.
        $output .= '<div class="block-title"><h3>'.$section_name.'</h3><span class="arrow"></span></div>';
        foreach($section as $week_num => $week){
            $output .= '<div class="section-week">'; //start section-week
            $output .= '<div class="event-separator week">'.theme_weekofyear_str($week_num).'</div>';
            foreach($week as $day_num => $day){
                $day_str = format_date($day_num,'custom',"l");
                $output .= '<div class="section-day">'; //start section-day
                $output .= '<div class="event-separator day">'.$day_str.'</div>';

                foreach($day as $event_num => $events){
                    if(is_array($events)){
                        $rows = array();
                            //group duplicate events into one raw with duplicates as wrapper
                            foreach ($events as $event_nid => $event) {
                                if ($view->uses_row_plugin()) {
                                    $view->view->row_index = $i++;
                                    $rows[] = $view->row_plugin->render($event);
                                }else{
                                    $rows[] = $event;
                                }
                            }
                        $output .= '<div class="duplicates">'.theme($view->theme_functions(), $view->view, $view->options, $rows, $event_num)."</div>";
                    }elseif(is_object($events)){
                        $rows = array();
                        if ($view->uses_row_plugin()) {
                            $view->view->row_index = $i++;
                            $rows[] = $view->row_plugin->render($events);
                        }else{
                            $rows[] = $events;
                        }
                        $output .= theme($view->theme_functions(), $view->view, $view->options, $rows, '');
                    }
                }
                $output .= '</div>'; //close section-day
            }
            $output .= '</div>'; //close section-week
        }
        $output .= "</div>"; //close sections div
    }

    return $output;
}

/**
 * Logic to group the views records came from mc_event_sections view (grouping function).
 * @see semanticviews_plugin_style_default.inc
 * @param $view
 * @param $records
 * @param string $grouping_field
 * @return array
 */
function mc_event_section_views_group(&$view,$records,$grouping_field = ''){
    // Make sure fields are rendered
    $view->render_fields($view->view->result);

    $sets = array();

    foreach($records as $event){
        $event->info = _mc_event_process_record_info($event);
        $section = $event->section;
        $week = _mc_date_calender_week($event->event_unix_event_start);
        $year = date('Y',$event->event_unix_event_start);
        $week_num = $week."-".$year;
        $day_num = format_date($event->event_unix_event_start,"custom","d");
        $day_month = format_date($event->event_unix_event_start,"custom","m");
        $day_year = format_date($event->event_unix_event_start,"custom","y");
        $day = mktime(0, 0, 0, $day_month, $day_num, $day_year);
        $sets[$section][$week_num][$day][$event->nid] = $event;
    }

    foreach($sets as $section_name => $section){
        foreach($section as $week_num => $week){
            foreach($week as $day_num => $day){
                $sets[$section_name][$week_num][$day_num] = _mc_event_filter_day_dubs($day);
            }
        }
    }

    return $sets;
}