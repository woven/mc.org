<?php
/**
 * @file
 * Code for the mc_twitter_schedule feature.
 */

include_once 'mc_twitter_schedule.features.inc';

define('MC_TWITTER_SCHEDULE_INTERVAL_FROM', "+1.5 hours");
define('MC_TWITTER_SCHEDULE_INTERVAL_TO', "+2 hours");
define('MC_TWITTER_SCHEDULE_INTERVAL_FLAG', "tweet_2hour");
define('MC_TWITTER_SCHEDULE_DAILY_HOUR',9);
define('MC_TWITTER_USER',"samerwoven");
define('MC_TWITTER_HASHTAG',"#miamitech");

function mc_twitter_schedule_menu(){
  $items = array();

  $items['admin/mc/mc_twitter_schedule'] = array(
    'title' => 'Twitter Schedule',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mc_twitter_schedule'),
    'type' => MENU_SUGGESTED_ITEM,
  );

  return $items;
}

function mc_twitter_schedule(){
  $form = array();

  $form['mc_twitter_interval'] = array(
    'title' => "Twitter Post Interval",
    '#tree' => TRUE
  );

  return system_settings_form($form);
}

function _mc_twitter_schedule_cronapi($op, $job = NULL) {
  $items = array();

  $items['events_2hours_tweets'] = array(
    'description' => 'Send event tweets every two hours for upcoming events',
    'rule' => '0 */2 * * *', // Every 2 hours
  );

  return $items;
}

/**
 * @todo make a function to allow you to patch send tweets based on list of nodes, with settings (like default msg);
 */
function tweet_events_between($from = NULL,$to = NULL,$flag = true){
  //adding dependencies on twitter account
  module_load_include('inc', 'twitter');

  //timestamp for to/from , either from function or defaults
  if(!is_null($from)){
    $ts_from = strtotime($from);
  }else{
    $ts_from = strtotime("+1.5 hours");
  }

  if(!is_null($to)){
    $ts_to = strtotime($to);
  }else{
    $ts_to = strtotime("+2 hours");
  }

  $flag_name = 'tweet_2hour';
  $twitter_user = variable_get("MC_TWITTER_USER",MC_TWITTER_USER);
  $twitter_interval_status = "@event_time! !title !tinyurl !hash";

  $sql = "SELECT
    `event`.nid as nid,
    node.title as title,
    `event`.unix_event_start as unix_start,
    `event`.unix_event_end as unix_end,
    `event`.has_end_date as has_end_date,
    `event`.has_time as has_time
   FROM
    node
   INNER JOIN `event` ON `event`.nid = node.nid AND node.type = '%s'
   LEFT JOIN flag_content ON flag_content.content_id = `event`.nid
   LEFT JOIN flags ON flags.fid = flag_content.fid AND flags.name = '%s'
   WHERE flag_content.fcid IS NULL AND `event`.unix_event_start > %d AND `event`.unix_event_start < %d
   ORDER BY `event`.unix_event_start ASC";

  $rows = db_query($sql,'event',$flag_name,$ts_from,$ts_to);

  if($flag){
    //load flag object
    $flagop = flag_get_flag($flag_name);
    if(!$flagop){
      return;
    }
  }

  //load the twitter account
  $twitter_account = twitter_account_load_byscreename($twitter_user);
  if(!$twitter_account){
    return;
  }

  while($node = db_fetch_object($rows)){

    $replacements = array(
      '!title' => $node->title,
      '!url' => url('node/'. $node->nid, array('absolute' => TRUE, 'alias' => TRUE)),
      '!url-alias' => url('node/'. $node->nid, array('absolute' => TRUE)),
      '!hash' => variable_get("mc_twitter_hastag",MC_TWITTER_HASHTAG),
      '@event_time' => theme_mc_event_date($node->unix_start, $node->unix_end, $node->has_end_date, $node->has_time)
    );

    // Only generate the shortened URL if it's going to be used. No sense
    // burning through TinyURLs without a good reason.
    if (strstr($twitter_interval_status, '!tinyurl') !== FALSE) {
      $replacements['!tinyurl'] = twitter_shorten_url(url('node/'. $node->nid, array('absolute' => TRUE)));
    }

    $status = strtr($twitter_interval_status, $replacements);

    // If token module is available, process status to do the token replacement
    if (module_exists('token')) {
      $status = token_replace($status, 'node', $node);
    }

    try {
      twitter_set_status($twitter_account, $status);
      if($flag){
        $flagop->flag('flag', $node->nid);
      }
    }catch (TwitterException $e) {
      //@todo convert to watchdog instead of drupal_set_message
      drupal_set_message(t('An error occurred when posting to twitter: %code %error',
        array('%code' => $e->code, '%error' => $e->error)), 'warning');
    }
  }
}

function tweet_events_count_between($from = null,$to = null){
  //adding dependencies on twitter account
  module_load_include('inc', 'twitter');

  //timestamp for to/from , either from function or defaults
  if(!is_null($from)){
    $from = strtotime($from);
  }else{
    $from = strtotime("now");
  }

  if(!is_null($to)){
    $to = strtotime($to);
  }else{
    $to = strtotime("tomorrow");
  }

  $twitter_user = variable_get("MC_TWITTER_USER",MC_TWITTER_USER);

  $sql = "SELECT
            count(`event`.nid)
          FROM
            node
          INNER JOIN `event` ON `event`.nid = node.nid
          WHERE `event`.unix_event_start > %d AND `event`.unix_event_start < %d";
  
  $count = db_result(db_query($sql,$from,$to));
  if($count && $twitter_user){
    $twitter_account = twitter_account_load_byscreename($twitter_user);

    $status = t("!events: !event_today_url !hash",array(
      '!events' => format_plural($count,"1 event today! Check it out","@count events today! Check them out"),
      '!event_today_url' => url("events",array('fragment' => 'today','absolute' => true)),
      '!hash' => variable_get("mc_twitter_hastag",MC_TWITTER_HASHTAG)
      )
    );

    try {
      twitter_set_status($twitter_account,$status);
    }
    catch (TwitterException $e) {
      //@todo convert to watchdog instead of drupal_set_message
      drupal_set_message(t('An error occurred when posting to twitter: %code %error',
        array('%code' => $e->code, '%error' => $e->error)), 'warning');
    }
  }
}