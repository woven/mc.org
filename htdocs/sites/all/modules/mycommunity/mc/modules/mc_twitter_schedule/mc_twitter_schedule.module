<?php
/**
 * @file
 * Code for the mc_twitter_schedule feature.
 */

include_once 'mc_twitter_schedule.features.inc';

define('MC_TWITTER_SCHEDULE_INTERVAL_FROM', "+1.5 hours");
define('MC_TWITTER_SCHEDULE_INTERVAL_TO', "+2 hours");
define('MC_TWITTER_SCHEDULE_INTERVAL_FLAG', "tweet_2hour");
define('MC_TWITTER_SCHEDULE_DAILY_HOUR','9am');
define('MC_TWITTER_USER',"");
define('MC_TWITTER_HASHTAG',"#miamitech");
define('MC_TWITTER_ENABLE',0);

function mc_twitter_schedule_cronapi($op, $job = NULL) {
  $items = array();

  $items['tweet_events_between'] = array(
    'description' => 'Send event tweets for events that is going to start in 2 and 2half hour from now',
    'rule' => '*/15 * * * *', //run every 15mins
  );
/*
  $items['tweet_events_count_between'] = array(
    'description' => 'Send tweets count at 6am everyday',
    'rule' => '* 6 * * *', //run every 6am
  );
*/
  return $items;
}

function debug_mc_tweet_events_between($day = "yesterday"){
  $ampm = array("am","pm");
  $hours = array(12,1,2,3,4,5,6,7,8,9,10,11);

  foreach($ampm as $val){
    foreach($hours as $h){
      //:00
      dsm("$day $h$val");
      tweet_events_between("$day $h$val",null,null,true);

      //:15 mins
      dsm("$day $h:15$val");
      tweet_events_between("$day $h:15$val",null,null,true);

      //:30 mins
      dsm("$day $h:20$val");
      tweet_events_between("$day $h:30$val",null,null,true);

      //:45 mins
      dsm("$day $h:45$val");
      tweet_events_between("$day $h:45$val",null,null,true);
    }
  }
}

/**
 * @todo make a function to allow you to patch send tweets based on list of nodes, with settings (like default msg);
 */
function tweet_events_between($now = null,$from = NULL,$to = NULL,$debug = false,$tweet = true,$flag = true){
  if(!variable_get("MC_TWITTER_ENABLE",MC_TWITTER_ENABLE) && !$debug){
    return;
  };

  if(!$debug){
    //watchdog('mc_twitter_schedule',"Twitter Schedule started");
  }

  if(!is_null($now)){
    $now = strtotime($now);
  }else{
    $now = time();
  }

  //adding dependencies on twitter account
  module_load_include('inc', 'twitter');

  //timestamp for to/from , either from function or defaults
  if(!is_null($from)){
    $ts_from = strtotime($from,$now);
  }else{
    $ts_from = strtotime("+2hour",$now);
  }

  if(!is_null($to)){
    $ts_to = strtotime($to,$now);
  }else{
    $ts_to = strtotime("+2hour 30min",$now);
  }

  $twitter_user = variable_get("MC_TWITTER_USER",MC_TWITTER_USER);
  $twitter_interval_status = "@event_time! !title !from!tinyurl !hash";

  //initiate flaging object
  $flag_name = 'tweet_2hour';
  $flagop = flag_get_flag($flag_name);

  //dsm($now);
  //dsm($ts_from,"ts_from");
  //dsm($ts_to,"ts_to");


  $sql = "SELECT
    `event`.nid as nid,
    node.title as title,
    `event`.unix_event_start as unix_start,
    `event`.unix_event_end as unix_end,
    `event`.has_end_date as has_end_date,
    `event`.has_time as has_time,
    content_type_group.field_twitter_username_value as twitter
   FROM
    node
   INNER JOIN `event` ON `event`.nid = node.nid AND node.type = '%s'
   LEFT JOIN og_ancestry ON og_ancestry.nid = node.nid
   LEFT JOIN content_type_group ON content_type_group.nid = og_ancestry.group_nid
   WHERE (`event`.unix_event_start >= %d AND `event`.unix_event_start <= %d)
   ORDER BY `event`.unix_event_start ASC";

  $rows = db_query($sql,'event',$ts_from,$ts_to);


  if($tweet && !$debug){
    //load the twitter account
    $twitter_account = twitter_account_load_byscreename($twitter_user);
    if(!$twitter_account){
      return;
    }
  }

  while($node = db_fetch_object($rows)){
      //check if this node is flagged already
      $node->is_flagged = false;
      if(!$debug){ //if debugging mode is off (loop through all)
        if($flag && $flagop){ //if flagging enabled
          $node->is_flagged = $flagop->is_flagged($node->nid);
        }
      }

      if(!$node->is_flagged){

      $replacements = array(
        '!title' => trim($node->title),
        '!url' => url('node/'. $node->nid, array('absolute' => TRUE, 'alias' => TRUE)),
        '!url-alias' => url('node/'. $node->nid, array('absolute' => TRUE)),
        '!hash' => variable_get("mc_twitter_hastag",MC_TWITTER_HASHTAG),
        '@event_time' => strip_tags(theme_mc_event_date($node->unix_start, $node->unix_end, $node->has_end_date, $node->has_time)),
        '!from' => $node->twitter ? "from @" . $node->twitter . " ": ""
      );

      // Only generate the shortened URL if it's going to be used. No sense
      // burning through TinyURLs without a good reason.
      if (strstr($twitter_interval_status, '!tinyurl') !== FALSE) {
        $replacements['!tinyurl'] = twitter_shorten_url(url('node/'. $node->nid, array('absolute' => TRUE)));
      }

      $status = strtr($twitter_interval_status, $replacements);
      $status = trim($status);

      //check if status is more than target len and trim title to fit in status
      $target_len = 140;
      if(strlen($status) > $target_len){
        $key = "!title";
        $status_len = strlen($status);
        $title_len = strlen($replacements['!title']);

        $new_title_trim = ($status_len - $target_len) + 3;

        $title_len_new = $title_len - $new_title_trim;

        $replacements['!title'] = substr($replacements['!title'],0,$title_len_new) . "...";

        $status = strtr($twitter_interval_status, $replacements);
        $status = trim($status);
      }

      if($tweet && !$debug){
        mc_tweet($twitter_account,$status);
        if($flag){
          $flagop->flag('flag', $node->nid);
        }
      }

      if($debug){
         dsm($status);
      }
    }
  }

  if(!$debug){
    watchdog('mc_twitter_schedule',"Twitter Schedule done");
  }
}

function tweet_ct_between($ct = array(),$now = null,$from = NULL,$to = NULL,$debug = false,$tweet = true,$flag = true){
  if(!variable_get("MC_TWITTER_ENABLE",MC_TWITTER_ENABLE) && !$debug){
    return;
  };

  if(!$debug){
    //watchdog('mc_twitter_schedule',"Twitter Schedule started");
  }

  if(!is_null($now)){
    $now = strtotime($now);
  }else{
    $now = time();
  }

  //adding dependencies on twitter account
  module_load_include('inc', 'twitter');

  //timestamp for to/from , either from function or defaults
  if(!is_null($from)){
    $ts_from = strtotime($from,$now);
  }else{
    $ts_from = strtotime("-1hour",$now);
  }

  if(!is_null($to)){
    $ts_to = strtotime($to,$now);
  }else{
    $ts_to = strtotime("-2hour 30min",$now);
  }

  $twitter_user = variable_get("MC_TWITTER_USER",MC_TWITTER_USER);
  $twitter_interval_status = "!title !from!tinyurl !hash";

  //initiate flaging object
  $flag_name = 'tweet_2hour';
  $flagop = flag_get_flag($flag_name);

  $sql = "SELECT
    node.nid as nid,
    node.title as title,
    node.created as created,
    content_type_group.field_twitter_username_value as twitter
   FROM
    node
   LEFT JOIN og_ancestry ON og_ancestry.nid = node.nid
   LEFT JOIN content_type_group ON content_type_group.nid = og_ancestry.group_nid
   WHERE (node.created >= %d) AND node.type = 'nnews'
   ORDER BY node.created ASC";

  $rows = db_query($sql,$ts_from);

  if($tweet && !$debug){
    //load the twitter account
    $twitter_account = twitter_account_load_byscreename($twitter_user);
    if(!$twitter_account){
      return;
    }
  }

  while($node = db_fetch_object($rows)){
    //check if this node is flagged already
    $node->is_flagged = false;
    if(!$debug){ //if debugging mode is off (loop through all)
      if($flag && $flagop){ //if flagging enabled
        $node->is_flagged = $flagop->is_flagged($node->nid);
      }
    }

    if(!$node->is_flagged){

      $replacements = array(
        '!title' => trim($node->title),
        '!url' => url('node/'. $node->nid, array('absolute' => TRUE, 'alias' => TRUE)),
        '!url-alias' => url('node/'. $node->nid, array('absolute' => TRUE)),
        '!hash' => variable_get("mc_twitter_hastag",MC_TWITTER_HASHTAG),
        //'@event_time' => strip_tags(theme_mc_event_date($node->unix_start, $node->unix_end, $node->has_end_date, $node->has_time)),
        '!from' => $node->twitter ? "from @" . $node->twitter . " ": ""
      );

      // Only generate the shortened URL if it's going to be used. No sense
      // burning through TinyURLs without a good reason.
      if (strstr($twitter_interval_status, '!tinyurl') !== FALSE) {
        $replacements['!tinyurl'] = twitter_shorten_url(url('node/'. $node->nid, array('absolute' => TRUE)));
      }

      $status = strtr($twitter_interval_status, $replacements);
      $status = trim($status);

      //check if status is more than target len and trim title to fit in status
      $target_len = 140;
      if(strlen($status) > $target_len){
        $key = "!title";
        $status_len = strlen($status);
        $title_len = strlen($replacements['!title']);

        $new_title_trim = ($status_len - $target_len) + 3;

        $title_len_new = $title_len - $new_title_trim;

        $replacements['!title'] = substr($replacements['!title'],0,$title_len_new) . "...";

        $status = strtr($twitter_interval_status, $replacements);
        $status = trim($status);
      }

      if($tweet && !$debug){
        mc_tweet($twitter_account,$status);
        if($flag){
          $flagop->flag('flag', $node->nid);
        }
      }

      if($debug){
        dsm($status);
      }
    }
  }

  if(!$debug){
    watchdog('mc_twitter_schedule',"Twitter ContentTypes Schedule done");
  }
}


function tweet_events_count_between($from = null,$to = null,$tweet = true){
  if(!variable_get("MC_TWITTER_ENABLE",MC_TWITTER_ENABLE)){
    return;
  };

  //adding dependencies on twitter account
  module_load_include('inc', 'twitter');

  //timestamp for to/from , either from function or defaults
  if(!is_null($from)){
    $from = strtotime($from);
  }else{
    $from = strtotime("today");
  }

  if(!is_null($to)){
    $to = strtotime($to);
  }else{
    $to = strtotime("tomorrow");
  }

  $twitter_user = variable_get("MC_TWITTER_USER",MC_TWITTER_USER);

  $sql = "SELECT
            count(`event`.nid)
          FROM
            node
          INNER JOIN `event` ON `event`.nid = node.nid
          WHERE (`event`.unix_event_start >= %d AND `event`.unix_event_start <= %d)";
  
  $count = db_result(db_query($sql,$from,$to));
  if($count && $twitter_user){
    $status = t("!events: !event_today_url !hash",array(
      '!events' => format_plural($count,"1 event today! Check it out","@count events today! Check them out"),
      '!event_today_url' => url("events",array('fragment' => 'today','absolute' => true)),
      '!hash' => variable_get("mc_twitter_hastag",MC_TWITTER_HASHTAG)
      )
    );

    if($tweet){
      $tweet_account = twitter_account_load_byscreename($twitter_user);
      mc_tweet($tweet_account,$status);
    }else{
      dsm($status);
    }
  }
}