<?php

/*
 * @todo remove misc/autocomplete.js through hooks instead of manually removing the file.
 * @todo imrpove the speed and logic of auto-complete callback
 * @todo use the hooks of jqmulti to add the jq1.8 dependecies
 * @todo avoid hacking line 978 @ nodereference.module
*/

function select2_init(){
  $path = drupal_get_path("module",'select2');
  $lib = libraries_get_path("select2");

  _add_node_form();

  /*
   * add required select2 files
  */
  drupal_add_js($lib."/select2.min.js");
  drupal_add_css($lib."/select2.css");

  /*
   * add select2 auto-complete behaviour, overrides the current drupal auto-complete
  */
  drupal_add_js($path."/select2.js");
}


function select2_menu(){
  $items = array();

  $items['select2/autocomplete'] = array(
    'page callback' => '_select2_autocomplete',
    'access arguments' => array('access content'),
    'type' => MENU_SUGGESTED_ITEM,
  );

  $items['select2/%ctools_js/add/%'] = array(
    //'title' => 'Login',
    'page callback' => 'modal_forms_login',
    'page arguments' => array(1,3),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  return $items;
}


function _select2_autocomplete(){
  $url = $_GET['url'];
  $query = $_GET['term'];

  $fullpath = $url."/".$query;

  /*
   * @todo detect the current host and remove it automatically
   */
  $real_path = str_replace("http://w.miamitech.org/","",$fullpath);

  //change the url to become
  $_GET['q'] = $real_path;
  menu_execute_active_handler();
  exit();
}

function _add_node_form(){
  static $already_added = FALSE;

  //adding bootstrap js
  //ctools_add_css('bootstrap.min', 'select2', '/');

  // Include the CTools tools that we need.
  ctools_include('ajax');
  ctools_include('modal');

  // Add CTools' javascript to the page.
  ctools_modal_add_js();

  $js_settings = array(
    'modal-popup-small' => array(
      'modalSize' => array(
        'type' => 'fixed',
        'width' => 300,
        'height' => 300,
      ),
      'modalOptions' => array(
        'opacity' => 0.85,
        'background' => '#000',
      ),
      'animation' => 'fadeIn',
      'closeText' => t('Close'),
    )
  );

  drupal_add_js($js_settings, 'setting');
}

function modal_forms_login($js = NULL) {
  global $user;

  ctools_include('node.pages','node',"");

  //set up a dummy node to make sure the form comes in right
  $node = new stdClass();
  $node->uid = $user->uid;
  $node->type = 'place';
  node_object_prepare($node);

  // Fall back if $js is not set.
  if (!$js) {
    return drupal_get_form('place_node_form',$node);
  }

  ctools_include('modal');
  ctools_include('ajax');

  $form_state = array(
    'title' => t('Add New Place'),
    'ajax' => TRUE,
    'args' => array($node)
  );

  $output = ctools_modal_form_wrapper('place_node_form', $form_state);

  if (!empty($form_state['executed'])) {

    //initiate the output ajax command array
    $output = array();

    //the new node that has been created
    $nid = $form_state['nid'];

    //resturn the new node id back to the select list
    if($nid){
      // @todo change the selectlist list to the newly created content type.
    }


    // We'll just overwrite the form output if it was successful.
    ctools_add_js('ajax-responder');
    $output[] = ctools_modal_command_dismiss(t('Login Success'));

  }

  //render output array/string to back to drupal
  print ctools_ajax_render($output);
  exit;
}